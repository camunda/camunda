# yaml-language-server: $schema=../schemas/openapi-operation-metadata-extensions.schema.json
openapi: "3.0.3"
info:
  title: "Orchestration Cluster API"
  version: "0.1"
  contact:
    name: "Camunda Engineering"
    url: "https://github.com/camunda/camunda/issues"
  description: "API for communicating with a Camunda 8 cluster."
  license:
    name: "Camunda License Version 1.0"
    url: "https://github.com/camunda/camunda/blob/main/licenses/CAMUNDA-LICENSE-1.0.txt"
externalDocs:
  description: "Find out more"
  url: "https://docs.camunda.io/docs/apis-tools/orchestration-cluster-api-rest/orchestration-cluster-api-rest-overview/"
servers:
  - url: "{schema}://{host}:{port}/v2"
    variables:
      host:
        default: "localhost"
        description: "The hostname of the Orchestration Cluster REST Gateway."
      port:
        default: "8080"
        description: "The port of the Orchestration Cluster REST API server."
      schema:
        default: "http"
        description: "The schema of the Orchestration Cluster REST API server."
tags:
  - name: "Ad-hoc sub-process"
  - name: "Authentication"
  - name: "Authorization"
  - name: "Batch operation"
  - name: "Clock"
  - name: "Cluster"
  - name: "Decision definition"
  - name: "Decision instance"
  - name: "Decision requirements"
  - name: "Document"
  - name: "Element instance"
  - name: "Group"
  - name: "Incident"
  - name: "Job"
  - name: "License"
  - name: "Mapping rule"
  - name: "Message"
  - name: "Message subscription"
  - name: "Process definition"
  - name: "Process instance"
  - name: "Resource"
  - name: "Role"
  - name: "Setup"
  - name: "Signal"
  - name: "System"
  - name: "Tenant"
  - name: "User"
  - name: "User task"
  - name: "Variable"
paths:
  /topology:
    get:
      x-eventually-consistent: false
      x-operation-kind:
        - $ref: "#/components/schemas/OperationMetadata"
          kind: "query"
      tags:
        - "Cluster"
      operationId: "getTopology"
      summary: "Get cluster topology"
      description: "Obtains the current topology of the cluster the gateway is part\
        \ of."
      responses:
        "200":
          description: "Obtains the current topology of the cluster the gateway is\
            \ part of."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopologyResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /status:
    get:
      x-eventually-consistent: false
      tags:
        - "Cluster"
      operationId: "getStatus"
      summary: "Get cluster status"
      description: "Checks the health status of the cluster by verifying if there's at least one partition with a healthy leader."
      responses:
        "204":
          description: "The cluster is UP and has at least one partition with a healthy leader."
        "503":
          description: "The cluster is DOWN and does not have any partition with a healthy leader."
  /license:
    get:
      tags:
        - "License"
      operationId: "getLicense"
      summary: "Get license status"
      description: "Obtains the status of the current Camunda license."
      responses:
        "200":
          description: "Obtains the current status of the Camunda license."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LicenseResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: false
      x-operation-kind:
        - $ref: "#/components/schemas/OperationMetadata"
          kind: "query"
  /authentication/me:
    get:
      tags:
        - "Authentication"
      operationId: "getAuthentication"
      summary: "Get current user"
      description: "Retrieves the current authenticated user."
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "The current user is successfully returned."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CamundaUserResult"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: false
      x-operation-kind:
        - $ref: "#/components/schemas/OperationMetadata"
          kind: "query"
  /jobs/activation:
    post:
      tags:
        - "Job"
      operationId: "activateJobs"
      summary: "Activate jobs"
      description: "Iterate through all known partitions and activate jobs up to the\
        \ requested maximum.\n"
      x-eventually-consistent: false
      x-operation-kind:
        $ref: "#/components/schemas/OperationMetadata"
        kind: command
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobActivationRequest"
      responses:
        "200":
          description: "The list of activated jobs."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobActivationResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /jobs/search:
    post:
      tags:
        - "Job"
      operationId: "searchJobs"
      summary: "Search jobs"
      description: "Search for jobs based on given criteria."
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobSearchQuery"
      responses:
        "200":
          description: "The job search result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
      x-operation-kind:
        - $ref: "#/components/schemas/OperationMetadata"
          kind: "query"
  /jobs/{jobKey}/failure:
    post:
      tags:
        - "Job"
      operationId: "failJob"
      summary: "Fail job"
      description: "Mark the job as failed\n"
      parameters:
        - name: "jobKey"
          in: "path"
          required: true
          description: "The key of the job to fail."
          schema:
            $ref: "#/components/schemas/JobKey"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobFailRequest"
      responses:
        "204":
          description: "The job is failed."
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The job with the given jobKey is not found.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "The job with the given key is in the wrong state currently.\
            \ More details are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
      x-operation-kind:
        - $ref: "#/components/schemas/OperationMetadata"
          kind: "command"
  /jobs/{jobKey}/error:
    post:
      tags:
        - "Job"
      operationId: "throwJobError"
      summary: "Throw error for job"
      description: "Reports a business error (i.e. non-technical) that occurs while\
        \ processing a job.\n"
      parameters:
        - name: "jobKey"
          in: "path"
          required: true
          description: "The key of the job."
          schema:
            $ref: "#/components/schemas/JobKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobErrorRequest"
      responses:
        "204":
          description: "An error is thrown for the job."
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The job with the given jobKey is not found.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "The job with the given key is in the wrong state currently.\
            \ More details are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
      x-operation-kind:
        - $ref: "#/components/schemas/OperationMetadata"
          kind: "command"
  /jobs/{jobKey}/completion:
    post:
      tags:
        - "Job"
      operationId: "completeJob"
      summary: "Complete job"
      description: "Complete a job with the given payload, which allows completing\
        \ the associated service task.\n"
      parameters:
        - name: "jobKey"
          in: "path"
          required: true
          description: "The key of the job to complete."
          schema:
            $ref: "#/components/schemas/JobKey"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobCompletionRequest"
      responses:
        "204":
          description: "The job was completed successfully."
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The job with the given key was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "The job with the given key is in the wrong state currently.\
            \ More details are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
      x-operation-kind:
        - $ref: "#/components/schemas/OperationMetadata"
          kind: "command"
  /jobs/{jobKey}:
    patch:
      tags:
        - "Job"
      operationId: "updateJob"
      summary: "Update job"
      description: "Update a job with the given key."
      parameters:
        - name: "jobKey"
          in: "path"
          required: true
          description: "The key of the job to update."
          schema:
            $ref: "#/components/schemas/JobKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobUpdateRequest"
      responses:
        "204":
          description: "The job was updated successfully."
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The job with the jobKey is not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "The job with the given key is in the wrong state currently.\
            \ More details are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
      x-operation-kind:
        - $ref: "#/components/schemas/OperationMetadata"
          kind: "patch"
  /incidents/{incidentKey}/resolution:
    post:
      tags:
        - "Incident"
      operationId: "resolveIncident"
      summary: "Resolve incident"
      description: "Marks the incident as resolved; most likely a call to Update job\
        \ will be necessary to reset the job’s retries, followed by this call.\n"
      parameters:
        - name: "incidentKey"
          in: "path"
          required: true
          description: "Key of the incident to resolve."
          schema:
            $ref: "#/components/schemas/IncidentKey"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IncidentResolutionRequest"
      responses:
        "204":
          description: "The incident is marked as resolved."
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The incident with the incidentKey is not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
      x-operation-kind:
        - $ref: "#/components/schemas/OperationMetadata"
          kind: "command"
  /tenants:
    post:
      tags:
        - "Tenant"
      operationId: "createTenant"
      summary: "Create tenant"
      description: "Creates a new tenant."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantCreateRequest"
        required: true
      responses:
        "201":
          description: "The tenant was created successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantCreateResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found. The resource was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "Tenant with this id already exists."
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
      x-operation-kind:
        - $ref: "#/components/schemas/OperationMetadata"
          kind: "create"
          duplicatePolicy: "conflict"
  /tenants/{tenantId}:
    get:
      tags:
        - "Tenant"
      operationId: "getTenant"
      summary: "Get tenant"
      description: "Retrieves a single tenant by tenant ID."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
      responses:
        "200":
          description: "The tenant was retrieved successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Tenant not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
      x-operation-kind:
        kind: "query"
    put:
      tags:
        - "Tenant"
      operationId: "updateTenant"
      summary: "Update tenant"
      description: "Updates an existing tenant."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantUpdateRequest"
        required: true
      responses:
        "200":
          description: "The tenant was updated successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantUpdateResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found. The tenant was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
      x-operation-kind:
        kind: "update"
    delete:
      tags:
        - "Tenant"
      operationId: "deleteTenant"
      summary: "Delete tenant"
      description: "Deletes an existing tenant."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
      responses:
        "204":
          description: "The tenant was deleted successfully."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found. The tenant was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
      x-operation-kind:
        kind: "delete"
  /tenants/{tenantId}/users/{username}:
    put:
      tags:
        - "Tenant"
      operationId: "assignUserToTenant"
      summary: "Assign a user to a tenant"
      description: "Assign a single user to a specified tenant. The user can then access tenant data and perform authorized actions."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          description: "The unique identifier of the tenant."
          schema:
            $ref: "#/components/schemas/TenantId"
        - name: "username"
          in: "path"
          required: true
          description: "The username of the user to assign."
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "204":
          description: "The user was successfully assigned to the tenant."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found. The tenant or user was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    delete:
      tags:
        - "Tenant"
      operationId: "unassignUserFromTenant"
      summary: "Unassign a user from a tenant"
      description: "Unassigns the user from the specified tenant. The user can no longer access tenant data."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          description: "The unique identifier of the tenant."
          schema:
            $ref: "#/components/schemas/TenantId"
        - name: "username"
          in: "path"
          required: true
          description: "The unique identifier of the user."
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "204":
          description: "The user was successfully unassigned from the tenant."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found. The tenant or user was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /tenants/{tenantId}/users/search:
    post:
      tags:
        - "Tenant"
      operationId: "searchUsersForTenant"
      summary: "Search users for tenant"
      description: "Retrieves a filtered and sorted list of users for a specified\
        \ tenant."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantUserSearchQueryRequest"
      responses:
        "200":
          description: "The search result of users for the tenant."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantUserSearchResult"
      x-eventually-consistent: true
      x-operation-kind:
        kind: "query"
  /tenants/{tenantId}/clients/search:
    post:
      tags:
        - "Tenant"
      operationId: "searchClientsForTenant"
      summary: "Search clients for tenant"
      description: "Retrieves a filtered and sorted list of clients for a specified\
        \ tenant."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantClientSearchQueryRequest"
      responses:
        "200":
          description: "The search result of users for the tenant."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantClientSearchResult"
      x-eventually-consistent: true
      x-operation-kind:
        kind: "query"
  /tenants/{tenantId}/groups/search:
    post:
      tags:
        - "Tenant"
      operationId: "searchGroupIdsForTenant"
      summary: "Search groups for tenant"
      description: "Retrieves a filtered and sorted list of groups for a specified\
        \ tenant."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantGroupSearchQueryRequest"
      responses:
        "200":
          description: "The search result of groups for the tenant."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantGroupSearchResult"
      x-eventually-consistent: true
      x-operation-kind:
        kind: "query"
  /tenants/{tenantId}/roles/search:
    post:
      tags:
        - "Tenant"
      operationId: "searchRolesForTenant"
      summary: "Search roles for tenant"
      description: "Retrieves a filtered and sorted list of roles for a specified\
        \ tenant."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleSearchQueryRequest"
      responses:
        "200":
          description: "The search result of roles for the tenant."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleSearchQueryResult"
      x-eventually-consistent: true
      x-operation-kind:
        kind: "query"
  /tenants/{tenantId}/clients/{clientId}:
    put:
      tags:
        - "Tenant"
      operationId: "assignClientToTenant"
      summary: "Assign a client to a tenant"
      description: "Assign the client to the specified tenant. The client can then access tenant data and perform authorized actions."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
        - name: "clientId"
          in: "path"
          required: true
          description: "The ID of the client to assign."
          schema:
            type: "string"
      responses:
        "204":
          description: "The client was successfully assigned to the tenant."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The tenant was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    delete:
      tags:
        - "Tenant"
      operationId: "unassignClientFromTenant"
      summary: "Unassign a client from a tenant"
      description: "Unassigns the client from the specified tenant. The client can no longer access tenant data."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
        - name: "clientId"
          in: "path"
          required: true
          description: "The unique identifier of the application."
          schema:
            type: "string"
      responses:
        "204":
          description: "The client was successfully unassigned from the tenant."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The tenant does not exist or the client was not assigned to\
            \ it."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /tenants/{tenantId}/mapping-rules/{mappingRuleId}:
    put:
      tags:
        - "Tenant"
      operationId: "assignMappingRuleToTenant"
      summary: "Assign a mapping rule to a tenant"
      description: "Assign a single mapping rule to a specified tenant."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
        - name: "mappingRuleId"
          in: "path"
          required: true
          description: "The unique identifier of the mapping rule."
          schema:
            type: "string"
      responses:
        "204":
          description: "The mapping rule was successfully assigned to the tenant."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found. The tenant or mapping rule was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    delete:
      tags:
        - "Tenant"
      operationId: "unassignMappingRuleFromTenant"
      summary: "Unassign a mapping rule from a tenant"
      description: "Unassigns a single mapping rule from a specified tenant without deleting the rule."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
        - name: "mappingRuleId"
          in: "path"
          required: true
          description: "The unique identifier of the mapping rule."
          schema:
            type: "string"
      responses:
        "204":
          description: "The mapping rule was successfully unassigned from the tenant."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found. The tenant or mapping rule was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false

  /tenants/{tenantId}/mapping-rules/search:
    post:
      tags:
        - "Tenant"
      operationId: "searchMappingsForTenant"
      summary: "Search mapping rules for tenant"
      description: "Retrieves a filtered and sorted list of MappingRules for a specified\
        \ tenant."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MappingRuleSearchQueryRequest"
      responses:
        "200":
          description: "The search result of MappingRules for the tenant."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MappingRuleSearchQueryResult"
      x-eventually-consistent: true

  /tenants/{tenantId}/groups/{groupId}:
    put:
      tags:
        - "Tenant"
      operationId: "assignGroupToTenant"
      summary: "Assign a group to a tenant"
      description: "Assigns a group to a specified tenant. Group members (users, clients) can then access tenant data and perform authorized actions."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
        - name: "groupId"
          in: "path"
          required: true
          description: "The unique identifier of the group."
          schema:
            type: "string"
      responses:
        "204":
          description: "The group was successfully assigned to the tenant."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found. The tenant or group was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    delete:
      tags:
        - "Tenant"
      operationId: "unassignGroupFromTenant"
      summary: "Unassign a group from a tenant"
      description: "Unassigns a group from a specified tenant.\
        \ Members of the group (users, clients) will no longer have access to the tenant's data - except they are assigned directly to the tenant."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
        - name: "groupId"
          in: "path"
          required: true
          description: "The unique identifier of the group."
          schema:
            type: "string"
      responses:
        "204":
          description: "The group was successfully unassigned from the tenant."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found. The tenant or group was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false

  /tenants/{tenantId}/roles/{roleId}:
    put:
      tags:
        - "Tenant"
      operationId: "assignRoleToTenant"
      summary: "Assign a role to a tenant"
      description: "Assigns a role to a specified tenant.\
        \ Users, Clients or Groups, that have the role assigned, will get access to the tenant's data and can perform actions according to their authorizations."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
        - name: "roleId"
          in: "path"
          required: true
          description: "The unique identifier of the role."
          schema:
            type: "string"
      responses:
        "204":
          description: "The role was successfully assigned to the tenant."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found. The tenant or role was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    delete:
      tags:
        - "Tenant"
      operationId: "unassignRoleFromTenant"
      summary: "Unassign a role from a tenant"
      description: "Unassigns a role from a specified tenant.\
        \ Users, Clients or Groups, that have the role assigned, will no longer have access to the tenant's data - unless they are assigned directly to the tenant."
      parameters:
        - name: "tenantId"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/TenantId"
        - name: "roleId"
          in: "path"
          required: true
          description: "The unique identifier of the role."
          schema:
            type: "string"
      responses:
        "204":
          description: "The role was successfully unassigned from the tenant."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found. The tenant or role was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /tenants/search:
    post:
      tags:
        - "Tenant"
      operationId: "searchTenants"
      summary: "Search tenants"
      description: "Retrieves a filtered and sorted list of tenants."
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantSearchQueryRequest"
      responses:
        "200":
          description: "The tenants search result"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /user-tasks/{userTaskKey}/completion:
    post:
      tags:
        - "User task"
      operationId: "completeUserTask"
      summary: "Complete user task"
      description: "Completes a user task with the given key."
      parameters:
        - name: "userTaskKey"
          in: "path"
          required: true
          description: "The key of the user task to complete."
          schema:
            $ref: "#/components/schemas/UserTaskKey"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserTaskCompletionRequest"
      responses:
        "204":
          description: "The user task was completed successfully."
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The user task with the given key was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "The user task with the given key is in the wrong state currently.\
            \ More details are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /user-tasks/{userTaskKey}/assignment:
    post:
      tags:
        - "User task"
      operationId: "assignUserTask"
      summary: "Assign user task"
      description: "Assigns a user task with the given key to the given assignee."
      parameters:
        - name: "userTaskKey"
          in: "path"
          required: true
          description: "The key of the user task to assign."
          schema:
            $ref: "#/components/schemas/UserTaskKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserTaskAssignmentRequest"
      responses:
        "204":
          description: "The user task's assignment was adjusted."
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The user task with the given key was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "The user task with the given key is in the wrong state currently.\
            \ More details are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /user-tasks/{userTaskKey}:
    get:
      x-eventually-consistent: true
      tags:
        - "User task"
      operationId: "getUserTask"
      summary: "Get user task"
      description: "Get the user task by the user task key.\n"
      parameters:
        - name: "userTaskKey"
          in: "path"
          required: true
          description: "The user task key."
          schema:
            $ref: "#/components/schemas/UserTaskKey"
      responses:
        "200":
          description: "The user task is successfully returned.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserTaskResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The user task with the given key was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - "User task"
      operationId: "updateUserTask"
      summary: "Update user task"
      description: "Update a user task with the given key."
      parameters:
        - name: "userTaskKey"
          in: "path"
          required: true
          description: "The key of the user task to update."
          schema:
            $ref: "#/components/schemas/UserTaskKey"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserTaskUpdateRequest"
      responses:
        "204":
          description: "The user task was updated successfully."
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The user task with the given key was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "The user task with the given key is in the wrong state currently.\
            \ More details are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /user-tasks/{userTaskKey}/form:
    get:
      x-eventually-consistent: true
      tags:
        - "User task"
      operationId: "getUserTaskForm"
      summary: "Get user task form"
      description: "Get the form of a user task.\n\nNote that this endpoint will only\
        \ return linked forms. This endpoint does not support embedded forms.\n"
      parameters:
        - name: "userTaskKey"
          in: "path"
          required: true
          description: "The user task key."
          schema:
            $ref: "#/components/schemas/UserTaskKey"
      responses:
        "200":
          description: "The form is successfully returned.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormResult"
        "204":
          description: "The user task was found, but no form is associated with it.\n"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /user-tasks/{userTaskKey}/assignee:
    delete:
      tags:
        - "User task"
      operationId: "unassignUserTask"
      summary: "Unassign user task"
      description: "Removes the assignee of a task with the given key."
      parameters:
        - name: "userTaskKey"
          in: "path"
          required: true
          description: "The key of the user task."
          schema:
            $ref: "#/components/schemas/UserTaskKey"
      responses:
        "204":
          description: "The user task was unassigned successfully."
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The user task with the given key was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "The user task with the given key is in the wrong state currently.\
            \ More details are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /user-tasks/search:
    post:
      tags:
        - "User task"
      operationId: "searchUserTasks"
      summary: "Search user tasks"
      description: "Search for user tasks based on given criteria.\n"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserTaskSearchQuery"
      responses:
        "200":
          description: "The user task search result.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserTaskSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /user-tasks/{userTaskKey}/variables/search:
    post:
      x-eventually-consistent: true
      tags:
        - "User task"
      operationId: "searchUserTaskVariables"
      summary: "Search user task variables"
      description: "Search for user task variables based on given criteria.\n"
      parameters:
        - name: "userTaskKey"
          in: "path"
          required: true
          description: "The key of the user task."
          schema:
            $ref: "#/components/schemas/UserTaskKey"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserTaskVariableSearchQueryRequest"
      responses:
        "200":
          description: "The user task variables search response.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariableSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /variables/search:
    post:
      tags:
        - "Variable"
      operationId: "searchVariables"
      summary: "Search variables"
      description: "Search for process and local variables based on given criteria.\n"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VariableSearchQuery"
      responses:
        "200":
          description: "The variable search result.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariableSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /variables/{variableKey}:
    get:
      tags:
        - "Variable"
      operationId: "getVariable"
      summary: "Get variable"
      description: "Get the variable by the variable key.\n"
      parameters:
        - name: "variableKey"
          in: "path"
          required: true
          description: "The variable key."
          schema:
            $ref: "#/components/schemas/VariableKey"
      responses:
        "200":
          description: "The variable is successfully returned.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariableResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /clock:
    put:
      tags:
        - "Clock"
      operationId: "pinClock"
      summary: "Pin internal clock (alpha)"
      description: "Set a precise, static time for the Zeebe engine’s internal clock.\n\
        When the clock is pinned, it remains at the specified time and does not advance.\n\
        To change the time, the clock must be pinned again with a new timestamp.\n\
        \nThis endpoint is an alpha feature and may be subject to change\nin future\
        \ releases.\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClockPinRequest"
      responses:
        "204":
          description: "The clock was successfully pinned to the specified time in\
            \ epoch milliseconds.\n"
        "400":
          $ref: "#/components/responses/InvalidData"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /clock/reset:
    post:
      tags:
        - "Clock"
      operationId: "resetClock"
      summary: "Reset internal clock (alpha)"
      description: "Resets the Zeebe engine’s internal clock to the current system\
        \ time, enabling it to tick in real-time.\nThis operation is useful for returning\
        \ the clock to\nnormal behavior after it has been pinned to a specific time.\n\
        \nThis endpoint is an alpha feature and may be subject to change\nin future\
        \ releases.\n"
      responses:
        "204":
          description: "The clock was successfully reset to the system time."
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /process-definitions/search:
    post:
      tags:
        - "Process definition"
      operationId: "searchProcessDefinitions"
      summary: "Search process definitions"
      description: "Search for process definitions based on given criteria.\n"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessDefinitionSearchQuery"
      responses:
        "200":
          description: "The process definition search result.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessDefinitionSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /process-definitions/{processDefinitionKey}:
    get:
      tags:
        - "Process definition"
      operationId: "getProcessDefinition"
      summary: "Get process definition"
      description: "Returns process definition as JSON.\n"
      parameters:
        - name: "processDefinitionKey"
          in: "path"
          required: true
          description: "The assigned key of the process definition, which acts as\
            \ a unique identifier for this process definition."
          schema:
            $ref: "#/components/schemas/ProcessDefinitionKey"
      responses:
        "200":
          description: "The process definition is successfully returned.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessDefinitionResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The process definition with the given key was not found. More\
            \ details are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /process-definitions/{processDefinitionKey}/xml:
    get:
      tags:
        - "Process definition"
      operationId: "getProcessDefinitionXML"
      summary: "Get process definition XML"
      description: "Returns process definition as XML.\n"
      parameters:
        - name: "processDefinitionKey"
          in: "path"
          required: true
          description: "The assigned key of the process definition, which acts as\
            \ a unique identifier for this process definition."
          schema:
            $ref: "#/components/schemas/ProcessDefinitionKey"
      responses:
        "200":
          description: "The XML of the process definition is successfully returned.\n"
          content:
            text/xml:
              schema:
                type: "string"
        "204":
          description: "The process definition was found but does not have XML.\n"
          content:
            text/plain:
              schema:
                type: "string"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The decision with the given key was not found. More details\
            \ are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /process-definitions/{processDefinitionKey}/form:
    get:
      tags:
        - "Process definition"
      operationId: "getStartProcessForm"
      summary: "Get process start form"
      description: "Get the start form of a process.\n\nNote that this endpoint will\
        \ only return linked forms. This endpoint does not support embedded forms.\n"
      parameters:
        - name: "processDefinitionKey"
          in: "path"
          required: true
          description: "The process key."
          schema:
            $ref: "#/components/schemas/ProcessDefinitionKey"
      responses:
        "200":
          description: "The form is successfully returned.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormResult"
        "204":
          description: "The process was found, but no form is associated with it.\n"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /process-definitions/{processDefinitionKey}/statistics/element-instances:
    post:
      tags:
        - "Process definition"
      operationId: "getProcessDefinitionStatistics"
      summary: "Get process definition statistics"
      description: "Get statistics about elements in currently running process instances\
        \ by process definition key and search filter.\n"
      parameters:
        - name: "processDefinitionKey"
          in: "path"
          required: true
          description: "The assigned key of the process definition, which acts as\
            \ a unique identifier for this process definition."
          schema:
            $ref: "#/components/schemas/ProcessDefinitionKey"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessDefinitionElementStatisticsQuery"
      responses:
        "200":
          description: "The process definition statistics result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessDefinitionElementStatisticsQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /process-instances:
    post:
      tags:
        - "Process instance"
      operationId: "createProcessInstance"
      summary: "Create process instance"
      description: "Creates and starts an instance of the specified process.\nThe\
        \ process definition to use to create the instance can be specified either\
        \ using its unique key\n(as returned by Deploy resources), or using the BPMN\
        \ process ID and a version.\n\nWaits for the completion of the process instance\
        \ before returning a result\nwhen awaitCompletion is enabled.\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessInstanceCreationInstruction"
            examples:
              By process definition key:
                summary: "Create a process instance by processDefinitionKey."
                value:
                  processDefinitionKey: "12345543223453245"
                  variables: {}
              By process definition ID:
                summary: "Create a process instance by processDefinitionId and version."
                value:
                  processDefinitionId: "my-business-process"
                  processDefinitionVersion: 1
                  variables: {}
      responses:
        "200":
          description: "The process instance was created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateProcessInstanceResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
        "504":
          description: "The process instance creation request timed out in the gateway.\n\
            \nThis can happen if the `awaitCompletion` request parameter is set to\
            \ `true`\nand the created process instance did not complete within the\
            \ defined request timeout.\nThis often happens when the created instance\
            \ is not fully automated or contains wait states.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
      x-eventually-consistent: false
  /process-instances/{processInstanceKey}:
    get:
      tags:
        - "Process instance"
      operationId: "getProcessInstance"
      summary: "Get process instance"
      description: "Get the process instance by the process instance key.\n"
      parameters:
        - name: "processInstanceKey"
          in: "path"
          required: true
          description: "The process instance key."
          schema:
            $ref: "#/components/schemas/ProcessInstanceKey"
      responses:
        "200":
          description: "The process instance is successfully returned."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessInstanceResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The process instance with the given key was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /process-instances/{processInstanceKey}/sequence-flows:
    get:
      tags:
        - "Process instance"
      operationId: "getProcessInstanceSequenceFlows"
      summary: "Get process instance sequence flows"
      description: "Get sequence flows taken by the process instance.\n"
      parameters:
        - name: "processInstanceKey"
          in: "path"
          required: true
          description: "The assigned key of the process instance, which acts as a\
            \ unique identifier for this process instance."
          schema:
            $ref: "#/components/schemas/ProcessInstanceKey"
      responses:
        "200":
          description: "The process instance sequence flows result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessInstanceSequenceFlowsQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /process-instances/{processInstanceKey}/statistics/element-instances:
    get:
      tags:
        - "Process instance"
      operationId: "getProcessInstanceStatistics"
      summary: "Get process instance statistics"
      description: "Get statistics about elements by the process instance key.\n"
      parameters:
        - name: "processInstanceKey"
          in: "path"
          required: true
          description: "The assigned key of the process instance, which acts as a\
            \ unique identifier for this process instance."
          schema:
            $ref: "#/components/schemas/ProcessInstanceKey"
      responses:
        "200":
          description: "The process instance statistics result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessInstanceElementStatisticsQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /process-instances/search:
    post:
      tags:
        - "Process instance"
      operationId: "searchProcessInstances"
      summary: "Search process instances"
      description: "Search for process instances based on given criteria.\n"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessInstanceSearchQuery"
      responses:
        "200":
          description: "The process instance search result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessInstanceSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /process-instances/{processInstanceKey}/incidents/search:
    post:
      tags:
        - "Process instance"
      operationId: "searchProcessInstanceIncidents"
      summary: "Search for incidents associated with a process instance"
      description: "Search for incidents caused by the process instance or any of\
        \ its called process or decision instances.\n"
      parameters:
        - name: "processInstanceKey"
          in: "path"
          required: true
          description: "The assigned key of the process instance, which acts as a\
            \ unique identifier for this process instance."
          schema:
            $ref: "#/components/schemas/ProcessInstanceKey"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessInstanceIncidentSearchQuery"
      responses:
        "200":
          description: "The process instance search result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncidentSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The process instance with the given key was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /process-instances/{processInstanceKey}/cancellation:
    post:
      tags:
        - "Process instance"
      operationId: "cancelProcessInstance"
      summary: "Cancel process instance"
      description: "Cancels a running process instance. As a cancelation includes\
        \ more than just the removal of the process instance resource, the cancelation\
        \ resource must be posted."
      parameters:
        - name: "processInstanceKey"
          in: "path"
          required: true
          description: "The key of the process instance to cancel."
          schema:
            $ref: "#/components/schemas/ProcessInstanceKey"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelProcessInstanceRequest"
      responses:
        "204":
          description: "The process instance is canceled."
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The process instance is not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /process-instances/cancellation:
    post:
      tags:
        - "Process instance"
      operationId: "cancelProcessInstancesBatchOperation"
      summary: "Create a batch operation to cancel process instances"
      description: "Cancels multiple running process instances.\nSince only ACTIVE\
        \ root instances can be cancelled, any given filters for state and\nparentProcessInstanceKey\
        \ are ignored and overridden during this batch operation.\nThis is done asynchronously,\
        \ the progress can be tracked using the batchOperationKey from the response\
        \ and the batch operation status endpoint (/batch-operations/{batchOperationKey}).\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessInstanceCancellationBatchOperationRequest"
      responses:
        "200":
          description: "The batch operation request was created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchOperationCreatedResult"
        "400":
          description: "The process instance batch operation failed. More details\
            \ are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /process-instances/incident-resolution:
    post:
      tags:
        - "Process instance"
      operationId: "resolveIncidentsBatchOperation"
      summary: "Create a batch operation to resolve incidents of process instances"
      description: "Resolves multiple instances of process instances.\nSince only\
        \ process instances with ACTIVE state can have unresolved incidents, any given\n\
        filters for state are ignored and overridden during this batch operation.\n\
        This is done asynchronously, the progress can be tracked using the batchOperationKey\
        \ from the response and the batch operation status endpoint (/batch-operations/{batchOperationKey}).\n"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessInstanceIncidentResolutionBatchOperationRequest"
      responses:
        "200":
          description: "The batch operation request was created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchOperationCreatedResult"
        "400":
          description: "The process instance batch operation failed. More details\
            \ are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /process-instances/migration:
    post:
      tags:
        - "Process instance"
      operationId: "migrateProcessInstancesBatchOperation"
      summary: "Create a batch operation to migrate process instances"
      description: "Migrate multiple instances of process instances.\nSince only process\
        \ instances with ACTIVE state can be migrated, any given\nfilters for state\
        \ are ignored and overridden during this batch operation.\nThis is done asynchronously,\
        \ the progress can be tracked using the batchOperationKey from the response\
        \ and the batch operation status endpoint (/batch-operations/{batchOperationKey}).\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessInstanceMigrationBatchOperationRequest"
      responses:
        "200":
          description: "The batch operation request was created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchOperationCreatedResult"
        "400":
          description: "The process instance batch operation failed. More details\
            \ are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /process-instances/modification:
    post:
      tags:
        - "Process instance"
      operationId: "modifyProcessInstancesBatchOperation"
      summary: "Create a batch operation to modify process instances"
      description: "Modify multiple process instances.\nSince only process instances\
        \ with ACTIVE state can be modified, any given\nfilters for state are ignored\
        \ and overridden during this batch operation.\nIn contrast to single modification\
        \ operation, it is not possible to add variable instructions or modify by\
        \ element key.\nIt is only possible to use the element id of the source and\
        \ target.\nThis is done asynchronously, the progress can be tracked using\
        \ the batchOperationKey from the response and the batch operation status endpoint\
        \ (/batch-operations/{batchOperationKey}).\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessInstanceModificationBatchOperationRequest"
      responses:
        "200":
          description: "The batch operation request was created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchOperationCreatedResult"
        "400":
          description: "The process instance batch operation failed. More details\
            \ are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /process-instances/{processInstanceKey}/migration:
    post:
      tags:
        - "Process instance"
      operationId: "migrateProcessInstance"
      summary: "Migrate process instance"
      description: "Migrates a process instance to a new process definition.\nThis\
        \ request can contain multiple mapping instructions to define mapping between\
        \ the active\nprocess instance's elements and target process definition elements.\n\
        \nUse this to upgrade a process instance to a new version of a process or\
        \ to\na different process definition, e.g. to keep your running instances\
        \ up-to-date with the\nlatest process improvements.\n"
      parameters:
        - name: "processInstanceKey"
          in: "path"
          required: true
          description: "The key of the process instance that should be migrated."
          schema:
            $ref: "#/components/schemas/ProcessInstanceKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessInstanceMigrationInstruction"
      responses:
        "204":
          description: "The process instance is migrated."
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The process instance is not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /process-instances/{processInstanceKey}/modification:
    post:
      tags:
        - "Process instance"
      operationId: "modifyProcessInstance"
      summary: "Modify process instance"
      description: "Modifies a running process instance.\nThis request can contain\
        \ multiple instructions to activate an element of the process or\nto terminate\
        \ an active instance of an element.\n\nUse this to repair a process instance\
        \ that is stuck on an element or took an unintended path.\nFor example, because\
        \ an external system is not available or doesn't respond as expected.\n"
      parameters:
        - name: "processInstanceKey"
          in: "path"
          required: true
          description: "The key of the process instance that should be modified."
          schema:
            $ref: "#/components/schemas/ProcessInstanceKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessInstanceModificationInstruction"
      responses:
        "204":
          description: "The process instance is modified."
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The process instance is not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /process-instances/{processInstanceKey}/call-hierarchy:
    get:
      tags:
        - "Process instance"
      operationId: "getProcessInstanceCallHierarchy"
      summary: "Get call hierarchy for process instance"
      description: "Returns the call hierarchy for a given process instance, showing\
        \ its ancestry up to the root instance.\n"
      parameters:
        - name: "processInstanceKey"
          in: "path"
          required: true
          description: "The key of the process instance to fetch the hierarchy for."
          schema:
            $ref: "#/components/schemas/ProcessInstanceKey"
      responses:
        "200":
          description: "The call hierarchy is successfully returned."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ProcessInstanceCallHierarchyEntry"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The process instance is not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /element-instances/search:
    post:
      tags:
        - "Element instance"
      operationId: "searchElementInstances"
      summary: "Search element instances"
      description: "Search for element instances based on given criteria.\n"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ElementInstanceSearchQuery"
      responses:
        "200":
          description: "The element instance search result.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElementInstanceSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /element-instances/{elementInstanceKey}:
    get:
      tags:
        - "Element instance"
      operationId: "getElementInstance"
      summary: "Get element instance"
      description: "Returns element instance as JSON.\n"
      parameters:
        - name: "elementInstanceKey"
          in: "path"
          required: true
          description: "The assigned key of the element instance, which acts as a\
            \ unique identifier for this element instance."
          schema:
            $ref: "#/components/schemas/ElementInstanceKey"
      responses:
        "200":
          description: "The element instance is successfully returned.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElementInstanceResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The element instance with the given key was not found. More\
            \ details are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /decision-definitions/search:
    post:
      tags:
        - "Decision definition"
      operationId: "searchDecisionDefinitions"
      summary: "Search decision definitions"
      description: "Search for decision definitions based on given criteria.\n"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DecisionDefinitionSearchQuery"
      responses:
        "200":
          description: "The decision definition search result.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecisionDefinitionSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /decision-definitions/{decisionDefinitionKey}:
    get:
      tags:
        - "Decision definition"
      operationId: "getDecisionDefinition"
      summary: "Get decision definition"
      description: "Returns a decision definition by key.\n"
      parameters:
        - name: "decisionDefinitionKey"
          in: "path"
          required: true
          description: "The assigned key of the decision definition, which acts as\
            \ a unique identifier for this decision."
          schema:
            $ref: "#/components/schemas/DecisionDefinitionKey"
      responses:
        "200":
          description: "The decision definition is successfully returned.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecisionDefinitionResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The decision with the given key was not found. More details\
            \ are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /decision-definitions/{decisionDefinitionKey}/xml:
    get:
      tags:
        - "Decision definition"
      operationId: "getDecisionDefinitionXML"
      summary: "Get decision definition XML"
      description: "Returns decision definition as XML.\n"
      parameters:
        - name: "decisionDefinitionKey"
          in: "path"
          required: true
          description: "The assigned key of the decision definition, which acts as\
            \ a unique identifier for this decision."
          schema:
            $ref: "#/components/schemas/DecisionDefinitionKey"
      responses:
        "200":
          description: "The XML of the decision definition is successfully returned.\n"
          content:
            text/xml:
              schema:
                type: "string"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The decision with the given key was not found. More details\
            \ are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /decision-requirements/search:
    post:
      tags:
        - "Decision requirements"
      operationId: "searchDecisionRequirements"
      summary: "Search decision requirements"
      description: "Search for decision requirements based on given criteria.\n"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DecisionRequirementsSearchQuery"
      responses:
        "200":
          description: "The decision requirements search result.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecisionRequirementsSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /decision-requirements/{decisionRequirementsKey}:
    get:
      tags:
        - "Decision requirements"
      operationId: "getDecisionRequirements"
      summary: "Get decision requirements"
      description: "Returns Decision Requirements as JSON.\n"
      parameters:
        - name: "decisionRequirementsKey"
          in: "path"
          required: true
          description: "The assigned key of the decision requirements, which acts\
            \ as a unique identifier for this decision requirements."
          schema:
            $ref: "#/components/schemas/DecisionRequirementsKey"
      responses:
        "200":
          description: "The decision requirements is successfully returned.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecisionRequirementsResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The decision requirements with the given key was not found.\
            \ More details are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /decision-requirements/{decisionRequirementsKey}/xml:
    get:
      tags:
        - "Decision requirements"
      operationId: "getDecisionRequirementsXML"
      summary: "Get decision requirements XML"
      description: "Returns decision requirements as XML.\n"
      parameters:
        - name: "decisionRequirementsKey"
          in: "path"
          required: true
          description: "The assigned key of the decision requirements, which acts\
            \ as a unique identifier for this decision."
          schema:
            $ref: "#/components/schemas/DecisionRequirementsKey"
      responses:
        "200":
          description: "The XML of the decision requirements is successfully returned.\n"
          content:
            text/xml:
              schema:
                type: "string"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The decision requirements with the given key was not found.\
            \ More details are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /decision-instances/search:
    post:
      tags:
        - "Decision instance"
      operationId: "searchDecisionInstances"
      summary: "Search decision instances"
      description: "Search for decision instances based on given criteria.\n"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DecisionInstanceSearchQuery"
      responses:
        "200":
          description: "The decision instance search result.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecisionInstanceSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /decision-instances/{decisionEvaluationInstanceKey}:
    get:
      tags:
        - "Decision instance"
      operationId: "getDecisionInstance"
      summary: "Get decision instance"
      description: "Returns a decision instance.\n"
      parameters:
        - name: "decisionEvaluationInstanceKey"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/DecisionEvaluationInstanceKey"
      responses:
        "200":
          description: "The decision instance is successfully returned.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecisionInstanceGetQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The decision instance with the given ID was not found. More\
            \ details are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /decision-definitions/evaluation:
    post:
      tags:
        - "Decision definition"
      operationId: "evaluateDecision"
      summary: "Evaluate decision"
      description: "Evaluates a decision.\nYou specify the decision to evaluate either\
        \ by using its unique key (as returned by\nDeployResource), or using the decision\
        \ ID. When using the decision ID, the latest deployed\nversion of the decision\
        \ is used.\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DecisionEvaluationInstruction"
            examples:
              By decision definition key:
                summary: "Evaluate the decision by decisionDefinitionKey."
                value:
                  decisionDefinitionKey: "12345"
                  variables: {}
              By decision definition ID:
                summary: "Evaluate the decision by decisionDefinitionId."
                value:
                  decisionDefinitionId: "1234-5678"
                  variables: {}
      responses:
        "200":
          description: "The decision was evaluated."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluateDecisionResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The decision is not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /authorizations:
    post:
      tags:
        - "Authorization"
      operationId: "createAuthorization"
      summary: "Create authorization"
      description: "Create the authorization."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizationRequest"
        required: true
      responses:
        "201":
          description: "The authorization was created successfully.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationCreateResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The owner was not found.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /authorizations/{authorizationKey}:
    put:
      tags:
        - "Authorization"
      operationId: "updateAuthorization"
      summary: "Update authorization"
      description: "Update the authorization with the given key."
      parameters:
        - name: "authorizationKey"
          in: "path"
          required: true
          description: "The key of the authorization to delete."
          schema:
            $ref: "#/components/schemas/AuthorizationKey"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizationRequest"
        required: true
      responses:
        "204":
          description: "The authorization was updated successfully."
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "The authorization with the authorizationKey was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    get:
      tags:
        - "Authorization"
      operationId: "getAuthorization"
      summary: "Get authorization"
      description: "Get authorization by the given key."
      parameters:
        - name: "authorizationKey"
          in: "path"
          required: true
          description: "The key of the authorization to get."
          schema:
            $ref: "#/components/schemas/AuthorizationKey"
      responses:
        "200":
          description: "The authorization was successfully returned."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationResult"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The authorization with the given key was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
    delete:
      tags:
        - "Authorization"
      operationId: "deleteAuthorization"
      summary: "Delete authorization"
      description: "Deletes the authorization with the given key."
      parameters:
        - name: "authorizationKey"
          in: "path"
          required: true
          description: "The key of the authorization to delete."
          schema:
            $ref: "#/components/schemas/AuthorizationKey"
      responses:
        "204":
          description: "The authorization was deleted successfully."
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "The authorization with the authorizationKey was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /authorizations/search:
    post:
      tags:
        - "Authorization"
      summary: "Search authorizations"
      description: "Search for authorizations based on given criteria.\n"
      operationId: "searchAuthorizations"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizationSearchQuery"
        required: true
      responses:
        "200":
          description: "The authorization search result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationSearchResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /roles:
    post:
      tags:
        - "Role"
      operationId: "createRole"
      summary: "Create role"
      description: "Create a new role.\n"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleCreateRequest"
      responses:
        "201":
          description: "The role was created successfully.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleCreateResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /roles/{roleId}:
    get:
      tags:
        - "Role"
      operationId: "getRole"
      summary: "Get role"
      description: "Get a role by its ID.\n"
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          description: "The role ID."
          schema:
            type: "string"
      responses:
        "200":
          description: "The role is successfully returned."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleResult"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The role with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
    put:
      tags:
        - "Role"
      operationId: "updateRole"
      summary: "Update role"
      description: "Update a role with the given ID.\n"
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          description: "The ID of the role to update."
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleUpdateRequest"
      responses:
        "200":
          description: "The role was updated successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleUpdateResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "The role with the ID is not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    delete:
      tags:
        - "Role"
      operationId: "deleteRole"
      summary: "Delete role"
      description: "Deletes the role with the given ID.\n"
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          description: "The ID of the role to delete."
          schema:
            type: "string"
      responses:
        "204":
          description: "The role was deleted successfully."
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "The role with the ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /roles/{roleId}/users/search:
    post:
      tags:
        - "Role"
      operationId: "searchUsersForRole"
      summary: "Search role users"
      description: "Search users with assigned role.\n"
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          description: "The role ID."
          schema:
            type: "string"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleUserSearchQueryRequest"
      responses:
        "200":
          description: "The users with the assigned role."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleUserSearchResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The role with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /roles/{roleId}/clients/search:
    post:
      tags:
        - "Role"
      operationId: "searchClientsForRole"
      summary: "Search role clients"
      description: "Search clients with assigned role.\n"
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          description: "The role ID."
          schema:
            type: "string"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleClientSearchQueryRequest"
      responses:
        "200":
          description: "The clients with the assigned role."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleClientSearchResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The role with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /roles/{roleId}/users/{username}:
    put:
      tags:
        - "Role"
      operationId: "assignRoleToUser"
      summary: "Assign a role to a user"
      description: "Assigns the specified role to the user. The user will inherit the authorizations associated with this role."
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          description: "The role ID."
          schema:
            type: "string"
        - name: "username"
          in: "path"
          required: true
          description: "The user username."
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "204":
          description: "The role was assigned successfully to the user."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The role or user with the given ID or username was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "The role is already assigned to the user with the given ID."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    delete:
      tags:
        - "Role"
      operationId: "unassignRoleFromUser"
      summary: "Unassign a role from a user"
      description: "Unassigns a role from a user.\n The user will no longer inherit the authorizations associated with this role."
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          description: "The role ID."
          schema:
            type: "string"
        - name: "username"
          in: "path"
          required: true
          description: "The user username."
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "204":
          description: "The role was unassigned successfully from the user."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The role or user with the given ID or username was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false

  /roles/{roleId}/clients/{clientId}:
    put:
      tags:
        - "Role"
      operationId: "assignRoleToClient"
      summary: "Assign a role to a client"
      description: "Assigns the specified role to the client.\n The client will inherit the authorizations associated with this role."
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          description: "The role ID."
          schema:
            type: "string"
        - name: "clientId"
          in: "path"
          required: true
          description: "The client ID."
          schema:
            type: "string"
      responses:
        "204":
          description: "The role was assigned successfully to the client."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The role with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "The role was already assigned to the client with the given\
            \ ID."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    delete:
      tags:
        - "Role"
      operationId: "unassignRoleFromClient"
      summary: "Unassign a role from a client"
      description: " Unassigns the specified role from the client. \
        \ The client will no longer inherit the authorizations associated with this role."
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          description: "The role ID."
          schema:
            type: "string"
        - name: "clientId"
          in: "path"
          required: true
          description: "The client ID."
          schema:
            type: "string"
      responses:
        "204":
          description: "The role was unassigned successfully from the client."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The role or client with the given ID or username was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false

  /roles/search:
    post:
      tags:
        - "Role"
      operationId: "searchRoles"
      summary: "Search roles"
      description: "Search for roles based on given criteria.\n"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleSearchQueryRequest"
      responses:
        "200":
          description: "The roles search result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          description: "An internal error occurred while processing the request."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
      x-eventually-consistent: true

  /roles/{roleId}/groups/{groupId}:
    put:
      tags:
        - "Role"
      operationId: "assignRoleToGroup"
      summary: "Assign a role to a group"
      description: " Assigns the specified role to the group. \
        \ Every member of the group (user or client) will inherit the authorizations associated with this role."
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          description: "The role ID."
          schema:
            type: "string"
        - name: "groupId"
          in: "path"
          required: true
          description: "The group ID."
          schema:
            type: "string"
      responses:
        "204":
          description: "The role was assigned successfully to the group."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The role or group with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "The role is already assigned to the group with the given ID."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    delete:
      tags:
        - "Role"
      operationId: "unassignRoleFromGroup"
      summary: "Unassign a role from a group"
      description: "Unassigns the specified role from the group.\
        \ All group members (user or client) no longer inherit the authorizations associated with this role."
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          description: "The role ID."
          schema:
            type: "string"
        - name: "groupId"
          in: "path"
          required: true
          description: "The group ID."
          schema:
            type: "string"
      responses:
        "204":
          description: "The role was unassigned successfully from the group."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The role or group with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false

  /roles/{roleId}/groups/search:
    post:
      tags:
        - "Role"
      operationId: "searchGroupsForRole"
      summary: "Search role groups"
      description: "Search groups with assigned role.\n"
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          description: "The role ID."
          schema:
            type: "string"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleGroupSearchQueryRequest"
      responses:
        "200":
          description: "The groups with assigned role."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleGroupSearchResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The role with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true

  /roles/{roleId}/mapping-rules/{mappingRuleId}:
    put:
      tags:
        - "Role"
      operationId: "assignRoleToMappingRule"
      summary: "Assign a role to a mapping rule"
      description: "Assigns a role to a mapping rule.\n"
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          description: "The role ID."
          schema:
            type: "string"
        - name: "mappingRuleId"
          in: "path"
          required: true
          description: "The mapping rule ID."
          schema:
            type: "string"
      responses:
        "204":
          description: "The role was assigned successfully to the mapping rule."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The role or mapping rule with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "The role is already assigned to the mapping rule with the\
            \ given ID."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false

    delete:
      tags:
        - "Role"
      operationId: "unassignRoleFromMappingRule"
      summary: "Unassign a role from a mapping rule"
      description: "Unassigns a role from a mapping rule.\n"
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          description: "The role ID."
          schema:
            type: "string"
        - name: "mappingRuleId"
          in: "path"
          required: true
          description: "The mapping rule ID."
          schema:
            type: "string"
      responses:
        "204":
          description: "The role was unassigned successfully from the mapping rule."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The role or mapping rule with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false

  /roles/{roleId}/mapping-rules/search:
    post:
      tags:
        - "Role"
      operationId: "searchMappingRulesForRole"
      summary: "Search role mapping rules"
      description: "Search mapping rules with assigned role.\n"
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          description: "The role ID."
          schema:
            type: "string"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MappingRuleSearchQueryRequest"
      responses:
        "200":
          description: "The mapping rules with assigned role."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MappingRuleSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The role with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /groups:
    post:
      tags:
        - "Group"
      operationId: "createGroup"
      summary: "Create group"
      description: "Create a new group.\n"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupCreateRequest"
      responses:
        "201":
          description: "The group was created successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupCreateResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /groups/{groupId}:
    get:
      tags:
        - "Group"
      operationId: "getGroup"
      summary: "Get group"
      description: "Get a group by its ID.\n"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          description: "The group ID."
          schema:
            type: "string"
      responses:
        "200":
          description: "The group is successfully returned."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupResult"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The group with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
    put:
      tags:
        - "Group"
      operationId: "updateGroup"
      summary: "Update group"
      description: "Update a group with the given ID.\n"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          description: "The ID of the group to update."
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupUpdateRequest"
      responses:
        "200":
          description: "The group was updated successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupUpdateResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "The group with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    delete:
      tags:
        - "Group"
      operationId: "deleteGroup"
      summary: "Delete group"
      description: "Deletes the group with the given ID.\n"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          description: "The ID of the group to delete."
          schema:
            type: "string"
      responses:
        "204":
          description: "The group was deleted successfully."
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "The group with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /groups/{groupId}/users/search:
    post:
      tags:
        - "Group"
      operationId: "searchUsersForGroup"
      summary: "Search group users"
      description: "Search users assigned to a group.\n"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          description: "The group ID."
          schema:
            type: "string"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupUserSearchQueryRequest"
      responses:
        "200":
          description: "The users assigned to the group."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupUserSearchResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The group with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /groups/{groupId}/mapping-rules/search:
    post:
      tags:
        - "Group"
      operationId: "searchMappingRulesForGroup"
      summary: "Search group mapping rules"
      description: "Search mapping rules assigned to a group.\n"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          description: "The group ID."
          schema:
            type: "string"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MappingRuleSearchQueryRequest"
      responses:
        "200":
          description: "The mapping rules assigned to the group."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MappingRuleSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The group with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /groups/{groupId}/roles/search:
    post:
      tags:
        - "Group"
      operationId: "searchRolesForGroup"
      summary: "Search group roles"
      description: "Search roles assigned to a group.\n"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          description: "The group ID."
          schema:
            type: "string"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleSearchQueryRequest"
      responses:
        "200":
          description: "The roles assigned to the group."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The group with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /groups/{groupId}/clients/search:
    post:
      tags:
        - "Group"
      operationId: "searchClientsForGroup"
      summary: "Search group clients"
      description: "Search clients assigned to a group.\n"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          description: "The group ID."
          schema:
            type: "string"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupClientSearchQueryRequest"
      responses:
        "200":
          description: "The clients assigned to the group."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupClientSearchResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The group with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /groups/{groupId}/users/{username}:
    put:
      tags:
        - "Group"
      operationId: "assignUserToGroup"
      summary: "Assign a user to a group"
      description: "Assigns a user to a group, making the user a member of the group.\
        \ Group members inherit the group authorizations, roles, and tenant assignments."
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          description: "The group ID."
          schema:
            type: "string"
        - name: "username"
          in: "path"
          required: true
          description: "The user username."
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "204":
          description: "The user was assigned successfully to the group."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The group or user with the given ID or username was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "The user with the given ID is already assigned to the group."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    delete:
      tags:
        - "Group"
      operationId: "unassignUserFromGroup"
      summary: "Unassign a user from a group"
      description: "Unassigns a user from a group.\n The user is removed as a group member, with associated authorizations, roles, and tenant assignments no longer applied."
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          description: "The group ID."
          schema:
            type: "string"
        - name: "username"
          in: "path"
          required: true
          description: "The user username."
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "204":
          description: "The user was unassigned successfully from the group."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The group or user with the given ID was not found, or the\
            \ user is not assigned to this group."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /groups/{groupId}/clients/{clientId}:
    put:
      tags:
        - "Group"
      operationId: "assignClientToGroup"
      summary: "Assign a client to a group"
      description: "Assigns a client to a group, making it a member of the group.\
        \ Members of the group inherit the group authorizations, roles, and tenant assignments."
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          description: "The group ID."
          schema:
            type: "string"
        - name: "clientId"
          in: "path"
          required: true
          description: "The client ID."
          schema:
            type: "string"
      responses:
        "204":
          description: "The client was assigned successfully to the group."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The group with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "The client with the given ID is already assigned to the group."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    delete:
      tags:
        - "Group"
      operationId: "unassignClientFromGroup"
      summary: "Unassign a client from a group"
      description: "Unassigns a client from a group.\n The client is removed as a group member, with associated authorizations, roles, and tenant assignments no longer applied."
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          description: "The group ID."
          schema:
            type: "string"
        - name: "clientId"
          in: "path"
          required: true
          description: "The client ID."
          schema:
            type: "string"
      responses:
        "204":
          description: "The client was unassigned successfully from the group."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The group with the given ID was not found, or the client is\
            \ not assigned to this group."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /groups/{groupId}/mapping-rules/{mappingRuleId}:
    put:
      tags:
        - "Group"
      operationId: "assignMappingRuleToGroup"
      summary: "Assign a mapping rule to a group"
      description: "Assigns a mapping rule to a group.\n"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          description: "The group ID."
          schema:
            type: "string"
        - name: "mappingRuleId"
          in: "path"
          required: true
          description: "The mapping rule ID."
          schema:
            type: "string"
      responses:
        "204":
          description: "The mapping rule was assigned successfully to the group."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The group or mapping rule with the given ID was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "409":
          description: "The mapping rule with the given ID is already assigned to\
            \ the group."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    delete:
      tags:
        - "Group"
      operationId: "unassignMappingRuleFromGroup"
      summary: "Unassign a mapping rule from a group"
      description: "Unassigns a mapping rule from a group.\n"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          description: "The group ID."
          schema:
            type: "string"
        - name: "mappingRuleId"
          in: "path"
          required: true
          description: "The mapping rule ID."
          schema:
            type: "string"
      responses:
        "204":
          description: "The mapping rule was unassigned successfully from the group."
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The group or mapping rule with the given ID was not found,\
            \ or the mapping rule is not assigned to this group."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /groups/search:
    post:
      tags:
        - "Group"
      operationId: "searchGroups"
      summary: "Search groups"
      description: "Search for groups based on given criteria.\n"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupSearchQueryRequest"
      responses:
        "200":
          description: "The groups search result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          description: "An internal error occurred while processing the request."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
      x-eventually-consistent: true
  /mapping-rules:
    post:
      tags:
        - "Mapping rule"
      operationId: "createMappingRule"
      summary: "Create mapping rule"
      description: "Create a new mapping rule\n"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MappingRuleCreateRequest"
      responses:
        "201":
          description: "The mapping rule was created successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MappingRuleCreateResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          description: "The request to create a mapping rule was denied.\nMore details\
            \ are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "404":
          description: "The request to create a mapping rule was denied."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: false
  /mapping-rules/{mappingRuleId}:
    put:
      tags:
        - "Mapping rule"
      operationId: "updateMappingRule"
      summary: "Update mapping rule"
      description: "Update a mapping rule.\n"
      parameters:
        - name: "mappingRuleId"
          in: "path"
          required: true
          description: "The ID of the mapping rule to update."
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MappingRuleUpdateRequest"
      responses:
        "200":
          description: "The mapping rule was updated successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MappingRuleUpdateResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          description: "The request to update a mapping rule was denied.\nMore details\
            \ are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "404":
          description: "The request to update a mapping rule was denied."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    delete:
      tags:
        - "Mapping rule"
      operationId: "deleteMappingRule"
      summary: "Delete a mapping rule"
      description: "Deletes the mapping rule with the given ID.\n"
      parameters:
        - name: "mappingRuleId"
          in: "path"
          required: true
          description: "The ID of the mapping rule to delete."
          schema:
            type: "string"
      responses:
        "204":
          description: "The mapping rule was deleted successfully."
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "The mapping rule with the mappingRuleId was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
    get:
      tags:
        - "Mapping rule"
      operationId: "getMappingRule"
      summary: "Get a mapping rule"
      description: "Gets the mapping rule with the given ID.\n"
      parameters:
        - name: "mappingRuleId"
          in: "path"
          required: true
          description: "The ID of the mapping rule to get."
          schema:
            type: "string"
      responses:
        "200":
          description: "The mapping rule was returned successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MappingRuleResult"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "The mapping rule with the mappingRuleId was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /mapping-rules/search:
    post:
      tags:
        - "Mapping rule"
      operationId: "searchMappingRule"
      summary: "Search mapping rules"
      description: "Search for mapping rules based on given criteria.\n"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MappingRuleSearchQueryRequest"
        required: true
      responses:
        "200":
          description: "The mapping rule search result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MappingRuleSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /messages/publication:
    post:
      tags:
        - "Message"
      operationId: "publishMessage"
      summary: "Publish message"
      description: "Publishes a single message.\nMessages are published to specific\
        \ partitions computed from their correlation keys.\nMessages can be buffered.\n\
        The endpoint does not wait for a correlation result.\nUse the message correlation\
        \ endpoint for such use cases.\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessagePublicationRequest"
      responses:
        "200":
          description: "The message was published."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePublicationResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
      # Operational semantics: command (not a create). Conditionally idempotent only when messageId is supplied.
      # Duplicate publishes with identical messageId inside the timeToLive window produce no additional effect.
      x-operation-kind:
        - $ref: "#/components/schemas/OperationMetadata"
          kind: "command"
          idempotent: false
      x-conditional-idempotency:
        keyFields: ["messageId"]
        window:
          field: "timeToLive"
          unit: "ms"
        duplicatePolicy: "ignore"
        appliesWhen: "key-present"
  /messages/correlation:
    post:
      tags:
        - "Message"
      operationId: "correlateMessage"
      summary: "Correlate message"
      description: "Publishes a message and correlates it to a subscription.\nIf correlation\
        \ is successful it will return the first process instance key the message\
        \ correlated with.\nThe message is not buffered.\nUse the publish message\
        \ endpoint to send messages that can be buffered.\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageCorrelationRequest"
      responses:
        "200":
          description: "The message is correlated to one or more process instances"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageCorrelationResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /correlated-messages/search:
    post:
      tags:
        - Message
      operationId: searchCorrelatedMessages
      summary: Search correlated messages
      description: |
        Search for correlated messages based on given criteria.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CorrelatedMessageSearchQuery"
      responses:
        "200":
          description: The correlated messages search result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CorrelatedMessageSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /message-subscriptions/search:
    post:
      tags:
        - "Message subscription"
      operationId: "searchMessageSubscriptions"
      summary: "Search message subscriptions"
      description: "Search for message subscriptions based on given criteria.\n"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageSubscriptionSearchQuery"
      responses:
        "200":
          description: "The message subscription search result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageSubscriptionSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /documents:
    post:
      tags:
        - "Document"
      operationId: "createDocument"
      summary: "Upload document"
      description: "Upload a document to the Camunda 8 cluster.\n\nNote that this\
        \ is currently supported for document stores of type: AWS, GCP, in-memory\
        \ (non-production), local (non-production)\n"
      parameters:
        - name: "storeId"
          in: "query"
          required: false
          description: "The ID of the document store to upload the documents to. Currently,\
            \ only a single document store is supported per cluster. However, this\
            \ attribute is included to allow for potential future support of multiple\
            \ document stores."
          schema:
            type: "string"
        - name: "documentId"
          in: "query"
          required: false
          description: "The ID of the document to upload. If not provided, a new ID\
            \ will be generated. Specifying an existing ID will result in an error\
            \ if the document already exists.\n"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                file:
                  type: "string"
                  format: "binary"
                metadata:
                  $ref: "#/components/schemas/DocumentMetadata"
              required:
                - "file"
            encoding:
              metadata:
                contentType: "application/json"
      responses:
        "201":
          description: "The document was uploaded successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentReference"
        "400":
          $ref: "#/components/responses/InvalidData"
      x-eventually-consistent: false
  /documents/batch:
    post:
      tags:
        - "Document"
      operationId: "createDocuments"
      summary: "Upload multiple documents"
      description: |
        Upload multiple documents to the Camunda 8 cluster.

        The caller must provide a file name for each document, which will be used in case of a multi-status response
        to identify which documents failed to upload. The file name can be provided in the `Content-Disposition` header
        of the file part or in the `fileName` field of the metadata. You can add a parallel array of metadata objects. These
        are matched with the files based on index, and must have the same length as the files array.
        To pass homogenous metadata for all files, spread the metadata over the metadata array.
        A filename value provided explicitly via the metadata array in the request overrides the `Content-Disposition` header
        of the file part.

        In case of a multi-status response, the response body will contain a list of `DocumentBatchProblemDetail` objects,
        each of which contains the file name of the document that failed to upload and the reason for the failure.
        The client can choose to retry the whole batch or individual documents based on the response.

        Note that this is currently supported for document stores of type: AWS, GCP, in-memory (non-production), local (non-production)
      parameters:
        - name: storeId
          in: query
          required: false
          description: "The ID of the document store to upload the documents to. Currently, only a single document store is supported per cluster. However, this attribute is included to allow for potential future support of multiple document stores."
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                files:
                  type: "array"
                  description: "The documents to upload."
                  items:
                    type: "string"
                    format: "binary"
                  minItems: 1
                metadataList:
                  type: "array"
                  description: "Optional JSON array; index aligns with each files entry. Takes precedence over per-file X-Document-Metadata headers when provided."
                  items:
                    $ref: "#/components/schemas/DocumentMetadata"
              required:
                - "files"
            encoding:
              files:
                headers:
                  X-Document-Metadata:
                    schema:
                      $ref: "#/components/schemas/DocumentMetadata"
                  X-Document-Id:
                    schema:
                      type: "string"
      responses:
        "201":
          description: "All documents were uploaded successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentCreationBatchResponse"
        "207":
          description: "Not all documents were uploaded successfully. More details\
            \ are provided in the response body.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentCreationBatchResponse"
        "400":
          $ref: "#/components/responses/InvalidData"
      x-eventually-consistent: false
  /documents/{documentId}:
    get:
      tags:
        - "Document"
      operationId: "getDocument"
      summary: "Download document"
      description: "Download a document from the Camunda 8 cluster.\n\nNote that this\
        \ is currently supported for document stores of type: AWS, GCP, in-memory\
        \ (non-production), local (non-production)\n"
      parameters:
        - name: "documentId"
          in: "path"
          required: true
          description: "The ID of the document to download."
          schema:
            allOf:
              - $ref: "#/components/schemas/DocumentId"
        - name: "storeId"
          in: "query"
          required: false
          description: "The ID of the document store to download the document from."
          schema:
            type: "string"
        - name: "contentHash"
          in: "query"
          required: true
          schema:
            type: "string"
          description: "The hash of the document content that was computed by the\
            \ document store during upload. The hash is part of the document reference\
            \ that is returned when uploading a document. If the client fails to provide\
            \ the correct hash, the request will be rejected.\n"
      responses:
        "200":
          description: "The document was downloaded successfully."
          content:
            application/octet-stream:
              schema:
                type: "string"
                format: "binary"
        "404":
          description: "The document with the given ID was not found.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: false
    delete:
      tags:
        - "Document"
      operationId: "deleteDocument"
      summary: "Delete document"
      description: "Delete a document from the Camunda 8 cluster.\n\nNote that this\
        \ is currently supported for document stores of type: AWS, GCP, in-memory\
        \ (non-production), local (non-production)\n"
      parameters:
        - name: "documentId"
          in: "path"
          required: true
          description: "The ID of the document to delete."
          schema:
            allOf:
              - $ref: "#/components/schemas/DocumentId"
        - name: "storeId"
          in: "query"
          required: false
          description: "The ID of the document store to delete the document from."
          schema:
            type: "string"
      responses:
        "200":
          description: "The document was deleted successfully."
        "404":
          description: "The document with the given ID was not found.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: false
  /documents/{documentId}/links:
    post:
      tags:
        - "Document"
      operationId: "createDocumentLink"
      summary: "Create document link"
      description: "Create a link to a document in the Camunda 8 cluster.\n\nNote\
        \ that this is currently supported for document stores of type: AWS, GCP\n"
      parameters:
        - name: "documentId"
          in: "path"
          required: true
          description: "The ID of the document to link."
          schema:
            allOf:
              - $ref: "#/components/schemas/DocumentId"
        - name: "storeId"
          in: "query"
          required: false
          description: "The ID of the document store to link the document from."
          schema:
            type: "string"
        - name: "contentHash"
          in: "query"
          required: true
          schema:
            type: "string"
          description: "The hash of the document content that was computed by the\
            \ document store during upload. The hash is part of the document reference\
            \ that is returned when uploading a document. If the client fails to provide\
            \ the correct hash, the request will be rejected.\n"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentLinkRequest"
      responses:
        "201":
          description: "The document link was created successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentLink"
        "400":
          $ref: "#/components/responses/InvalidData"
      x-eventually-consistent: false
  /users:
    post:
      tags:
        - "User"
      operationId: "createUser"
      summary: "Create user"
      description: "Create a new user."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
        required: true
      responses:
        "201":
          description: "The user was created successfully.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreateResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          description: "A user with the given username already exists.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: true
  /users/search:
    post:
      tags:
        - "User"
      operationId: "searchUsers"
      summary: "Search users"
      description: "Search for users based on given criteria.\n"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSearchQueryRequest"
        required: true
      responses:
        "200":
          description: "The user search result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSearchResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /users/{username}:
    get:
      tags:
        - "User"
      operationId: "getUser"
      summary: "Get user"
      description: "Get a user by its username.\n"
      parameters:
        - name: "username"
          in: "path"
          required: true
          description: "The username of the user."
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "200":
          description: "The user is successfully returned."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResult"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The user with the given username was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
    delete:
      tags:
        - "User"
      operationId: "deleteUser"
      summary: "Delete user"
      description: "Deletes a user.\n"
      parameters:
        - name: "username"
          in: "path"
          required: true
          description: "The username of the user to delete."
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "204":
          description: "The user was deleted successfully."
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The user is not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: true
    put:
      x-eventually-consistent: true
      tags:
        - "User"
      operationId: "updateUser"
      summary: "Update user"
      description: "Updates a user.\n"
      parameters:
        - name: "username"
          in: "path"
          required: true
          description: "The username of the user to update."
          schema:
            $ref: "#/components/schemas/Username"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
        required: true
      responses:
        "200":
          description: "The user was updated successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserUpdateResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The user was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /setup/user:
    post:
      tags:
        - "Setup"
      operationId: "createAdminUser"
      summary: "Create admin user"
      description: "Creates a new user and assign the admin role to it. This endpoint is only usable when users are managed in the Orchestration Cluster and while no user is assigned to the admin role."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
        required: true
      responses:
        "201":
          description: "The user was created and got assigned the admin role successfully.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreateResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: true
  /incidents/search:
    post:
      tags:
        - "Incident"
      operationId: "searchIncidents"
      summary: "Search incidents"
      description: "Search for incidents based on given criteria.\n"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IncidentSearchQuery"
      responses:
        "200":
          description: "The incident search result.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncidentSearchQueryResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /incidents/{incidentKey}:
    get:
      tags:
        - "Incident"
      operationId: "getIncident"
      summary: "Get incident"
      description: "Returns incident as JSON.\n"
      parameters:
        - name: "incidentKey"
          in: "path"
          required: true
          description: "The assigned key of the incident, which acts as a unique identifier\
            \ for this incident."
          schema:
            $ref: "#/components/schemas/IncidentKey"
      responses:
        "200":
          description: "The incident is successfully returned.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncidentResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The incident with the given key was not found. More details\
            \ are provided in the response body.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /system/usage-metrics:
    get:
      tags:
        - "System"
      operationId: "getUsageMetrics"
      summary: "Get usage metrics"
      description: "Retrieve the usage metrics based on given criteria."
      parameters:
        - name: "startTime"
          in: "query"
          required: true
          description: "The start date for usage metrics, including this date."
          schema:
            type: "string"
            format: "date-time"
            example: "2025-06-07T13:14:15Z"
        - name: "endTime"
          in: "query"
          required: true
          description: "The end date for usage metrics, including this date."
          schema:
            type: "string"
            format: "date-time"
            example: "2025-06-07T13:14:15Z"
        - name: "tenantId"
          in: "query"
          required: false
          description: "Restrict results to a specific tenant ID. If not provided,\
            \ results for all tenants are returned."
          schema:
            $ref: "#/components/schemas/TenantId"
        - name: "withTenants"
          in: "query"
          required: false
          description: "Whether to return tenant metrics in addition to the total\
            \ metrics or not. Default false."
          schema:
            type: "boolean"
            default: false
      responses:
        "200":
          description: "The usage metrics search result.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsageMetricsResponse"
              examples:
                "Response without tenants":
                  value:
                    "processInstances": 5
                    "decisionInstances": 23
                    "activeTenants": 2
                    "assignees": 3
                    "tenants": {}
                "Response with tenants":
                  value:
                    "processInstances": 5
                    "decisionInstances": 23
                    "activeTenants": 2
                    "assignees": 3
                    "tenants":
                      "tenant1":
                        "processInstances": 1
                        "decisionInstances": 2
                        "assignees": 1
                      "tenant2":
                        "processInstances": 4
                        "decisionInstances": 21
                        "assignees": 3
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /deployments:
    post:
      tags:
        - "Resource"
      operationId: "createDeployment"
      summary: "Deploy resources"
      description: "Deploys one or more resources (e.g. processes, decision models,\
        \ or forms).\nThis is an atomic call, i.e. either all resources are deployed\
        \ or none of them are.\n"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                resources:
                  type: "array"
                  description: "The binary data to create the deployment resources.\
                    \ It is possible to have more than one form part with different\
                    \ form part names for the binary data to create a deployment.\n"
                  items:
                    type: "string"
                    format: "binary"
                tenantId:
                  type: "string"
                  description: "The tenant to deploy the resources to."
              required:
                - "resources"
      responses:
        "200":
          description: "The resources are deployed."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeploymentResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /resources/{resourceKey}/deletion:
    post:
      tags:
        - "Resource"
      operationId: "deleteResource"
      summary: "Delete resource"
      description: "Deletes a deployed resource.\nThis can be a process definition,\
        \ decision requirements definition, or form definition\ndeployed using the\
        \ deploy resources endpoint. Specify the resource you want to delete in the\
        \ `resourceKey` parameter.\n"
      parameters:
        - name: "resourceKey"
          in: "path"
          required: true
          description: "The key of the resource to delete.\nThis can be the key of\
            \ a process definition, the key of a decision requirements\ndefinition\
            \ or the key of a form definition\n"
          schema:
            $ref: "#/components/schemas/ResourceKey"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteResourceRequest"
      responses:
        "200":
          description: "The resource is deleted."
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The resource is not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /resources/{resourceKey}:
    get:
      tags:
        - "Resource"
      operationId: "getResource"
      summary: "Get resource"
      description: "Returns a deployed resource.\n:::info\nCurrently, this endpoint\
        \ only supports RPA resources.\n:::\n"
      parameters:
        - name: "resourceKey"
          in: "path"
          required: true
          description: "The unique key identifying the resource."
          schema:
            $ref: "#/components/schemas/ResourceKey"
      responses:
        "200":
          description: "The resource is successfully returned."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceResult"
        "404":
          description: "A resource with the given key was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: false
  /resources/{resourceKey}/content:
    get:
      tags:
        - "Resource"
      operationId: "getResourceContent"
      summary: "Get resource content"
      description: "Returns the content of a deployed resource.\n:::info\nCurrently,\
        \ this endpoint only supports RPA resources.\n:::\n"
      parameters:
        - name: "resourceKey"
          in: "path"
          required: true
          description: "The unique key identifying the resource."
          schema:
            $ref: "#/components/schemas/ResourceKey"
      responses:
        "200":
          description: "The resource content is successfully returned."
          content:
            application/json:
              schema:
                type: "string"
        "404":
          description: "A resource with the given key was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: false
  /element-instances/{elementInstanceKey}/variables:
    put:
      tags:
        - "Element instance"
      operationId: "createElementInstanceVariables"
      summary: "Update element instance variables"
      description: "Updates all the variables of a particular scope (for example,\
        \ process instance, element instance) with the given variable data.\nSpecify\
        \ the element instance in the `elementInstanceKey` parameter.\n"
      parameters:
        - name: "elementInstanceKey"
          in: "path"
          required: true
          description: "The key of the element instance to update the variables for.\n\
            This can be the process instance key (as obtained during instance creation),\
            \ or a given\nelement, such as a service task (see the `elementInstanceKey`\
            \ on the job message).\n"
          schema:
            $ref: "#/components/schemas/ElementInstanceKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetVariableRequest"
      responses:
        "204":
          description: "The variables were updated."
        "400":
          $ref: "#/components/responses/InvalidData"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /element-instances/ad-hoc-activities/{adHocSubProcessInstanceKey}/activation:
    post:
      tags:
        - "Ad-hoc sub-process"
      operationId: "activateAdHocSubProcessActivities"
      summary: "Activate activities within an ad-hoc sub-process"
      description: "Activates selected activities within an ad-hoc sub-process identified\
        \ by element ID.\nThe provided element IDs must exist within the ad-hoc sub-process\
        \ instance identified by the\nprovided adHocSubProcessInstanceKey.\n"
      parameters:
        - name: "adHocSubProcessInstanceKey"
          in: "path"
          required: true
          description: "The key of the ad-hoc sub-process instance that contains the\
            \ activities."
          schema:
            $ref: "#/components/schemas/ElementInstanceKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdHocSubProcessActivateActivitiesInstruction"
      responses:
        "204":
          description: "The ad-hoc sub-process instance is modified."
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "The ad-hoc sub-process instance is not found or the provided\
            \ key does not identify an\nad-hoc sub-process.\n"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /signals/broadcast:
    post:
      tags:
        - "Signal"
      operationId: "broadcastSignal"
      summary: "Broadcast signal"
      description: "Broadcasts a signal."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignalBroadcastRequest"
      responses:
        "200":
          description: "The signal was broadcast."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignalBroadcastResult"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          description: "The signal is not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: false
  /batch-operations/{batchOperationKey}:
    get:
      tags:
        - "Batch operation"
      operationId: "getBatchOperation"
      summary: "Get batch operation"
      description: "Get batch operation by key."
      parameters:
        - name: "batchOperationKey"
          in: "path"
          required: true
          description: "The key (or operate legacy ID) of the batch operation.\n"
          schema:
            $ref: "#/components/schemas/BatchOperationKey"
      responses:
        "200":
          description: "The batch operation was found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchOperationResponse"
        "400":
          description: "The provided data is not valid."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "404":
          description: "The batch operation is not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /batch-operations/search:
    post:
      tags:
        - "Batch operation"
      operationId: "searchBatchOperations"
      summary: "Search batch operations"
      description: "Search for batch operations based on given criteria."
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchOperationSearchQuery"
      responses:
        "200":
          description: "The batch operation search result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchOperationSearchQueryResult"
        "400":
          description: "The provided data is not valid."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /batch-operations/{batchOperationKey}/cancellation:
    post:
      tags:
        - "Batch operation"
      operationId: "cancelBatchOperation"
      summary: "Cancel Batch operation"
      description: "Cancels a running batch operation.\nThis is done asynchronously,\
        \ the progress can be tracked using the batch operation status endpoint (/batch-operations/{batchOperationKey}).\n"
      parameters:
        - name: "batchOperationKey"
          in: "path"
          required: true
          description: "The key (or operate legacy ID) of the batch operation.\n"
          schema:
            $ref: "#/components/schemas/BatchOperationKey"
      requestBody:
        content:
          application/json: {}
        required: false
      responses:
        "204":
          description: "The batch operation cancel request was created."
          content: {}
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found. The batch operation was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
  /batch-operations/{batchOperationKey}/suspension:
    post:
      tags:
        - "Batch operation"
      operationId: "suspendBatchOperation"
      summary: "Suspend Batch operation"
      description: "Suspends a running batch operation.\nThis is done asynchronously,\
        \ the progress can be tracked using the batch operation status endpoint (/batch-operations/{batchOperationKey}).\n"
      parameters:
        - name: "batchOperationKey"
          in: "path"
          required: true
          description: "The key (or operate legacy ID) of the batch operation.\n"
          schema:
            $ref: "#/components/schemas/BatchOperationKey"
      requestBody:
        content:
          application/json: {}
        required: false
      responses:
        "204":
          description: "The batch operation pause request was created."
          content: {}
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found. The batch operation was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: true
  /batch-operations/{batchOperationKey}/resumption:
    post:
      tags:
        - "Batch operation"
      operationId: "resumeBatchOperation"
      summary: "Resume Batch operation"
      description: "Resumes a suspended batch operation.\nThis is done asynchronously,\
        \ the progress can be tracked using the batch operation status endpoint (/batch-operations/{batchOperationKey}).\n"
      parameters:
        - name: "batchOperationKey"
          in: "path"
          required: true
          description: "The key (or operate legacy ID) of the batch operation.\n"
          schema:
            $ref: "#/components/schemas/BatchOperationKey"
      requestBody:
        content:
          application/json: {}
        required: false
      responses:
        "204":
          description: "The batch operation resume request was created."
          content: {}
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Not found. The batch operation was not found."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
      x-eventually-consistent: true
  /batch-operation-items/search:
    post:
      tags:
        - "Batch operation"
      operationId: "searchBatchOperationItems"
      summary: "Search batch operation items"
      description: "Search for batch operation items based on given criteria."
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchOperationItemSearchQuery"
      responses:
        "200":
          description: "The batch operation search result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchOperationItemSearchQueryResult"
        "400":
          description: "The provided data is not valid."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-eventually-consistent: true
components:
  schemas:
    LongKey:
      description: "Zeebe Engine resource key (Java long serialized as string)"
      type: "string"
      pattern: "^-?[0-9]+$"
      minLength: 1
      maxLength: 25
    StartCursor:
      description: "The start cursor in a search query result set."
      type: "string"
      format: "base64"
      x-semantic-type: "StartCursor"
      pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}(?:==)?|[A-Za-z0-9+/]{3}=)?$'
      minLength: 2
      maxLength: 300
      example: "WzIyNTE3OTk4MTM2ODcxMDJd"
    EndCursor:
      description: "The end cursor in a search query result set."
      type: "string"
      format: "base64"
      x-semantic-type: "EndCursor"
      pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}(?:==)?|[A-Za-z0-9+/]{3}=)?$'
      minLength: 2
      maxLength: 300
      example: "WzIyNTE3OTk4MTM2ODcxMDJd"
    ProcessInstanceKey:
      description: "System-generated key for a process instance."
      format: "ProcessInstanceKey"
      type: "string"
      x-semantic-type: "ProcessInstanceKey"
      example: "2251799813690746"
      allOf:
        - $ref: "#/components/schemas/LongKey"
    DeploymentKey:
      description: "Key for a deployment."
      format: "DeploymentKey"
      type: "string"
      x-semantic-type: "DeploymentKey"
      allOf:
        - $ref: "#/components/schemas/LongKey"
    UserTaskKey:
      description: "System-generated key for a user task."
      format: "UserTaskKey"
      type: "string"
      x-semantic-type: "UserTaskKey"
      allOf:
        - $ref: "#/components/schemas/LongKey"
    ProcessDefinitionKey:
      description: "System-generated key for a deployed process definition."
      format: "ProcessDefinitionKey"
      type: "string"
      x-semantic-type: "ProcessDefinitionKey"
      example: "2251799813686749"
      allOf:
        - $ref: "#/components/schemas/LongKey"
    ProcessDefinitionId:
      description: "Id of a process definition, from the model. Only ids of process definitions that are deployed\
          \ are useful."
      format: "ProcessDefinitionId"
      type: "string"
      x-semantic-type: "ProcessDefinitionId"
      minLength: 1
      pattern: ^[a-zA-Z_][a-zA-Z0-9_\-\.]*$
      example: "new-account-onboarding-workflow"
    ElementInstanceKey:
      description: "System-generated key for a element instance."
      format: "ElementInstanceKey"
      type: "string"
      x-semantic-type: "ElementInstanceKey"
      example: "2251799813686789"
      allOf:
        - $ref: "#/components/schemas/LongKey"
    ElementId:
      description: "The model-defined id of an element."
      format: "ElementId"
      type: "string"
      x-semantic-type: "ElementId"
      example: "Activity_106kosb"
    FormKey:
      description: "System-generated key for a deployed form."
      format: "FormKey"
      type: "string"
      x-semantic-type: "FormKey"
      example: "2251799813684365"
      allOf:
        - $ref: "#/components/schemas/LongKey"
    VariableKey:
      description: "System-generated key for a variable."
      format: "VariableKey"
      type: "string"
      x-semantic-type: "VariableKey"
      example: "2251799813683287"
      allOf:
        - $ref: "#/components/schemas/LongKey"
    ResourceKey:
      description: "The system-assigned key for this resource."
      type: "string"
      format: "ResourceKey"
      oneOf:
        - $ref: "#/components/schemas/ProcessDefinitionKey"
        - $ref: "#/components/schemas/DecisionRequirementsKey"
        - $ref: "#/components/schemas/FormKey"
        - $ref: "#/components/schemas/DecisionDefinitionKey"
    ScopeKey:
      description: "System-generated key for a scope."
      format: "ScopeKey"
      type: "string"
      x-semantic-type: "ScopeKey"
      example: "2251799813683890"
      allOf:
        - $ref: "#/components/schemas/LongKey"
    IncidentKey:
      description: "System-generated key for a incident."
      format: "IncidentKey"
      type: "string"
      x-semantic-type: "IncidentKey"
      example: "2251799813689432"
      allOf:
        - $ref: "#/components/schemas/LongKey"
    JobKey:
      description: "System-generated key for a job."
      format: "JobKey"
      type: "string"
      x-semantic-type: "JobKey"
      example: "2251799813653498"
      allOf:
        - $ref: "#/components/schemas/LongKey"
    MessageSubscriptionKey:
      description: "System-generated key for a message subscription."
      format: "MessageSubscriptionKey"
      type: "string"
      x-semantic-type: "MessageSubscriptionKey"
      example: "2251799813632456"
      allOf:
        - $ref: "#/components/schemas/LongKey"
    MessageCorrelationKey:
      description: "System-generated key for a message correlation."
      format: "MessageCorrelationKey"
      type: "string"
      x-semantic-type: "MessageCorrelationKey"
      example: "2251799813634265"
      allOf:
        - $ref: "#/components/schemas/LongKey"
    DecisionDefinitionKey:
      description: "System-generated key for a decision definition."
      format: "DecisionDefinitionKey"
      type: "string"
      x-semantic-type: "DecisionDefinitionKey"
      example: "2251799813326547"
      allOf:
        - $ref: "#/components/schemas/LongKey"
    DecisionDefinitionId:
      description: "Id of a decision definition, from the model. Only ids of decision definitions that are deployed\
          \ are useful."
      format: "DecisionDefinitionId"
      x-semantic-type: "DecisionDefinitionId"
      type: "string"
      minLength: 1
      maxLength: 256
      pattern: "^[A-Za-z0-9_@.+-]+$"
      example: "new-hire-onboarding-workflow"
    DecisionEvaluationInstanceKey:
      description: "System-generated key for a decision evaluation instance."
      format: "DecisionEvaluationInstanceKey"
      type: "string"
      x-semantic-type: "DecisionEvaluationInstanceKey"
      example: "2251799813684367"
      allOf:
        - $ref: "#/components/schemas/LongKey"
    DecisionEvaluationKey:
      allOf:
        - $ref: "#/components/schemas/LongKey"
      description: "System-generated key for a decision evaluation."
      format: "DecisionEvaluationKey"
      type: "string"
      x-semantic-type: "DecisionEvaluationKey"
      example: "2251792362345323"
    DecisionRequirementsKey:
      allOf:
        - $ref: "#/components/schemas/LongKey"
      description: "System-generated key for a deployed decision requirements definition."
      format: "DecisionRequirementsKey"
      type: "string"
      x-semantic-type: "DecisionRequirementsKey"
      example: "2251799813683346"
    AuthorizationKey:
      allOf:
        - $ref: "#/components/schemas/LongKey"
      description: "System-generated key for an authorization."
      format: "AuthorizationKey"
      type: "string"
      x-semantic-type: "AuthorizationKey"
      example: "2251799813684332"
    MessageKey:
      allOf:
        - $ref: "#/components/schemas/LongKey"
      description: "System-generated key for an message."
      format: "MessageKey"
      type: "string"
      x-semantic-type: "MessageKey"
      example: "2251799813683467"
    DecisionInstanceKey:
      allOf:
        - $ref: "#/components/schemas/LongKey"
      description: "System-generated key for a deployed decision instance."
      format: "DecisionInstanceKey"
      type: "string"
      x-semantic-type: "DecisionInstanceKey"
      example: "22517998136843567"
    SignalKey:
      allOf:
        - $ref: "#/components/schemas/LongKey"
      description: "System-generated key for an signal."
      format: "SignalKey"
      type: "string"
      x-semantic-type: "SignalKey"
      example: "22517998136987467"
    BatchOperationKey:
      x-semantic-type: "BatchOperationKey"
      allOf:
        - $ref: "#/components/schemas/LongKey"
      type: "string"
      format: "uuid"
      description: "System-generated key for an batch operation."
      example: "2251799813684321"
    TenantCreateRequest:
      type: "object"
      properties:
        tenantId:
          type: "string"
          description: "The unique ID for the tenant. Must be 255 characters or less. Can contain letters, numbers, [`_`, `-`, `+`, `.`, `@`]."
          minLength: 1
          maxLength: 256
          pattern: "^[A-Za-z0-9_@.+-]+$"
        name:
          type: "string"
          description: "The name of the tenant."
        description:
          type: "string"
          description: "The description of the tenant."
      required:
        - "tenantId"
        - "name"
    TenantCreateResult:
      type: "object"
      properties:
        tenantId:
          type: "string"
          x-semantic-provider: true
          allOf:
            - $ref: "#/components/schemas/TenantId"
        name:
          type: "string"
          description: "The name of the tenant."
          example: "Customer Service Department"
        description:
          type: "string"
          description: "The description of the tenant."
          example: "Customer Service department business processes"
    TenantUpdateRequest:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The new name of the tenant."
        description:
          type: "string"
          description: "The new description of the tenant."
      required:
        - "name"
        - "description"
    TenantUpdateResult:
      type: "object"
      properties:
        tenantId:
          $ref: "#/components/schemas/TenantId"
        name:
          type: "string"
          description: "The name of the tenant."
        description:
          type: "string"
          description: "The description of the tenant."
    TenantResult:
      description: "Tenant search response item."
      type: "object"
      properties:
        name:
          type: "string"
          description: "The tenant name."
          example: "Customer Service department"
        tenantId:
          $ref: "#/components/schemas/TenantId"
        description:
          type: "string"
          description: "The tenant description."
          example: "Customer Service department business processes"
    TenantSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "key"
            - "name"
            - "tenantId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    TenantSearchQueryRequest:
      description: "Tenant search request"
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/TenantSearchQuerySortRequest"
        filter:
          description: "The tenant search filters."
          allOf:
            - $ref: "#/components/schemas/TenantFilter"
    TenantFilter:
      description: "Tenant filter request"
      type: "object"
      properties:
        tenantId:
          $ref: "#/components/schemas/TenantId"
        name:
          type: "string"
          description: "The name of the tenant."
    TenantSearchQueryResult:
      description: "Tenant search response."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching tenants."
          type: "array"
          items:
            $ref: "#/components/schemas/TenantResult"
    UserTaskSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "creationDate"
            - "completionDate"
            - "followUpDate"
            - "dueDate"
            - "priority"
            - "name"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    UserTaskSearchQuery:
      description: "User task search query request."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/UserTaskSearchQuerySortRequest"
        filter:
          description: "The user task search filters."
          allOf:
            - $ref: "#/components/schemas/UserTaskFilter"
    UserTaskVariableSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "value"
            - "name"
            - "tenantId"
            - "variableKey"
            - "scopeKey"
            - "processInstanceKey"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    UserTaskVariableSearchQueryRequest:
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      description: "User task search query request."
      type: "object"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/UserTaskVariableSearchQuerySortRequest"
        filter:
          description: "The user task variable search filters."
          allOf:
            - $ref: "#/components/schemas/UserTaskVariableFilter"
    UserTaskSearchQueryResult:
      description: "User task search query response."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching user tasks."
          type: "array"
          items:
            $ref: "#/components/schemas/UserTaskResult"
    UserTaskFilter:
      description: "User task filter request."
      type: "object"
      properties:
        state:
          description: "The user task state."
          allOf:
            - $ref: "#/components/schemas/UserTaskStateFilterProperty"
        assignee:
          description: "The assignee of the user task."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        priority:
          description: "The priority of the user task."
          allOf:
            - $ref: "#/components/schemas/IntegerFilterProperty"
        elementId:
          description: "The element ID of the user task."
          allOf:
            - $ref: "#/components/schemas/ElementId"
        name:
          type: "string"
          description: "The task name. This only works for data created with 8.8 and\
            \ onwards. Instances from prior versions don't contain this data and cannot\
            \ be found.\n"
        candidateGroup:
          description: "The candidate group for this user task."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        candidateUser:
          description: "The candidate user for this user task."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        tenantId:
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
          description: "Tenant ID of this user task."
        processDefinitionId:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionId"
          description: "The ID of the process definition."
        creationDate:
          description: "The user task creation date."
          allOf:
            - $ref: "#/components/schemas/DateTimeFilterProperty"
        completionDate:
          description: "The user task completion date."
          allOf:
            - $ref: "#/components/schemas/DateTimeFilterProperty"
        followUpDate:
          description: "The user task follow-up date."
          allOf:
            - $ref: "#/components/schemas/DateTimeFilterProperty"
        dueDate:
          description: "The user task due date."
          allOf:
            - $ref: "#/components/schemas/DateTimeFilterProperty"
        processInstanceVariables:
          type: "array"
          description: "Process instance variables associated with the user task."
          items:
            $ref: "#/components/schemas/VariableValueFilterProperty"
        localVariables:
          type: "array"
          description: "Local variables associated with the user task."
          items:
            $ref: "#/components/schemas/VariableValueFilterProperty"
        userTaskKey:
          allOf:
            - $ref: "#/components/schemas/UserTaskKey"
          description: "The key for this user task."
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The key of the process definition."
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The key of the process instance."
        elementInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
          description: "The key of the element instance."
    UserTaskStateFilterProperty:
      description: "UserTaskStateEnum property with full advanced search capabilities."
      type: "object"
      oneOf:
        - type: "string"
          title: "Exact match"
          description: "Matches the value exactly."
          allOf:
            - $ref: "#/components/schemas/UserTaskStateEnum"
        - $ref: "#/components/schemas/AdvancedUserTaskStateFilter"
    AdvancedUserTaskStateFilter:
      title: "Advanced filter"
      description: "Advanced UserTaskStateEnum filter."
      type: "object"
      properties:
        $eq:
          description: "Checks for equality with the provided value."
          allOf:
            - $ref: "#/components/schemas/UserTaskStateEnum"
        $neq:
          description: "Checks for inequality with the provided value."
          allOf:
            - $ref: "#/components/schemas/UserTaskStateEnum"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/UserTaskStateEnum"
        $like:
          $ref: "#/components/schemas/LikeFilterProperty"
    VariableValueFilterProperty:
      type: "object"
      properties:
        name:
          type: "string"
          description: "Name of the variable."
        value:
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
          description: "The value of the variable."
      required:
        - "name"
        - "value"
    UserTaskVariableFilter:
      description: "The user task variable search filters."
      type: "object"
      properties:
        name:
          description: "Name of the variable."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
    UserTaskResult:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The name for this user task."
        state:
          $ref: "#/components/schemas/UserTaskStateEnum"
        assignee:
          description: "The assignee of the user task."
          type: "string"
        elementId:
          description: "The element ID of the user task."
          allOf:
            - $ref: "#/components/schemas/ElementId"
        candidateGroups:
          type: "array"
          description: "The candidate groups for this user task."
          items:
            type: "string"
        candidateUsers:
          type: "array"
          description: "The candidate users for this user task."
          items:
            type: "string"
        processDefinitionId:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionId"
          description: "The ID of the process definition."
        creationDate:
          type: "string"
          description: "The creation date of a user task."
          format: "date-time"
        completionDate:
          type: "string"
          description: "The completion date of a user task."
          format: "date-time"
        followUpDate:
          type: "string"
          description: "The follow date of a user task."
          format: "date-time"
        dueDate:
          type: "string"
          description: "The due date of a user task."
          format: "date-time"
        tenantId:
          $ref: "#/components/schemas/TenantId"
        externalFormReference:
          type: "string"
          description: "The external form reference."
        processDefinitionVersion:
          type: "integer"
          description: "The version of the process definition."
          format: "int32"
        customHeaders:
          type: "object"
          description: "Custom headers for the user task."
          additionalProperties:
            type: "string"
        priority:
          type: "integer"
          description: "The priority of a user task. The higher the value the higher\
            \ the priority."
          minimum: 0
          maximum: 100
          default: 50
        userTaskKey:
          allOf:
            - $ref: "#/components/schemas/UserTaskKey"
          description: "The key of the user task."
        elementInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
          description: "The key of the element instance."
        processName:
          type: "string"
          description: "The name of the process definition."
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The key of the process definition."
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The key of the process instance."
        formKey:
          allOf:
            - $ref: "#/components/schemas/FormKey"
          description: "The key of the form."
    UserTaskStateEnum:
      description: "The state of the user task."
      type: "string"
      enum:
        - "CREATING"
        - "CREATED"
        - "ASSIGNING"
        - "UPDATING"
        - "COMPLETING"
        - "COMPLETED"
        - "CANCELING"
        - "CANCELED"
        - "FAILED"
    VariableSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "value"
            - "name"
            - "tenantId"
            - "variableKey"
            - "scopeKey"
            - "processInstanceKey"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    VariableSearchQuery:
      description: "Variable search query request."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/VariableSearchQuerySortRequest"
        filter:
          description: "The variable search filters."
          allOf:
            - $ref: "#/components/schemas/VariableFilter"
    VariableFilter:
      description: "Variable filter request."
      type: "object"
      properties:
        name:
          description: "Name of the variable."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        value:
          description: "The value of the variable."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        tenantId:
          description: "Tenant ID of this variable."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        isTruncated:
          description: "Whether the value is truncated or not."
          type: "boolean"
        variableKey:
          description: "The key for this variable."
          oneOf:
            - $ref: "#/components/schemas/VariableKey"
            - $ref: "#/components/schemas/AdvancedVariableKeyFilter"
        scopeKey:
          description: "The key of the scope of this variable."
          oneOf:
            - $ref: "#/components/schemas/ScopeKey"
            - $ref: "#/components/schemas/AdvancedScopeKeyFilter"
        processInstanceKey:
          description: "The key of the process instance of this variable."
          oneOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
            - $ref: "#/components/schemas/AdvancedProcessInstanceKeyFilter"
    VariableSearchQueryResult:
      description: "Variable search query response."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching variables."
          type: "array"
          items:
            $ref: "#/components/schemas/VariableSearchResult"
    VariableSearchResult:
      description: "Variable search response item."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/VariableResultBase"
      properties:
        value:
          description: "Value of this variable. Can be truncated."
          type: "string"
        isTruncated:
          description: "Whether the value is truncated or not."
          type: "boolean"
    VariableResult:
      description: "Variable search response item."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/VariableResultBase"
      properties:
        value:
          description: "Full value of this variable."
          type: "string"
    VariableResultBase:
      description: "Variable response item."
      type: "object"
      properties:
        name:
          description: "Name of this variable."
          type: "string"
        tenantId:
          description: "Tenant ID of this variable."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        variableKey:
          allOf:
            - $ref: "#/components/schemas/VariableKey"
          description: "The key for this variable."
        scopeKey:
          allOf:
            - $ref: "#/components/schemas/ScopeKey"
          description: "The key of the scope of this variable."
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The key of the process instance of this variable."
    ProcessDefinitionSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "processDefinitionKey"
            - "name"
            - "resourceName"
            - "version"
            - "versionTag"
            - "processDefinitionId"
            - "tenantId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    ProcessDefinitionSearchQuery:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessDefinitionSearchQuerySortRequest"
        filter:
          description: "The process definition search filters."
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionFilter"
    ProcessDefinitionFilter:
      description: "Process definition search filter."
      type: "object"
      properties:
        name:
          description: "Name of this process definition."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        isLatestVersion:
          description: "Whether to only return the latest version of each process\
            \ definition. When using this filter, pagination functionality is limited,\
            \ you can only paginate forward using `after` and `limit`. The response\
            \ contains no `startCursor` in the `page`, and requests ignore the `from`\
            \ and `before` in the `page`.\n"
          type: "boolean"
        resourceName:
          description: "Resource name of this process definition."
          type: "string"
        version:
          description: "Version of this process definition."
          type: "integer"
          format: "int32"
        versionTag:
          description: "Version tag of this process definition."
          type: "string"
        processDefinitionId:
          description: "Process definition ID of this process definition."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        tenantId:
          description: "Tenant ID of this process definition."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The key for this process definition."
        hasStartForm:
          description: "Indicates whether the start event of the process has an associated\
            \ Form Key."
          type: "boolean"
    ProcessDefinitionSearchQueryResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching process definitions."
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessDefinitionResult"
    ProcessDefinitionResult:
      type: "object"
      properties:
        name:
          description: "Name of this process definition."
          type: "string"
        resourceName:
          description: "Resource name for this process definition."
          type: "string"
        version:
          description: "Version of this process definition."
          type: "integer"
          format: "int32"
        versionTag:
          description: "Version tag of this process definition."
          type: "string"
        processDefinitionId:
          description: "Process definition ID of this process definition."
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionId"
        tenantId:
          description: "Tenant ID of this process definition."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The key for this process definition."
        hasStartForm:
          description: "Indicates whether the start event of the process has an associated\
            \ Form Key."
          type: "boolean"
    ProcessInstanceSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "processInstanceKey"
            - "processDefinitionId"
            - "processDefinitionName"
            - "processDefinitionVersion"
            - "processDefinitionVersionTag"
            - "processDefinitionKey"
            - "parentProcessInstanceKey"
            - "parentElementInstanceKey"
            - "startDate"
            - "endDate"
            - "state"
            - "hasIncident"
            - "tenantId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    ProcessInstanceSearchQuery:
      description: "Process instance search request."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessInstanceSearchQuerySortRequest"
        filter:
          description: "The process instance search filters."
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceFilter"
    ProcessInstanceIncidentSearchQuery:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/IncidentSearchQuerySortRequest"
    AdvancedIntegerFilter:
      title: "Advanced filter"
      description: "Advanced integer (int32) filter."
      type: "object"
      properties:
        $eq:
          description: "Checks for equality with the provided value."
          type: "integer"
          format: "int32"
        $neq:
          description: "Checks for inequality with the provided value."
          type: "integer"
          format: "int32"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $gt:
          description: "Greater than comparison with the provided value."
          type: "integer"
          format: "int32"
        $gte:
          description: "Greater than or equal comparison with the provided value."
          type: "integer"
          format: "int32"
        $lt:
          description: "Lower than comparison with the provided value."
          type: "integer"
          format: "int32"
        $lte:
          description: "Lower than or equal comparison with the provided value."
          type: "integer"
          format: "int32"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            type: "integer"
            format: "int32"
    IntegerFilterProperty:
      description: "Integer property with advanced search capabilities."
      type: "object"
      oneOf:
        - type: "integer"
          format: "int32"
          title: "Exact match"
          description: "Matches the value exactly."
        - $ref: "#/components/schemas/AdvancedIntegerFilter"
    BasicStringFilter:
      title: "Advanced filter"
      description: "Basic advanced string filter."
      type: "object"
      properties:
        $eq:
          description: "Checks for equality with the provided value."
          type: "string"
        $neq:
          description: "Checks for inequality with the provided value."
          type: "string"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            type: "string"
        $notIn:
          description: "Checks if the property matches none of the provided values."
          type: "array"
          items:
            type: "string"
    AdvancedStringFilter:
      title: "Advanced filter"
      description: "Advanced string filter."
      allOf:
        - $ref: "#/components/schemas/BasicStringFilter"
        - type: "object"
          properties:
            $like:
              $ref: "#/components/schemas/LikeFilterProperty"
    AdvancedProcessInstanceStateFilter:
      title: "Advanced filter"
      description: "Advanced ProcessInstanceStateEnum filter."
      type: "object"
      properties:
        $eq:
          description: "Checks for equality with the provided value."
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceStateEnum"
        $neq:
          description: "Checks for inequality with the provided value."
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceStateEnum"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessInstanceStateEnum"
        $like:
          $ref: "#/components/schemas/LikeFilterProperty"
    AdvancedElementInstanceStateFilter:
      title: "Advanced filter"
      description: "Advanced ElementInstanceStateEnum filter."
      type: "object"
      properties:
        $eq:
          description: "Checks for equality with the provided value."
          allOf:
            - $ref: "#/components/schemas/ElementInstanceStateEnum"
        $neq:
          description: "Checks for inequality with the provided value."
          allOf:
            - $ref: "#/components/schemas/ElementInstanceStateEnum"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/ElementInstanceStateEnum"
        $like:
          $ref: "#/components/schemas/LikeFilterProperty"
    AdvancedDecisionDefinitionKeyFilter:
      title: "Advanced filter"
      description: "Advanced DecisionDefinitionKey filter."
      type: "object"
      properties:
        $eq:
          $ref: "#/components/schemas/DecisionDefinitionKey"
        $neq:
          $ref: "#/components/schemas/DecisionDefinitionKey"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/DecisionDefinitionKey"
        $notIn:
          description: "Checks if the property matches none of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/DecisionDefinitionKey"
    AdvancedDateTimeFilter:
      title: "Advanced filter"
      description: "Advanced date-time filter."
      type: "object"
      properties:
        $eq:
          description: "Checks for equality with the provided value."
          type: "string"
          format: "date-time"
        $neq:
          description: "Checks for inequality with the provided value."
          type: "string"
          format: "date-time"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $gt:
          description: "Greater than comparison with the provided value."
          type: "string"
          format: "date-time"
        $gte:
          description: "Greater than or equal comparison with the provided value."
          type: "string"
          format: "date-time"
        $lt:
          description: "Lower than comparison with the provided value."
          type: "string"
          format: "date-time"
        $lte:
          description: "Lower than or equal comparison with the provided value."
          type: "string"
          format: "date-time"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            type: "string"
            format: "date-time"
    BasicStringFilterProperty:
      description: "String property with basic advanced search capabilities."
      type: "object"
      oneOf:
        - type: "string"
          title: "Exact match"
          description: "Matches the value exactly."
        - $ref: "#/components/schemas/BasicStringFilter"
    StringFilterProperty:
      description: "String property with full advanced search capabilities."
      type: "object"
      oneOf:
        - type: "string"
          title: "Exact match"
          description: "Matches the value exactly."
        - $ref: "#/components/schemas/AdvancedStringFilter"
    LikeFilterProperty:
      type: "string"
      description: "Checks if the property matches the provided like value.\n\nSupported\
        \ wildcard characters are:\n\n* `*`: matches zero, one, or multiple characters.\n\
        * `?`: matches one, single character.\n\nWildcard characters can be escaped\
        \ with backslash, for instance: `\\*`.\n"
    ProcessInstanceStateFilterProperty:
      description: "ProcessInstanceStateEnum property with full advanced search capabilities."
      type: "object"
      oneOf:
        - type: "string"
          title: "Exact match"
          description: "Matches the value exactly."
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceStateEnum"
        - $ref: "#/components/schemas/AdvancedProcessInstanceStateFilter"
    ElementInstanceStateFilterProperty:
      description: "ElementInstanceStateEnum property with full advanced search capabilities."
      type: "object"
      oneOf:
        - type: "string"
          title: "Exact match"
          description: "Matches the value exactly."
          allOf:
            - $ref: "#/components/schemas/ElementInstanceStateEnum"
        - $ref: "#/components/schemas/AdvancedElementInstanceStateFilter"
    DateTimeFilterProperty:
      description: "Date-time property with full advanced search capabilities."
      type: "object"
      oneOf:
        - type: "string"
          format: "date-time"
          title: "Exact match"
          description: "Matches the value exactly."
        - $ref: "#/components/schemas/AdvancedDateTimeFilter"
    AdvancedProcessDefinitionKeyFilter:
      title: "Advanced filter"
      description: "Advanced ProcessDefinitionKey filter."
      type: "object"
      properties:
        $eq:
          $ref: "#/components/schemas/ProcessDefinitionKey"
        $neq:
          $ref: "#/components/schemas/ProcessDefinitionKey"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessDefinitionKey"
        $notIn:
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessDefinitionKey"
    AdvancedProcessInstanceKeyFilter:
      title: "Advanced filter"
      description: "Advanced ProcessInstanceKey filter."
      type: "object"
      properties:
        $eq:
          $ref: "#/components/schemas/ProcessInstanceKey"
        $neq:
          $ref: "#/components/schemas/ProcessInstanceKey"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessInstanceKey"
        $notIn:
          description: "Checks if the property matches none of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessInstanceKey"
    AdvancedElementInstanceKeyFilter:
      title: "Advanced filter"
      description: "Advanced ElementInstanceKey filter."
      type: "object"
      properties:
        $eq:
          $ref: "#/components/schemas/ElementInstanceKey"
        $neq:
          $ref: "#/components/schemas/ElementInstanceKey"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/ElementInstanceKey"
        $notIn:
          description: "Checks if the property matches none of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/ElementInstanceKey"
    AdvancedVariableKeyFilter:
      title: "Advanced filter"
      description: "Advanced VariableKey filter."
      type: "object"
      properties:
        $eq:
          $ref: "#/components/schemas/VariableKey"
        $neq:
          $ref: "#/components/schemas/VariableKey"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/VariableKey"
        $notIn:
          description: "Checks if the property matches none of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/VariableKey"
    AdvancedScopeKeyFilter:
      title: "Advanced filter"
      description: "Advanced ScopeKey filter."
      type: "object"
      properties:
        $eq:
          $ref: "#/components/schemas/ScopeKey"
        $neq:
          $ref: "#/components/schemas/ScopeKey"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/ScopeKey"
        $notIn:
          description: "Checks if the property matches none of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/ScopeKey"
    AdvancedMessageSubscriptionKeyFilter:
      title: "Advanced filter"
      description: "Advanced MessageSubscriptionKey filter."
      type: "object"
      properties:
        $eq:
          $ref: "#/components/schemas/MessageSubscriptionKey"
        $neq:
          $ref: "#/components/schemas/MessageSubscriptionKey"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/MessageSubscriptionKey"
        $notIn:
          description: "Checks if the property matches none of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/MessageSubscriptionKey"
    AdvancedJobKeyFilter:
      title: "Advanced filter"
      description: "Advanced JobKey filter."
      type: "object"
      properties:
        $eq:
          $ref: "#/components/schemas/JobKey"
        $neq:
          $ref: "#/components/schemas/JobKey"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/JobKey"
        $notIn:
          description: "Checks if the property matches none of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/JobKey"
    BaseProcessInstanceFilterFields:
      description: "Base process instance search filter."
      type: "object"
      properties:
        startDate:
          description: "The start date."
          allOf:
            - $ref: "#/components/schemas/DateTimeFilterProperty"
        endDate:
          description: "The end date."
          allOf:
            - $ref: "#/components/schemas/DateTimeFilterProperty"
        state:
          description: "The process instance state."
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceStateFilterProperty"
        hasIncident:
          type: "boolean"
          description: "Whether this process instance has a related incident or not."
        tenantId:
          description: "The tenant ID."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        variables:
          description: "The process instance variables."
          type: "array"
          items:
            $ref: "#/components/schemas/VariableValueFilterProperty"
        processInstanceKey:
          description: "The key of this process instance."
          oneOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
            - $ref: "#/components/schemas/AdvancedProcessInstanceKeyFilter"
        parentProcessInstanceKey:
          description: "The parent process instance key."
          oneOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
            - $ref: "#/components/schemas/AdvancedProcessInstanceKeyFilter"
        parentElementInstanceKey:
          description: "The parent element instance key."
          oneOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
            - $ref: "#/components/schemas/AdvancedElementInstanceKeyFilter"
        batchOperationId:
          description: "The batch operation ID."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        errorMessage:
          description: "The error message related to the process."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        hasRetriesLeft:
          description: "Whether the process has failed jobs with retries left."
          type: "boolean"
        elementInstanceState:
          description: "The state of the element instances associated with the process\
            \ instance."
          allOf:
            - $ref: "#/components/schemas/ElementInstanceStateFilterProperty"
        elementId:
          description: "The element ID associated with the process instance."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        hasElementInstanceIncident:
          description: "Whether the element instance has an incident or not."
          type: "boolean"
        incidentErrorHashCode:
          description: "The incident error hash code, associated with this process."
          allOf:
            - $ref: "#/components/schemas/IntegerFilterProperty"
        tags:
          $ref: '#/components/schemas/TagSet'
    ProcessDefinitionStatisticsFilter:
      description: "Process definition statistics search filter."
      allOf:
        - $ref: "#/components/schemas/BaseProcessInstanceFilterFields"
        - type: "object"
          properties:
            $or:
              description: "Defines a list of alternative filter groups combined using\
                \ OR logic. Each object in the array is evaluated independently, and\
                \ the filter matches if any one of them is satisfied.\n\nTop-level\
                \ fields and the `$or` clause are combined using AND logic — meaning:\
                \ (top-level filters) AND (any of the `$or` filters) must match.\n\
                <br>\n<em>Example:</em>\n\n```json\n{\n  \"state\": \"ACTIVE\",\n\
                \  \"tenantId\": 123,\n  \"$or\": [\n    { \"processDefinitionId\"\
                : \"process_v1\" },\n    { \"processDefinitionId\": \"process_v2\"\
                , \"hasIncident\": true }\n  ]\n}\n```\nThis matches process instances\
                \ that:\n\n<ul style=\"padding-left: 20px; margin-left: 20px;\">\n\
                \  <li style=\"list-style-type: disc;\">are in <em>ACTIVE</em> state</li>\n\
                \  <li style=\"list-style-type: disc;\">have tenant ID equal to <em>123</em></li>\n\
                \  <li style=\"list-style-type: disc;\">and match either:\n    <ul\
                \ style=\"padding-left: 20px; margin-left: 20px;\">\n      <li style=\"\
                list-style-type: circle;\"><code>processDefinitionId</code> is <em>process_v1</em>,\
                \ or</li>\n      <li style=\"list-style-type: circle;\"><code>processDefinitionId</code>\
                \ is <em>process_v2</em> and <code>hasIncident</code> is <em>true</em></li>\n\
                \    </ul>\n  </li>\n</ul>\n<br>\n<p>Note: Using complex <code>$or</code>\
                \ conditions may impact performance, use with caution in high-volume\
                \ environments.\n"
              type: "array"
              items:
                $ref: "#/components/schemas/BaseProcessInstanceFilterFields"
    ProcessInstanceFilterFields:
      description: "Process instance search filter."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/BaseProcessInstanceFilterFields"
      properties:
        processDefinitionId:
          description: "The process definition ID."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        processDefinitionName:
          description: "The process definition name."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        processDefinitionVersion:
          description: "The process definition version."
          allOf:
            - $ref: "#/components/schemas/IntegerFilterProperty"
        processDefinitionVersionTag:
          description: "The process definition version tag."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        processDefinitionKey:
          description: "The process definition key."
          oneOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
            - $ref: "#/components/schemas/AdvancedProcessDefinitionKeyFilter"
    ProcessInstanceFilter:
      description: "Process instance search filter."
      allOf:
        - $ref: "#/components/schemas/ProcessInstanceFilterFields"
        - type: "object"
          properties:
            $or:
              description: "Defines a list of alternative filter groups combined using\
                \ OR logic. Each object in the array is evaluated independently, and\
                \ the filter matches if any one of them is satisfied.\n\nTop-level\
                \ fields and the `$or` clause are combined using AND logic — meaning:\
                \ (top-level filters) AND (any of the `$or` filters) must match.\n\
                <br>\n<em>Example:</em>\n\n```json\n{\n  \"state\": \"ACTIVE\",\n\
                \  \"tenantId\": 123,\n  \"$or\": [\n    { \"processDefinitionId\"\
                : \"process_v1\" },\n    { \"processDefinitionId\": \"process_v2\"\
                , \"hasIncident\": true }\n  ]\n}\n```\nThis matches process instances\
                \ that:\n\n<ul style=\"padding-left: 20px; margin-left: 20px;\">\n\
                \  <li style=\"list-style-type: disc;\">are in <em>ACTIVE</em> state</li>\n\
                \  <li style=\"list-style-type: disc;\">have tenant ID equal to <em>123</em></li>\n\
                \  <li style=\"list-style-type: disc;\">and match either:\n    <ul\
                \ style=\"padding-left: 20px; margin-left: 20px;\">\n      <li style=\"\
                list-style-type: circle;\"><code>processDefinitionId</code> is <em>process_v1</em>,\
                \ or</li>\n      <li style=\"list-style-type: circle;\"><code>processDefinitionId</code>\
                \ is <em>process_v2</em> and <code>hasIncident</code> is <em>true</em></li>\n\
                \    </ul>\n  </li>\n</ul>\n<br>\n<p>Note: Using complex <code>$or</code>\
                \ conditions may impact performance, use with caution in high-volume\
                \ environments.\n"
              type: "array"
              items:
                $ref: "#/components/schemas/ProcessInstanceFilterFields"
    ProcessInstanceSearchQueryResult:
      description: "Process instance search response."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      required:
        - "items"
      properties:
        items:
          description: "The matching process instances."
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessInstanceResult"
    ProcessInstanceResult:
      description: "Process instance search response item."
      type: "object"
      required:
        - "processDefinitionId"
        - "processDefinitionName"
        - "processDefinitionVersion"
        - "startDate"
        - "state"
        - "hasIncident"
        - "tenantId"
        - "processInstanceKey"
        - "processDefinitionKey"
        - "tags"
      properties:
        processDefinitionId:
          $ref: "#/components/schemas/ProcessDefinitionId"
        processDefinitionName:
          type: "string"
          description: "The process definition name."
        processDefinitionVersion:
          type: "integer"
          description: "The process definition version."
          format: "int32"
        processDefinitionVersionTag:
          type: "string"
          description: "The process definition version tag."
        startDate:
          type: "string"
          description: "The start date."
          format: "date-time"
        endDate:
          type: "string"
          description: "The end date."
          format: "date-time"
        state:
          $ref: "#/components/schemas/ProcessInstanceStateEnum"
        hasIncident:
          type: "boolean"
          description: "Whether this process instance has a related incident or not."
        tenantId:
          $ref: "#/components/schemas/TenantId"
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The key of this process instance."
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The process definition key."
        parentProcessInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The parent process instance key."
        parentElementInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
          description: "The parent element instance key."
        tags:
          $ref: '#/components/schemas/TagSet'
    ProcessInstanceStateEnum:
      description: "Process instance states"
      enum:
        - "ACTIVE"
        - "COMPLETED"
        - "TERMINATED"
    ElementInstanceStateEnum:
      description: "Element states"
      enum:
        - "ACTIVE"
        - "COMPLETED"
        - "TERMINATED"
    ProcessInstanceCallHierarchyEntry:
      type: "object"
      required:
        - "processInstanceKey"
        - "processDefinitionKey"
        - "processDefinitionName"
      properties:
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The key of the process instance."
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The key of the process definition."
        processDefinitionName:
          type: "string"
          description: "The name of the process definition (fall backs to the process\
            \ definition ID if not available)."
    ProcessInstanceSequenceFlowsQueryResult:
      description: "Process instance sequence flows query response."
      type: "object"
      properties:
        items:
          description: "The sequence flows."
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessInstanceSequenceFlowResult"
    ProcessInstanceSequenceFlowResult:
      description: "Process instance sequence flow result."
      type: "object"
      properties:
        sequenceFlowId:
          type: "string"
          description: "The sequence flow ID."
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The key of this process instance."
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The process definition key."
        processDefinitionId:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionId"
          description: "The process definition ID."
        elementId:
          description: "The element ID for this sequence flow, as provided in the\
            \ BPMN process."
          allOf:
            - $ref: "#/components/schemas/ElementId"
        tenantId:
          $ref: "#/components/schemas/TenantId"
    ProcessDefinitionElementStatisticsQuery:
      description: "Process definition element statistics request."
      type: "object"
      properties:
        filter:
          description: "The process definition statistics search filters."
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionStatisticsFilter"
    ProcessDefinitionElementStatisticsQueryResult:
      description: "Process definition element statistics query response."
      type: "object"
      properties:
        items:
          description: "The element statistics."
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessElementStatisticsResult"
    ProcessInstanceElementStatisticsQueryResult:
      description: "Process instance element statistics query response."
      type: "object"
      properties:
        items:
          description: "The element statistics."
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessElementStatisticsResult"
    ProcessElementStatisticsResult:
      description: "Process element statistics response."
      type: "object"
      properties:
        elementId:
          description: "The element ID for which the results are aggregated."
          allOf:
            - $ref: "#/components/schemas/ElementId"
        active:
          description: "The total number of active instances of the element."
          type: "integer"
        canceled:
          description: "The total number of canceled instances of the element."
          type: "integer"
        incidents:
          description: "The total number of incidents for the element."
          type: "integer"
        completed:
          description: "The total number of completed instances of the element."
          type: "integer"
    CancelProcessInstanceRequest:
      type: "object"
      nullable: true
      properties:
        operationReference:
          $ref: "#/components/schemas/OperationReference"
    ElementInstanceSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "elementInstanceKey"
            - "processInstanceKey"
            - "processDefinitionKey"
            - "processDefinitionId"
            - "startDate"
            - "endDate"
            - "elementId"
            - "elementName"
            - "type"
            - "state"
            - "incidentKey"
            - "tenantId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    ElementInstanceSearchQuery:
      description: "Element instance search request."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/ElementInstanceSearchQuerySortRequest"
        filter:
          description: "The element instance search filters."
          allOf:
            - $ref: "#/components/schemas/ElementInstanceFilter"
    ElementInstanceFilter:
      description: "Element instance filter."
      type: "object"
      properties:
        processDefinitionId:
          description: "The process definition ID associated to this element instance."
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionId"
        state:
          description: "State of element instance as defined set of values."
          allOf:
            - $ref: "#/components/schemas/ElementInstanceStateFilterProperty"
        type:
          description: "Type of element as defined set of values."
          type: "string"
          enum:
            - "UNSPECIFIED"
            - "PROCESS"
            - "SUB_PROCESS"
            - "EVENT_SUB_PROCESS"
            - "AD_HOC_SUB_PROCESS"
            - "AD_HOC_SUB_PROCESS_INNER_INSTANCE"
            - "START_EVENT"
            - "INTERMEDIATE_CATCH_EVENT"
            - "INTERMEDIATE_THROW_EVENT"
            - "BOUNDARY_EVENT"
            - "END_EVENT"
            - "SERVICE_TASK"
            - "RECEIVE_TASK"
            - "USER_TASK"
            - "MANUAL_TASK"
            - "TASK"
            - "EXCLUSIVE_GATEWAY"
            - "INCLUSIVE_GATEWAY"
            - "PARALLEL_GATEWAY"
            - "EVENT_BASED_GATEWAY"
            - "SEQUENCE_FLOW"
            - "MULTI_INSTANCE_BODY"
            - "CALL_ACTIVITY"
            - "BUSINESS_RULE_TASK"
            - "SCRIPT_TASK"
            - "SEND_TASK"
            - "UNKNOWN"
        elementId:
          description: "The element ID for this element instance."
          allOf:
            - $ref: "#/components/schemas/ElementId"
        elementName:
          type: "string"
          description: "The element name. This only works for data created with 8.8\
            \ and onwards. Instances from prior versions don't contain this data and\
            \ cannot be found.\n"
        hasIncident:
          type: "boolean"
          description: "Shows whether this element instance has an incident related\
            \ to."
        tenantId:
          $ref: "#/components/schemas/TenantId"
        elementInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
          description: "The assigned key, which acts as a unique identifier for\
                \ this element instance."
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The process instance key associated to this element instance."
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The process definition key associated to this element\
                \ instance."
        incidentKey:
          allOf:
            - $ref: "#/components/schemas/IncidentKey"
          description: "The key of incident if field incident is true."
        startDate:
          description: "The start date of this element instance."
          allOf:
            - $ref: "#/components/schemas/DateTimeFilterProperty"
        endDate:
          description: "The end date of this element instance."
          allOf:
            - $ref: "#/components/schemas/DateTimeFilterProperty"
        elementInstanceScopeKey:
          description: The scope key of this element instance. If provided with a process instance
            key it will return element instances that are immediate children of the process
            instance. If provided with an element instance key it will return element instances that
            are immediate children of the element instance.
          oneOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
            - $ref: "#/components/schemas/ProcessInstanceKey"
    ElementInstanceSearchQueryResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching element instances."
          type: "array"
          items:
            $ref: "#/components/schemas/ElementInstanceResult"
    ElementInstanceResult:
      type: "object"
      required:
        - "processDefinitionId"
        - "startDate"
        - "elementId"
        - "elementName"
        - "type"
        - "state"
        - "hasIncident"
        - "tenantId"
        - "elementInstanceKey"
        - "processInstanceKey"
        - "processDefinitionKey"
      properties:
        processDefinitionId:
          description: "The process definition ID associated to this element instance."
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionId"
        startDate:
          description: "Date when element instance started."
          type: "string"
          format: "date-time"
        endDate:
          description: "Date when element instance finished."
          type: "string"
          format: "date-time"
        elementId:
          description: "The element ID for this element instance."
          allOf:
            - $ref: "#/components/schemas/ElementId"
        elementName:
          description: "The element name for this element instance."
          type: "string"
        type:
          description: "Type of element as defined set of values."
          type: "string"
          enum:
            - "UNSPECIFIED"
            - "PROCESS"
            - "SUB_PROCESS"
            - "EVENT_SUB_PROCESS"
            - "AD_HOC_SUB_PROCESS"
            - "AD_HOC_SUB_PROCESS_INNER_INSTANCE"
            - "START_EVENT"
            - "INTERMEDIATE_CATCH_EVENT"
            - "INTERMEDIATE_THROW_EVENT"
            - "BOUNDARY_EVENT"
            - "END_EVENT"
            - "SERVICE_TASK"
            - "RECEIVE_TASK"
            - "USER_TASK"
            - "MANUAL_TASK"
            - "TASK"
            - "EXCLUSIVE_GATEWAY"
            - "INCLUSIVE_GATEWAY"
            - "PARALLEL_GATEWAY"
            - "EVENT_BASED_GATEWAY"
            - "SEQUENCE_FLOW"
            - "MULTI_INSTANCE_BODY"
            - "CALL_ACTIVITY"
            - "BUSINESS_RULE_TASK"
            - "SCRIPT_TASK"
            - "SEND_TASK"
            - "UNKNOWN"
        state:
          description: "State of element instance as defined set of values."
          allOf:
            - $ref: "#/components/schemas/ElementInstanceStateEnum"
        hasIncident:
          description: "Shows whether this element instance has an incident. If true\
            \ also an incidentKey is provided."
          type: "boolean"
        tenantId:
          description: "The tenant ID of the incident."
          $ref: "#/components/schemas/TenantId"
        elementInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
          description: "The assigned key, which acts as a unique identifier for\
                \ this element instance."
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The process instance key associated to this element instance."
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The process definition key associated to this element\
                \ instance."
        incidentKey:
          allOf:
            - $ref: "#/components/schemas/IncidentKey"
          description: "Incident key associated with this element instance."
    AdHocSubProcessActivateActivitiesInstruction:
      type: "object"
      properties:
        elements:
          description: "Activities to activate."
          type: "array"
          items:
            $ref: "#/components/schemas/AdHocSubProcessActivateActivityReference"
        cancelRemainingInstances:
          description: "Whether to cancel remaining instances of the ad-hoc sub-process."
          type: "boolean"
          default: false
      required:
        - "elements"
    AdHocSubProcessActivateActivityReference:
      type: "object"
      properties:
        elementId:
          description: "The ID of the element that should be activated."
          allOf:
            - $ref: "#/components/schemas/ElementId"
        variables:
          description: "Variables to be set when activating the element."
          type: "object"
          additionalProperties: true
      required:
        - "elementId"
    DecisionDefinitionSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "decisionDefinitionKey"
            - "decisionDefinitionId"
            - "name"
            - "version"
            - "decisionRequirementsId"
            - "decisionRequirementsKey"
            - "tenantId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    DecisionDefinitionSearchQuery:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/DecisionDefinitionSearchQuerySortRequest"
        filter:
          description: "The decision definition search filters."
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionFilter"
    DecisionDefinitionFilter:
      description: "Decision definition search filter."
      type: "object"
      properties:
        decisionDefinitionId:
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionId"
          description: "The DMN ID of the decision definition."
        name:
          type: "string"
          description: "The DMN name of the decision definition."
        version:
          type: "integer"
          format: "int32"
          description: "The assigned version of the decision definition."
        decisionRequirementsId:
          type: "string"
          description: "the DMN ID of the decision requirements graph that the decision\
            \ definition is part of."
        tenantId:
          allOf:
            - $ref: "#/components/schemas/TenantId"
          description: "The tenant ID of the decision definition."
        decisionDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionKey"
          description: "The assigned key, which acts as a unique identifier for\
                \ this decision definition."
        decisionRequirementsKey:
          allOf:
            - $ref: "#/components/schemas/DecisionRequirementsKey"
          description: "The assigned key of the decision requirements graph that\
                \ the decision definition is part of."
    IncidentSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "incidentKey"
            - "processDefinitionKey"
            - "processDefinitionId"
            - "processInstanceKey"
            - "errorType"
            - "errorMessage"
            - "elementId"
            - "elementInstanceKey"
            - "creationTime"
            - "state"
            - "jobKey"
            - "tenantId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    IncidentSearchQuery:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/IncidentSearchQuerySortRequest"
        filter:
          description: "The incident search filters."
          allOf:
            - $ref: "#/components/schemas/IncidentFilter"
    IncidentFilter:
      description: "Incident search filter."
      type: "object"
      properties:
        processDefinitionId:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionId"
          description: "The process definition ID associated to this incident."
        errorType:
          type: "string"
          description: "Incident error type with a defined set of values."
          enum:
            - "UNSPECIFIED"
            - "UNKNOWN"
            - "IO_MAPPING_ERROR"
            - "JOB_NO_RETRIES"
            - "EXECUTION_LISTENER_NO_RETRIES"
            - "TASK_LISTENER_NO_RETRIES"
            - "AD_HOC_SUB_PROCESS_NO_RETRIES"
            - "CONDITION_ERROR"
            - "EXTRACT_VALUE_ERROR"
            - "CALLED_ELEMENT_ERROR"
            - "UNHANDLED_ERROR_EVENT"
            - "MESSAGE_SIZE_EXCEEDED"
            - "CALLED_DECISION_ERROR"
            - "DECISION_EVALUATION_ERROR"
            - "FORM_NOT_FOUND"
            - "RESOURCE_NOT_FOUND"
        errorMessage:
          type: "string"
          description: "Error message which describes the error in more detail."
        elementId:
          description: "The element ID associated to this incident."
          allOf:
            - $ref: "#/components/schemas/ElementId"
        creationTime:
          type: "string"
          description: "Date of incident creation."
          format: "date-time"
        state:
          type: "string"
          description: "State of this incident with a defined set of values."
          enum:
            - "ACTIVE"
            - "MIGRATED"
            - "RESOLVED"
            - "PENDING"
        tenantId:
          description: "The tenant ID of the incident."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        incidentKey:
          allOf:
            - $ref: "#/components/schemas/IncidentKey"
          description: "The assigned key, which acts as a unique identifier for\
                \ this incident."
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The process definition key associated to this incident."
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The process instance key associated to this incident."
        elementInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
          description: "The element instance key associated to this incident."
        jobKey:
          allOf:
            - $ref: "#/components/schemas/JobKey"
          description: "The job key, if exists, associated with this incident."
    IncidentSearchQueryResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching incidents."
          type: "array"
          items:
            $ref: "#/components/schemas/IncidentResult"
    CorrelatedMessageSearchQueryResult:
      type: object
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: The matching correlated messages.
          type: array
          items:
            $ref: "#/components/schemas/CorrelatedMessageResult"
    CorrelatedMessageResult:
      type: object
      properties:
        correlationKey:
          description: The correlation key of the message.
          type: string
        correlationTime:
          description: The time when the message was correlated.
          type: string
          format: date-time
        elementId:
          description: The element ID that received the message.
          type: string
        elementInstanceKey:
          description: The element instance key that received the message.
          type: string
        messageKey:
          description: The message key.
          type: string
        messageName:
          description: The name of the message.
          type: string
        partitionId:
          description: The partition ID that correlated the message.
          type: integer
          format: int32
        processDefinitionId:
          description: The process definition ID associated with this correlated message.
          type: string
        processDefinitionKey:
          description: The process definition key associated with this correlated message.
          type: string
        processInstanceKey:
          description: The process instance key associated with this correlated message.
          type: string
        subscriptionKey:
          description: The subscription key that received the message.
          type: string
        tenantId:
          description: The tenant ID associated with this correlated message.
          type: string
      required:
        - correlationKey
        - correlationTime
        - elementId
        - messageKey
        - messageName
        - partitionId
        - processDefinitionId
        - processInstanceKey
        - subscriptionKey
        - tenantId
    CorrelatedMessageSearchQuery:
      type: object
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: Sort field criteria.
          type: array
          items:
            $ref: "#/components/schemas/CorrelatedMessageSearchQuerySortRequest"
        filter:
          description: The correlated messages search filters.
          allOf:
            - $ref: "#/components/schemas/CorrelatedMessageFilter"
    CorrelatedMessageSearchQuerySortRequest:
        type: object
        properties:
          field:
            description: The field to sort by.
            type: string
            enum:
              - correlationKey
              - correlationTime
              - elementId
              - elementInstanceKey
              - messageKey
              - messageName
              - partitionId
              - processDefinitionId
              - processDefinitionKey
              - processInstanceKey
              - subscriptionKey
              - tenantId
          order:
            $ref: "#/components/schemas/SortOrderEnum"
        required:
          - field
    CorrelatedMessageFilter:
        description: Correlated messages search filter.
        type: object
        properties:
          correlationKey:
            description: The correlation key of the message.
            allOf:
              - $ref: "#/components/schemas/StringFilterProperty"
          correlationTime:
            description: The time when the message was correlated.
            allOf:
              - $ref: "#/components/schemas/DateTimeFilterProperty"
          elementId:
            description: The element ID that received the message.
            allOf:
              - $ref: "#/components/schemas/StringFilterProperty"
          elementInstanceKey:
            description: The element instance key that received the message.
            allOf:
              - $ref: "#/components/schemas/BasicStringFilterProperty"
          messageKey:
            description: The message key.
            allOf:
              - $ref: "#/components/schemas/BasicStringFilterProperty"
          messageName:
            description: The name of the message.
            allOf:
              - $ref: "#/components/schemas/StringFilterProperty"
          partitionId:
            description: The partition ID that correlated the message.
            allOf:
              - $ref: "#/components/schemas/IntegerFilterProperty"
          processDefinitionId:
            description: The process definition ID associated with this correlated message.
            allOf:
              - $ref: "#/components/schemas/StringFilterProperty"
          processDefinitionKey:
            description: The process definition key associated with this correlated message.
            allOf:
              - $ref: "#/components/schemas/BasicStringFilterProperty"
          processInstanceKey:
            description: The process instance key associated with this correlated message.
            allOf:
              - $ref: "#/components/schemas/BasicStringFilterProperty"
          subscriptionKey:
            description: The subscription key that received the message.
            allOf:
              - $ref: "#/components/schemas/BasicStringFilterProperty"
          tenantId:
            description: The tenant ID associated with this correlated message.
            allOf:
              - $ref: "#/components/schemas/StringFilterProperty"
    MessageSubscriptionSearchQueryResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching message subscriptions."
          type: "array"
          items:
            $ref: "#/components/schemas/MessageSubscriptionResult"
    MessageSubscriptionResult:
      type: "object"
      properties:
        messageSubscriptionKey:
          allOf:
            - $ref: "#/components/schemas/MessageSubscriptionKey"
          description: "The message subscription key associated with this message\
                \ subscription."
        processDefinitionId:
          description: "The process definition ID associated with this message subscription."
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionId"
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The process definition key associated with this message\
                \ subscription."
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The process instance key associated with this message\
                \ subscription."
        elementId:
          description: "The element ID associated with this message subscription."
          allOf:
            - $ref: "#/components/schemas/ElementId"
        elementInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
          description: "The element instance key associated with this message\
                \ subscription."
        messageSubscriptionState:
          $ref: "#/components/schemas/MessageSubscriptionStateEnum"
        lastUpdatedDate:
          description: "The last updated date of the message subscription."
          type: "string"
          format: "date-time"
        messageName:
          description: "The name of the message associated with the message subscription."
          type: "string"
        correlationKey:
          allOf:
            - $ref: "#/components/schemas/MessageCorrelationKey"
          description: "The correlation key of the message subscription."
        tenantId:
          $ref: "#/components/schemas/TenantId"
    MessageSubscriptionSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "messageSubscriptionKey"
            - "processDefinitionId"
            - "processInstanceKey"
            - "elementId"
            - "elementInstanceKey"
            - "messageSubscriptionState"
            - "lastUpdatedDate"
            - "messageName"
            - "correlationKey"
            - "tenantId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    MessageSubscriptionSearchQuery:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/MessageSubscriptionSearchQuerySortRequest"
        filter:
          description: "The incident search filters."
          allOf:
            - $ref: "#/components/schemas/MessageSubscriptionFilter"
    MessageSubscriptionFilter:
      description: "Message subscription search filter."
      type: "object"
      properties:
        messageSubscriptionKey:
          description: "The message subscription key associated with this message\
            \ subscription."
          allOf:
            - $ref: "#/components/schemas/AdvancedMessageSubscriptionKeyFilter"
        processDefinitionId:
          description: "The process definition ID associated with this message subscription."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        processInstanceKey:
          description: "The process instance key associated with this message subscription."
          allOf:
            - $ref: "#/components/schemas/AdvancedProcessInstanceKeyFilter"
        elementId:
          description: "The element ID associated with this message subscription."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        elementInstanceKey:
          description: "The element instance key associated with this message subscription."
          allOf:
            - $ref: "#/components/schemas/AdvancedElementInstanceKeyFilter"
        messageSubscriptionState:
          description: "The message subscription state."
          allOf:
            - $ref: "#/components/schemas/MessageSubscriptionStateFilterProperty"
        lastUpdatedDate:
          description: "The last updated date of the message subscription."
          allOf:
            - $ref: "#/components/schemas/DateTimeFilterProperty"
        messageName:
          description: "The name of the message associated with the message subscription."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        correlationKey:
          description: "The correlation key of the message subscription."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        tenantId:
          description: "The unique external tenant ID."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
    MessageSubscriptionStateFilterProperty:
      description: "MessageSubscriptionStateEnum with full advanced search capabilities."
      type: "object"
      oneOf:
        - type: "string"
          title: "Exact match"
          description: "Matches the value exactly."
          allOf:
            - $ref: "#/components/schemas/MessageSubscriptionStateEnum"
        - $ref: "#/components/schemas/AdvancedMessageSubscriptionStateFilter"
    MessageSubscriptionStateEnum:
      description: "The type of message subscription."
      type: "string"
      enum:
        - "CORRELATED"
        - "CREATED"
        - "DELETED"
        - "MIGRATED"
    AdvancedMessageSubscriptionStateFilter:
      title: "Advanced filter"
      description: "Advanced MessageSubscriptionStateEnum filter"
      type: "object"
      properties:
        $eq:
          description: "Checks for equality with the provided value."
          allOf:
            - $ref: "#/components/schemas/MessageSubscriptionStateEnum"
        $neq:
          description: "Checks for inequality with the provided value."
          allOf:
            - $ref: "#/components/schemas/MessageSubscriptionStateEnum"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/MessageSubscriptionStateEnum"
        $like:
          $ref: "#/components/schemas/LikeFilterProperty"
    IncidentResult:
      type: "object"
      properties:
        processDefinitionId:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionId"
          description: "The process definition ID associated to this incident."
        errorType:
          type: "string"
          description: "Incident error type with a defined set of values."
          enum:
            - "UNSPECIFIED"
            - "UNKNOWN"
            - "IO_MAPPING_ERROR"
            - "JOB_NO_RETRIES"
            - "EXECUTION_LISTENER_NO_RETRIES"
            - "TASK_LISTENER_NO_RETRIES"
            - "AD_HOC_SUB_PROCESS_NO_RETRIES"
            - "CONDITION_ERROR"
            - "EXTRACT_VALUE_ERROR"
            - "CALLED_ELEMENT_ERROR"
            - "UNHANDLED_ERROR_EVENT"
            - "MESSAGE_SIZE_EXCEEDED"
            - "CALLED_DECISION_ERROR"
            - "DECISION_EVALUATION_ERROR"
            - "FORM_NOT_FOUND"
            - "RESOURCE_NOT_FOUND"
        errorMessage:
          type: "string"
          description: "Error message which describes the error in more detail."
        elementId:
          description: "The element ID associated to this incident."
          allOf:
            - $ref: "#/components/schemas/ElementId"
        creationTime:
          type: "string"
          description: "Date of incident creation."
          format: "date-time"
        state:
          type: "string"
          description: "State of this incident with a defined set of values."
          enum:
            - "ACTIVE"
            - "MIGRATED"
            - "RESOLVED"
            - "PENDING"
        tenantId:
          description: "The tenant ID of the incident."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        incidentKey:
          allOf:
            - $ref: "#/components/schemas/IncidentKey"
          description: "The assigned key, which acts as a unique identifier for\
                \ this incident."
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The process definition key associated to this incident."
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The process instance key associated to this incident."
        elementInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
          description: "The element instance key associated to this incident."
        jobKey:
          allOf:
            - $ref: "#/components/schemas/JobKey"
          description: "The job key, if exists, associated with this incident."
    DecisionDefinitionSearchQueryResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching decision definitions."
          type: "array"
          required: ["items"]
          items:
            $ref: "#/components/schemas/DecisionDefinitionResult"
    DecisionDefinitionResult:
      type: "object"
      properties:
        decisionDefinitionId:
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionId"
          description: "The DMN ID of the decision definition."
        name:
          type: "string"
          description: "The DMN name of the decision definition."
        version:
          type: "integer"
          format: "int32"
          description: "The assigned version of the decision definition."
        decisionRequirementsId:
          type: "string"
          description: "the DMN ID of the decision requirements graph that the decision\
            \ definition is part of."
        tenantId:
          allOf:
            - $ref: "#/components/schemas/TenantId"
          description: "The tenant ID of the decision definition."
        decisionDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionKey"
          description: "The assigned key, which acts as a unique identifier for\
                \ this decision definition."
        decisionRequirementsKey:
          allOf:
            - $ref: "#/components/schemas/DecisionRequirementsKey"
          description: "The assigned key of the decision requirements graph that\
                \ the decision definition is part of."
    UsageMetricsResponse:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/UsageMetricsResponseItem"
      properties:
        activeTenants:
          description: "The amount of active tenants."
          type: "integer"
        tenants:
          description: "The usage metrics by tenants. Only available if request `withTenants`\
            \ query parameter was `true`."
          type: "object"
          additionalProperties:
            type: "object"
            title: The tenant ID.
            description: The usage metrics for the specific tenant.
            allOf:
              - $ref: "#/components/schemas/UsageMetricsResponseItem"
    UsageMetricsResponseItem:
      type: "object"
      properties:
        processInstances:
          description: "The amount of created root process instances."
          type: "integer"
        decisionInstances:
          description: "The amount of executed decision instances."
          type: "integer"
        assignees:
          description: "The amount of unique active task users."
          type: "integer"
    PermissionTypeEnum:
      description: "Specifies the type of permissions."
      enum:
        - "ACCESS"
        - "CREATE"
        - "CREATE_BATCH_OPERATION_CANCEL_PROCESS_INSTANCE"
        - "CREATE_BATCH_OPERATION_DELETE_PROCESS_INSTANCE"
        - "CREATE_BATCH_OPERATION_MIGRATE_PROCESS_INSTANCE"
        - "CREATE_BATCH_OPERATION_MODIFY_PROCESS_INSTANCE"
        - "CREATE_BATCH_OPERATION_RESOLVE_INCIDENT"
        - "CREATE_BATCH_OPERATION_DELETE_DECISION_INSTANCE"
        - "CREATE_BATCH_OPERATION_DELETE_DECISION_DEFINITION"
        - "CREATE_BATCH_OPERATION_DELETE_PROCESS_DEFINITION"
        - "CREATE_PROCESS_INSTANCE"
        - "CREATE_DECISION_INSTANCE"
        - "READ"
        - "READ_PROCESS_INSTANCE"
        - "READ_USER_TASK"
        - "READ_DECISION_INSTANCE"
        - "READ_PROCESS_DEFINITION"
        - "READ_DECISION_DEFINITION"
        - "READ_USAGE_METRIC"
        - "UPDATE"
        - "UPDATE_PROCESS_INSTANCE"
        - "UPDATE_USER_TASK"
        - "CANCEL_PROCESS_INSTANCE"
        - "MODIFY_PROCESS_INSTANCE"
        - "DELETE"
        - "DELETE_PROCESS"
        - "DELETE_DRD"
        - "DELETE_FORM"
        - "DELETE_RESOURCE"
        - "DELETE_PROCESS_INSTANCE"
        - "DELETE_DECISION_INSTANCE"
    ResourceTypeEnum:
      description: "The type of resource to add/remove permissions to/from."
      enum:
        - "AUTHORIZATION"
        - "MAPPING_RULE"
        - "MESSAGE"
        - "BATCH"
        - "COMPONENT"
        - "SYSTEM"
        - "TENANT"
        - "RESOURCE"
        - "PROCESS_DEFINITION"
        - "DECISION_REQUIREMENTS_DEFINITION"
        - "DECISION_DEFINITION"
        - "GROUP"
        - "USER"
        - "ROLE"
        - "DOCUMENT"
    OwnerTypeEnum:
      description: "The type of the owner of permissions."
      enum:
        - "USER"
        - "CLIENT"
        - "ROLE"
        - "GROUP"
        - "MAPPING_RULE"
        - "UNSPECIFIED"
    AuthorizationRequest:
      type: "object"
      properties:
        ownerId:
          description: "The ID of the owner of the permissions."
          type: "string"
        ownerType:
          description: "The type of the owner of the permissions."
          type: "object"
          allOf:
            - $ref: "#/components/schemas/OwnerTypeEnum"
        resourceId:
          description: "The ID of the resource to add permissions to."
          type: "string"
        resourceType:
          description: "The type of resource to add permissions to."
          type: "object"
          allOf:
            - $ref: "#/components/schemas/ResourceTypeEnum"
        permissionTypes:
          type: "array"
          description: "The permission types to add."
          items:
            type: "string"
            allOf:
              - $ref: "#/components/schemas/PermissionTypeEnum"
      required:
        - "ownerId"
        - "ownerType"
        - "resourceId"
        - "resourceType"
        - "permissionTypes"
    AuthorizationCreateResult:
      type: "object"
      properties:
        authorizationKey:
          allOf:
            - $ref: "#/components/schemas/AuthorizationKey"
          description: "The key of the created authorization."
    AuthorizationSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "ownerId"
            - "ownerType"
            - "resourceId"
            - "resourceType"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    AuthorizationSearchQuery:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/AuthorizationSearchQuerySortRequest"
        filter:
          description: "The authorization search filters."
          allOf:
            - $ref: "#/components/schemas/AuthorizationFilter"
    AuthorizationFilter:
      description: "Authorization search filter."
      type: "object"
      properties:
        ownerId:
          description: "The ID of the owner of permissions."
          type: "string"
        ownerType:
          description: "The type of the owner of permissions."
          type: "object"
          allOf:
            - $ref: "#/components/schemas/OwnerTypeEnum"
        resourceIds:
          description: "The IDs of the resource to search permissions for."
          type: "array"
          items:
            type: "string"
        resourceType:
          description: "The type of resource to search permissions for."
          type: "object"
          allOf:
            - $ref: "#/components/schemas/ResourceTypeEnum"
    AuthorizationResult:
      type: "object"
      properties:
        ownerId:
          description: "The ID of the owner of permissions."
          type: "string"
        ownerType:
          description: "The type of the owner of permissions."
          type: "object"
          allOf:
            - $ref: "#/components/schemas/OwnerTypeEnum"
        resourceType:
          description: "The type of resource that owner have permissions."
          type: "object"
          allOf:
            - $ref: "#/components/schemas/ResourceTypeEnum"
        resourceId:
          description: "ID of the resource the permission relates to."
          type: "string"
        permissionTypes:
          description: "Specifies the types of the permissions."
          type: "array"
          items:
            $ref: "#/components/schemas/PermissionTypeEnum"
        authorizationKey:
          allOf:
            - $ref: "#/components/schemas/AuthorizationKey"
          description: "The key of the authorization."
    AuthorizationSearchResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching authorizations."
          type: "array"
          items:
            $ref: "#/components/schemas/AuthorizationResult"
    UserRequest:
      type: "object"
      required: [ "password", "username", "email" ]
      properties:
        password:
          description: "The password of the user."
          type: "string"
        username:
          description: "The username of the user."
          type: "string"
        name:
          description: "The name of the user."
          type: "string"
        email:
          description: "The email of the user."
          type: "string"
    UserCreateResult:
      type: "object"
      properties:
        username:
          description: "The username of the user."
          $ref: "#/components/schemas/Username"
          x-semantic-provider: true
        name:
          description: "The name of the user."
          type: "string"
        email:
          description: "The email of the user."
          type: "string"
    UserUpdateResult:
      type: "object"
      properties:
        username:
          description: "The username of the user."
          allOf:
            - $ref: "#/components/schemas/Username"
        name:
          description: "The name of the user."
          type: "string"
        email:
          description: "The email of the user."
          type: "string"
    UserSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "username"
            - "name"
            - "email"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    UserSearchQueryRequest:
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      type: "object"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/UserSearchQuerySortRequest"
        filter:
          description: "The user search filters."
          allOf:
            - $ref: "#/components/schemas/UserFilter"
    MappingRuleSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "mappingRuleId"
            - "claimName"
            - "claimValue"
            - "name"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    MappingRuleSearchQueryRequest:
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      type: "object"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/MappingRuleSearchQuerySortRequest"
        filter:
          description: "The mapping search filters."
          allOf:
            - $ref: "#/components/schemas/MappingRuleFilter"
    UserFilter:
      description: "User search filter."
      type: "object"
      properties:
        username:
          description: "The username of the user."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        name:
          description: "The name of the user."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        email:
          description: "The email of the user."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
    MappingRuleFilter:
      description: "Mapping rule search filter."
      type: "object"
      properties:
        claimName:
          type: "string"
          description: "The claim name to match against a token."
        claimValue:
          type: "string"
          description: "The value of the claim to match."
        name:
          type: "string"
          description: "The name of the mapping."
        mappingRuleId:
          type: "string"
          description: "The ID of the mapping."
    CamundaUserResult:
      type: "object"
      required:
        - "tenants"
        - "groups"
        - "roles"
        - "salesPlanType"
        - "c8Links"
        - "canLogout"
      properties:
        username:
          description: "The username of the user."
          allOf:
            - $ref: "#/components/schemas/Username"
          nullable: true
        displayName:
          description: "The display name of the user."
          type: "string"
          example: "Samantha Willis"
          nullable: true
        email:
          description: "The email of the user."
          type: "string"
          example: "swillis@acme.com"
          nullable: true
        authorizedComponents:
          description: "The web components the user is authorized to use."
          type: "array"
          example: ["*"]
          items:
            type: "string"
        tenants:
          description: "The tenants the user is a member of."
          type: "array"
          items:
            $ref: "#/components/schemas/TenantResult"
        groups:
          description: "The groups assigned to the user."
          type: "array"
          example: ["customer-service"]
          items:
            type: "string"
        roles:
          description: "The roles assigned to the user."
          type: "array"
          example: ["frontline-support"]
          items:
            type: "string"
        salesPlanType:
          description: "The plan of the user."
          type: "string"
          example: ""
        c8Links:
          description: "The links to the components in the C8 stack."
          type: "object"
          example: {}
          additionalProperties:
            type: "string"
        canLogout:
          description: "Flag for understanding if the user is able to perform logout."
          type: "boolean"
    UserResult:
      type: "object"
      properties:
        username:
          description: "The username of the user."
          allOf:
            - $ref: "#/components/schemas/Username"
        name:
          description: "The name of the user."
          type: "string"
        email:
          description: "The email of the user."
          type: "string"
    UserSearchResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      required:
        - "items"
      properties:
        items:
          description: "The matching users."
          type: "array"
          items:
            $ref: "#/components/schemas/UserResult"
    UserUpdateRequest:
      type: "object"
      properties:
        password:
          description: "The password of the user. If blank, the password is unchanged."
          type: "string"
        name:
          description: "The name of the user."
          type: "string"
        email:
          description: "The email of the user."
          type: "string"
    TenantClientResult:
      type: "object"
      properties:
        clientId:
          description: "The ID of the client."
          type: "string"
    TenantClientSearchResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching clients."
          type: "array"
          items:
            $ref: "#/components/schemas/TenantClientResult"
    TenantClientSearchQueryRequest:
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      type: "object"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/TenantClientSearchQuerySortRequest"
    TenantClientSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "clientId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    TenantUserResult:
      type: "object"
      properties:
        username:
          description: "The username of the user."
          allOf:
            - $ref: "#/components/schemas/Username"
    TenantUserSearchResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching users."
          type: "array"
          items:
            $ref: "#/components/schemas/TenantUserResult"
    TenantUserSearchQueryRequest:
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      type: "object"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/TenantUserSearchQuerySortRequest"
    TenantUserSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "username"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    TenantGroupResult:
      type: "object"
      properties:
        groupId:
          description: "The groupId of the group."
          type: "string"
    TenantGroupSearchResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching groups."
          type: "array"
          items:
            $ref: "#/components/schemas/TenantGroupResult"
    TenantGroupSearchQueryRequest:
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      type: "object"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/TenantGroupSearchQuerySortRequest"
    TenantGroupSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "groupId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    RoleCreateRequest:
      type: "object"
      properties:
        roleId:
          type: "string"
          description: "The ID of the new role."
        name:
          type: "string"
          description: "The display name of the new role."
        description:
          type: "string"
          description: "The description of the new role."
      required:
        - "roleId"
        - "name"
    RoleCreateResult:
      type: "object"
      properties:
        roleId:
          description: "The ID of the created role."
          type: "string"
        name:
          description: "The display name of the created role."
          type: "string"
        description:
          description: "The description of the created role."
          type: "string"
    RoleUpdateRequest:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The display name of the new role."
        description:
          type: "string"
          description: "The description of the new role."
      required:
        - "name"
        - "description"
    RoleUpdateResult:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The display name of the updated role."
        description:
          type: "string"
          description: "The description of the updated role."
        roleId:
          type: "string"
          description: "The ID of the updated role."
    RoleResult:
      description: "Role search response item."
      type: "object"
      properties:
        name:
          type: "string"
          description: "The role name."
        roleId:
          type: "string"
          description: "The role id."
        description:
          type: "string"
          description: "The description of the role."
    RoleSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "name"
            - "roleId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    RoleSearchQueryRequest:
      description: "Role search request."
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      type: "object"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/RoleSearchQuerySortRequest"
        filter:
          description: "The role search filters."
          allOf:
            - $ref: "#/components/schemas/RoleFilter"
    RoleFilter:
      description: "Role filter request"
      type: "object"
      properties:
        roleId:
          description: "The role ID search filters."
          type: "string"
        name:
          description: "The role name search filters."
          type: "string"
    RoleSearchQueryResult:
      description: "Role search response."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching roles."
          type: "array"
          items:
            $ref: "#/components/schemas/RoleResult"
    RoleUserResult:
      type: "object"
      properties:
        username:
          description: "The username of the user."
          allOf:
            - $ref: "#/components/schemas/Username"
    RoleUserSearchResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching users."
          type: "array"
          items:
            $ref: "#/components/schemas/RoleUserResult"
    RoleUserSearchQueryRequest:
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      type: "object"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/RoleUserSearchQuerySortRequest"
    RoleUserSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "username"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    RoleClientResult:
      type: "object"
      properties:
        clientId:
          description: "The ID of the client."
          type: "string"
    RoleClientSearchResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching clients."
          type: "array"
          items:
            $ref: "#/components/schemas/RoleClientResult"
    RoleClientSearchQueryRequest:
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      type: "object"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/RoleClientSearchQuerySortRequest"
    RoleClientSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "clientId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    RoleGroupResult:
      type: "object"
      properties:
        groupId:
          description: "The id of the group."
          type: "string"
    RoleGroupSearchResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching groups."
          type: "array"
          items:
            $ref: "#/components/schemas/RoleGroupResult"
    RoleGroupSearchQueryRequest:
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      type: "object"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/RoleGroupSearchQuerySortRequest"
    RoleGroupSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "groupId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    GroupCreateRequest:
      type: "object"
      properties:
        groupId:
          type: "string"
          description: "The ID of the new group."
        name:
          type: "string"
          description: "The display name of the new group."
        description:
          type: "string"
          description: "The description of the new group."
      required:
        - "groupId"
        - "name"
    GroupCreateResult:
      type: "object"
      properties:
        groupId:
          description: "The ID of the created group."
          type: "string"
        name:
          description: "The display name of the created group."
          type: "string"
        description:
          description: "The description of the created group."
          type: "string"
    GroupUpdateRequest:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The new name of the group."
        description:
          type: "string"
          description: "The new description of the group."
      required:
        - "name"
        - "description"
    GroupUpdateResult:
      type: "object"
      properties:
        groupId:
          type: "string"
          description: "The unique external group ID."
        name:
          type: "string"
          description: "The name of the group."
        description:
          type: "string"
          description: "The description of the group."
    GroupResult:
      description: "Group search response item."
      type: "object"
      properties:
        name:
          type: "string"
          description: "The group name."
        groupId:
          type: "string"
          description: "The group ID."
        description:
          type: "string"
          description: "The group description."
    GroupSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "name"
            - "groupId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    GroupSearchQueryRequest:
      description: "Group search request."
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      type: "object"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/GroupSearchQuerySortRequest"
        filter:
          description: "The group search filters."
          allOf:
            - $ref: "#/components/schemas/GroupFilter"
    GroupFilter:
      description: "Group filter request"
      type: "object"
      properties:
        groupId:
          description: "The group ID search filters."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        name:
          description: "The group name search filters."
          type: "string"
    GroupSearchQueryResult:
      description: "Group search response."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching groups."
          type: "array"
          items:
            $ref: "#/components/schemas/GroupResult"
    GroupUserResult:
      type: "object"
      properties:
        username:
          description: "The username of the user."
          allOf:
            - $ref: "#/components/schemas/Username"
    GroupUserSearchResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching members."
          type: "array"
          items:
            $ref: "#/components/schemas/GroupUserResult"
    GroupUserSearchQueryRequest:
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      type: "object"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/GroupUserSearchQuerySortRequest"
    GroupUserSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "username"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    GroupClientResult:
      type: "object"
      properties:
        clientId:
          description: "The ID of the client."
          type: "string"
    GroupClientSearchResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching client IDs."
          type: "array"
          items:
            $ref: "#/components/schemas/GroupClientResult"
    GroupClientSearchQueryRequest:
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      type: "object"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/GroupClientSearchQuerySortRequest"
    GroupClientSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "clientId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    MappingRuleCreateUpdateRequest:
      type: "object"
      properties:
        claimName:
          type: "string"
          description: "The name of the claim to map."
        claimValue:
          type: "string"
          description: "The value of the claim to map."
        name:
          type: "string"
          description: "The name of the mapping."
      required:
        - "claimName"
        - "claimValue"
        - "name"
    MappingRuleCreateRequest:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/MappingRuleCreateUpdateRequest"
      properties:
        mappingRuleId:
          type: "string"
          description: "The unique ID of the mapping."
      required:
        - "mappingRuleId"
    MappingRuleUpdateRequest:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/MappingRuleCreateUpdateRequest"
    MappingRuleCreateUpdateResult:
      type: "object"
      properties:
        claimName:
          type: "string"
          description: "The name of the claim to map."
        claimValue:
          type: "string"
          description: "The value of the claim to map."
        name:
          type: "string"
          description: "The name of the mapping rule."
        mappingRuleId:
          type: "string"
          description: "The unique ID of the mapping rule."
    MappingRuleCreateResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/MappingRuleCreateUpdateResult"
    MappingRuleUpdateResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/MappingRuleCreateUpdateResult"
    MappingRuleSearchQueryResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching mapping rules."
          type: "array"
          items:
            $ref: "#/components/schemas/MappingRuleResult"
    MappingRuleResult:
      type: "object"
      properties:
        claimName:
          type: "string"
          description: "The name of the claim to map."
        claimValue:
          type: "string"
          description: "The value of the claim to map."
        name:
          type: "string"
          description: "The name of the mapping rule."
        mappingRuleId:
          type: "string"
          description: "The ID of the mapping rule."
    TopologyResponse:
      description: "The response of a topology request."
      type: "object"
      required:
        - "brokers"
        - "clusterSize"
        - "partitionsCount"
        - "replicationFactor"
        - "gatewayVersion"
        - "lastCompletedChangeId"
      properties:
        brokers:
          description: "A list of brokers that are part of this cluster."
          type: "array"
          items:
            $ref: "#/components/schemas/BrokerInfo"
        clusterSize:
          description: "The number of brokers in the cluster."
          type: "integer"
          format: "int32"
          example: 3
        partitionsCount:
          description: "The number of partitions are spread across the cluster."
          type: "integer"
          format: "int32"
          example: 3
        replicationFactor:
          description: "The configured replication factor for this cluster."
          type: "integer"
          format: "int32"
          example: 3
        gatewayVersion:
          description: "The version of the Zeebe Gateway."
          type: "string"
          example: "8.8.0"
        lastCompletedChangeId:
          description: "ID of the last completed change"
          type: "string"
          example: "-1"
    LicenseResponse:
      description: "The response of a license request."
      type: "object"
      required:
        - "validLicense"
        - "licenseType"
        - "isCommercial"
      properties:
        validLicense:
          description: "True if the Camunda license is valid, false if otherwise"
          type: "boolean"
          example: true
        licenseType:
          description: "Will return the license type property of the Camunda license"
          type: "string"
          example: "saas"
        isCommercial:
          description: "Will be false when a license contains a non-commerical=true\
            \ property"
          type: "boolean"
        expiresAt:
          description: "The date when the Camunda license expires"
          type: "string"
          format: "date-time"
          nullable: true
    BrokerInfo:
      description: "Provides information on a broker node."
      type: "object"
      required:
        - "nodeId"
        - "host"
        - "port"
        - "partitions"
        - "version"
      properties:
        nodeId:
          description: "The unique (within a cluster) node ID for the broker."
          type: "integer"
          format: "int32"
          example: 0
        host:
          description: "The hostname for reaching the broker."
          type: "string"
          example: "zeebe-0.zeebe-broker-service.b7fd7aa3-b973-4128-8789-74cd2318992c-zeebe.svc.cluster.local"
        port:
          description: "The port for reaching the broker."
          type: "integer"
          format: "int32"
          example: 26501
        partitions:
          description: "A list of partitions managed or replicated on this broker."
          type: "array"
          items:
            $ref: "#/components/schemas/Partition"
        version:
          description: "The broker version."
          type: "string"
          example: '8.8.0'
    Partition:
      description: "Provides information on a partition within a broker node."
      type: "object"
      required:
        - "partitionId"
        - "role"
        - "health"
      properties:
        partitionId:
          description: "The unique ID of this partition."
          type: "integer"
          format: "int32"
          example:  1
        role:
          description: "Describes the Raft role of the broker for a given partition."
          type: "string"
          example: "leader"
          enum:
            - "leader"
            - "follower"
            - "inactive"
        health:
          description: "Describes the current health of the partition."
          type: "string"
          example: "healthy"
          enum:
            - "healthy"
            - "unhealthy"
            - "dead"
    UserTaskCompletionRequest:
      type: "object"
      properties:
        variables:
          additionalProperties: true
          description: "The variables to complete the user task with."
          type: "object"
          nullable: true
        action:
          description: "A custom action value that will be accessible from user task\
            \ events resulting from this endpoint invocation. If not provided, it\
            \ will default to \"complete\".\n"
          type: "string"
          nullable: true
    UserTaskAssignmentRequest:
      type: "object"
      properties:
        assignee:
          description: "The assignee for the user task. The assignee must not be empty\
            \ or `null`."
          type: "string"
          nullable: false
        allowOverride:
          description: "By default, the task is reassigned if it was already assigned.\
            \ Set this to `false` to return an error in such cases. The task must\
            \ then first be unassigned to be assigned again. Use this when you have\
            \ users picking from group task queues to prevent race conditions.\n"
          type: "boolean"
          nullable: true
        action:
          description: "A custom action value that will be accessible from user task\
            \ events resulting from this endpoint invocation. If not provided, it\
            \ will default to \"assign\".\n"
          type: "string"
          nullable: true
    UserTaskUpdateRequest:
      type: "object"
      properties:
        changeset:
          $ref: "#/components/schemas/Changeset"
        action:
          description: "A custom action value that will be accessible from user task\
            \ events resulting from this endpoint invocation. If not provided, it\
            \ will default to \"update\".\n"
          type: "string"
          nullable: true
    Changeset:
      description: "JSON object with changed task attribute values.\n\nThe following\
        \ attributes can be adjusted with this endpoint, additional attributes\nwill\
        \ be ignored:\n\n* `candidateGroups` - reset by providing an empty list\n\
        * `candidateUsers` - reset by providing an empty list\n* `dueDate` - reset\
        \ by providing an empty String\n* `followUpDate` - reset by providing an empty\
        \ String\n* `priority` - minimum 0, maximum 100, default 50\n\nProviding any\
        \ of those attributes with a `null` value or omitting it preserves\nthe persisted\
        \ attribute's value.\n\nThe assignee cannot be adjusted with this endpoint,\
        \ use the Assign task endpoint.\nThis ensures correct event emission for assignee\
        \ changes.\n"
      type: "object"
      nullable: true
      additionalProperties: true
      properties:
        dueDate:
          type: "string"
          format: "date-time"
          description: "The due date of the task. Reset by providing an empty String."
          nullable: true
        followUpDate:
          type: "string"
          format: "date-time"
          description: "The follow-up date of the task. Reset by providing an empty\
            \ String."
          nullable: true
        candidateUsers:
          type: "array"
          description: "The list of candidate users of the task. Reset by providing\
            \ an empty list."
          items:
            type: "string"
          nullable: true
        candidateGroups:
          type: "array"
          description: "The list of candidate groups of the task. Reset by providing\
            \ an empty list."
          items:
            type: "string"
          nullable: true
        priority:
          type: "integer"
          format: "int32"
          description: "The priority of the task."
          minimum: 0
          default: 50
          maximum: 100
          nullable: true
    ClockPinRequest:
      type: "object"
      properties:
        timestamp:
          description: "The exact time in epoch milliseconds to which the clock should\
            \ be pinned."
          type: "integer"
      required:
        - "timestamp"
    JobActivationRequest:
      type: "object"
      properties:
        type:
          description: "The job type, as defined in the BPMN process (e.g. <zeebe:taskDefinition\
            \ type=\"payment-service\" />).\n"
          type: "string"
          example: "create-new-user-record"
        worker:
          description: "The name of the worker activating the jobs, mostly used for\
            \ logging purposes."
          type: "string"
          example: "worker-324"
        timeout:
          description: "A job returned after this call will not be activated by another\
            \ call until the timeout (in ms) has been reached.\n"
          type: "integer"
          example: 20000
        maxJobsToActivate:
          description: "The maximum jobs to activate by this request."
          type: "integer"
          format: "int32"
          example: 5
        fetchVariable:
          description: "A list of variables to fetch as the job variables; if empty,\
            \ all visible variables at the time of activation for the scope of the\
            \ job will be returned.\n"
          type: "array"
          example: ["firstName", "lastName", "email"]
          items:
            type: "string"
        requestTimeout:
          description: "The request will be completed when at least one job is activated\
            \ or after the requestTimeout (in ms). If the requestTimeout = 0, a default\
            \ timeout is used. If the requestTimeout < 0, long polling is disabled\
            \ and the request is completed immediately, even when no job is activated.\n"
          type: "integer"
          default: 0
          example: 60000
        tenantIds:
          description: "A list of IDs of tenants for which to activate jobs."
          type: "array"
          items:
            $ref: "#/components/schemas/TenantId"
      required:
        - "type"
        - "timeout"
        - "maxJobsToActivate"
    JobActivationResult:
      description: "The list of activated jobs"
      type: "object"
      required:
        - "jobs"
      properties:
        jobs:
          description: "The activated jobs."
          type: "array"
          items:
            $ref: "#/components/schemas/ActivatedJobResult"
    ActivatedJobResult:
      type: "object"
      required:
        - "type"
        - "processDefinitionId"
        - "processDefinitionVersion"
        - "elementId"
        - "customHeaders"
        - "worker"
        - "retries"
        - "deadline"
        - "variables"
        - "tenantId"
        - "jobKey"
        - "processInstanceKey"
        - "processDefinitionKey"
        - "elementInstanceKey"
        - "kind"
        - "listenerEventType"
      properties:
        type:
          description: "The type of the job (should match what was requested)."
          type: "string"
          example: "create-new-user-record"
        processDefinitionId:
          description: "The bpmn process ID of the job's process definition."
          example: "new-customer-flow"
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionId"
        processDefinitionVersion:
          description: "The version of the job's process definition."
          type: "integer"
          format: "int32"
          example: 1
        elementId:
          description: "The associated task element ID."
          x-semantic-provider: true
          allOf:
            - $ref: "#/components/schemas/ElementId"
        customHeaders:
          description: "A set of custom headers defined during modelling; returned\
            \ as a serialized JSON document."
          type: "object"
          additionalProperties: true
          example: {}
        worker:
          description: "The name of the worker which activated this job."
          type: "string"
          example: "worker-324"
        retries:
          description: "The amount of retries left to this job (should always be positive)."
          type: "integer"
          format: "int32"
          example: 3
        deadline:
          description: "When the job can be activated again, sent as a UNIX epoch\
            \ timestamp."
          type: "integer"
          example: 1757280974277
        variables:
          description: "All variables visible to the task scope, computed at activation\
            \ time."
          type: "object"
          example: {"firstName": "John", lastName: "Doe", email: "johndoe@acme.com"}
          additionalProperties: true
        tenantId:
          description: "The ID of the tenant that owns the job."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        jobKey:
          x-semantic-provider: true
          allOf:
            - $ref: "#/components/schemas/JobKey"
          description: "The key, a unique identifier for the job."
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The job's process instance key."
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The key of the job's process definition."
        elementInstanceKey:
          x-semantic-provider: true
          allOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
          description: "The unique key identifying the associated task, unique\
                \ within the scope of the process instance."
        kind:
          $ref: "#/components/schemas/JobKindEnum"
        listenerEventType:
          $ref: "#/components/schemas/JobListenerEventTypeEnum"
        userTask:
          $ref: "#/components/schemas/UserTaskProperties"
        tags:
          $ref: '#/components/schemas/TagSet'
    UserTaskProperties:
      type: "object"
      description: "Contains properties of a user task."
      properties:
        action:
          description: "The action performed on the user task."
          type: "string"
        assignee:
          description: "The user assigned to the task."
          type: "string"
          nullable: true
        candidateGroups:
          description: "The groups eligible to claim the task."
          type: "array"
          items:
            type: "string"
        candidateUsers:
          description: "The users eligible to claim the task."
          type: "array"
          items:
            type: "string"
        changedAttributes:
          description: "The attributes that were changed in the task."
          type: "array"
          items:
            type: "string"
        dueDate:
          description: "The due date of the user task in ISO 8601 format."
          type: "string"
          format: "date-time"
          nullable: true
        followUpDate:
          description: "The follow-up date of the user task in ISO 8601 format."
          type: "string"
          format: "date-time"
          nullable: true
        formKey:
          allOf:
            - $ref: "#/components/schemas/FormKey"
          description: "The key of the form associated with the user task."
        priority:
          description: "The priority of the user task."
          type: "integer"
          format: "int32"
          minimum: 0
          maximum: 100
          nullable: true
        userTaskKey:
          allOf:
            - $ref: "#/components/schemas/UserTaskKey"
          description: "The unique key identifying the user task."
          nullable: true
    JobFailRequest:
      type: "object"
      properties:
        retries:
          description: "The amount of retries the job should have left\n"
          type: "integer"
          format: "int32"
          default: 0
        errorMessage:
          description: "An optional message describing why the job failed. This is\
            \ particularly useful if a job runs out of retries and an incident is\
            \ raised, as this message can help explain why an incident was raised.\n"
          type: "string"
        retryBackOff:
          description: "The backoff timeout (in ms) for the next retry.\n"
          type: "integer"
          default: 0
        variables:
          additionalProperties: true
          description: "JSON object that will instantiate the variables at the local\
            \ scope of the job's associated task.\n"
          type: "object"
    JobErrorRequest:
      type: "object"
      properties:
        errorCode:
          description: "The error code that will be matched with an error catch event.\n"
          type: "string"
        errorMessage:
          description: "An error message that provides additional context.\n"
          type: "string"
          nullable: true
        variables:
          additionalProperties: true
          description: "JSON object that will instantiate the variables at the local\
            \ scope of the error catch event that catches the thrown error.\n"
          type: "object"
          nullable: true
      required:
        - "errorCode"
    JobCompletionRequest:
      type: "object"
      properties:
        variables:
          additionalProperties: true
          description: "The variables to complete the job with."
          type: "object"
          nullable: true
        result:
          $ref: "#/components/schemas/JobResult"
    JobResult:
      description: "The result of the completed job as determined by the worker.\n"
      discriminator:
        propertyName: "type"
        mapping:
          userTask: "#/components/schemas/JobResultUserTask"
          adHocSubProcess: "#/components/schemas/JobResultAdHocSubProcess"
      required:
        - "type"
      properties:
        type:
          type: "string"
          description: "Used to distinguish between different types of job results."
          enum:
            - "userTask"
            - "adHocSubProcess"
          default: "userTask"
    JobResultUserTask:
      type: "object"
      nullable: true
      allOf:
        - $ref: "#/components/schemas/JobResult"
        - type: "object"
          properties:
            denied:
              type: "boolean"
              description: "Indicates whether the worker denies the work, i.e. explicitly\
                \ doesn't approve it. For example, a user task listener can deny the\
                \ completion of a task by setting this flag to true. In this example,\
                \ the completion of a task is represented by a job that the worker\
                \ can complete as denied. As a result, the completion request is rejected\
                \ and the task remains active. Defaults to false.\n"
              nullable: true
            deniedReason:
              type: "string"
              description: "The reason provided by the user task listener for denying\
                \ the work."
              nullable: true
            corrections:
              $ref: "#/components/schemas/JobResultCorrections"
    JobResultCorrections:
      type: "object"
      description: "JSON object with attributes that were corrected by the worker.\n\
        \nThe following attributes can be corrected, additional attributes will be\
        \ ignored:\n\n* `assignee` - clear by providing an empty String\n* `dueDate`\
        \ - clear by providing an empty String\n* `followUpDate` - clear by providing\
        \ an empty String\n* `candidateGroups` - clear by providing an empty list\n\
        * `candidateUsers` - clear by providing an empty list\n* `priority` - minimum\
        \ 0, maximum 100, default 50\n\nProviding any of those attributes with a `null`\
        \ value or omitting it preserves\nthe persisted attribute's value.\n"
      nullable: true
      properties:
        assignee:
          type: "string"
          description: "Assignee of the task."
          nullable: true
        dueDate:
          type: "string"
          format: "date-time"
          description: "The due date of the task."
          nullable: true
        followUpDate:
          type: "string"
          format: "date-time"
          description: "The follow-up date of the task."
          nullable: true
        candidateUsers:
          type: "array"
          description: "The list of candidate users of the task."
          items:
            type: "string"
          nullable: true
        candidateGroups:
          type: "array"
          description: "The list of candidate groups of the task."
          items:
            type: "string"
          nullable: true
        priority:
          type: "integer"
          format: "int32"
          description: "The priority of the task."
          minimum: 0
          maximum: 100
          nullable: true
    JobResultAdHocSubProcess:
      type: "object"
      nullable: true
      allOf:
        - $ref: "#/components/schemas/JobResult"
        - type: "object"
          properties:
            activateElements:
              type: "array"
              description: "Indicates which elements need to be activated in the ad-hoc\
                \ subprocess."
              items:
                $ref: "#/components/schemas/JobResultActivateElement"
            isCompletionConditionFulfilled:
              type: "boolean"
              description: "Indicates whether the completion condition of the ad-hoc\
                \ subprocess is fulfilled."
              default: false
              nullable: false
            isCancelRemainingInstances:
              type: "boolean"
              description: "Indicates whether the remaining instances of the ad-hoc\
                \ subprocess should be canceled."
              default: false
              nullable: false
    JobResultActivateElement:
      type: "object"
      properties:
        elementId:
          description: "The ID of the element to activate."
          allOf:
            - $ref: "#/components/schemas/ElementId"
        variables:
          description: "JSON document that will create the variables on the scope\
            \ of the activated element.\nIt must be a JSON object, as variables will\
            \ be mapped in a key-value fashion.\n"
          additionalProperties: true
          type: "object"
          nullable: true
    JobUpdateRequest:
      type: "object"
      properties:
        changeset:
          $ref: "#/components/schemas/JobChangeset"
        operationReference:
          $ref: "#/components/schemas/OperationReference"
      required:
        - "changeset"
    JobChangeset:
      description: "JSON object with changed job attribute values.\n\nThe following\
        \ attributes can be adjusted with this endpoint, additional attributes\nwill\
        \ be ignored:\n\n* `retries` - The new amount of retries for the job; must\
        \ be a positive number.\n* `timeout` - The duration of the new timeout in\
        \ ms, starting from the current moment.\n\nProviding any of those attributes\
        \ with a null value or omitting it preserves the persisted attribute’s value.\n\
        \nThe job cannot be completed or failed with this endpoint, use the complete\
        \ job or fail job endpoints instead.\n"
      type: "object"
      properties:
        retries:
          type: "integer"
          format: "int32"
          description: "The new amount of retries for the job; must be a positive\
            \ number."
          nullable: true
        timeout:
          type: "integer"
          description: "The duration of the new timeout in ms, starting from the current\
            \ moment."
          nullable: true
    JobSearchQuery:
      description: "Job search request."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/JobSearchQuerySortRequest"
        filter:
          description: "The job search filters."
          allOf:
            - $ref: "#/components/schemas/JobFilter"
    JobSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "deadline"
            - "deniedReason"
            - "elementId"
            - "elementInstanceKey"
            - "endTime"
            - "errorCode"
            - "errorMessage"
            - "hasFailedWithRetriesLeft"
            - "isDenied"
            - "jobKey"
            - "kind"
            - "listenerEventType"
            - "processDefinitionId"
            - "processDefinitionKey"
            - "processInstanceKey"
            - "retries"
            - "state"
            - "tenantId"
            - "type"
            - "worker"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    JobFilter:
      description: "Job search filter."
      type: "object"
      properties:
        deadline:
          description: "If this is set, when the job can next be activated."
          nullable: true
          allOf:
            - $ref: "#/components/schemas/DateTimeFilterProperty"
        deniedReason:
          description: "The reason provided by the user task listener for denying\
            \ the work."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        elementId:
          description: "The element ID associated with the job."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        elementInstanceKey:
          description: "The element instance key associated with the job."
          oneOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
            - $ref: "#/components/schemas/AdvancedElementInstanceKeyFilter"
        endTime:
          description: "When the job ended."
          allOf:
            - $ref: "#/components/schemas/DateTimeFilterProperty"
        errorCode:
          description: "The error code provided for the failed job."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        errorMessage:
          description: "The error message that provides additional context for a failed\
            \ job."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        hasFailedWithRetriesLeft:
          description: "Indicates whether the job has failed with retries left."
          type: "boolean"
        isDenied:
          description: "Indicates whether the user task listener denies the work."
          type: "boolean"
          nullable: true
        jobKey:
          description: "The key, a unique identifier for the job."
          oneOf:
            - $ref: "#/components/schemas/JobKey"
            - $ref: "#/components/schemas/AdvancedJobKeyFilter"
        kind:
          description: "The kind of the job."
          allOf:
            - $ref: "#/components/schemas/JobKindFilterProperty"
        listenerEventType:
          description: "The listener event type of the job."
          allOf:
            - $ref: "#/components/schemas/JobListenerEventTypeFilterProperty"
        processDefinitionId:
          description: "The process definition ID associated with the job."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        processDefinitionKey:
          description: "The process definition key associated with the job."
          oneOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
            - $ref: "#/components/schemas/AdvancedProcessDefinitionKeyFilter"
        processInstanceKey:
          description: "The process instance key associated with the job."
          oneOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
            - $ref: "#/components/schemas/AdvancedProcessInstanceKeyFilter"
        retries:
          description: "The number of retries left."
          allOf:
            - $ref: "#/components/schemas/IntegerFilterProperty"
        state:
          description: "The state of the job."
          allOf:
            - $ref: "#/components/schemas/JobStateFilterProperty"
        tenantId:
          description: "The tenant ID."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        type:
          description: "The type of the job."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
        worker:
          description: "The name of the worker for this job."
          allOf:
            - $ref: "#/components/schemas/StringFilterProperty"
    JobSearchQueryResult:
      description: "Job search response."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching jobs."
          type: "array"
          items:
            $ref: "#/components/schemas/JobSearchResult"
    JobSearchResult:
      type: "object"
      required:
        - "customHeaders"
        - "elementId"
        - "elementInstanceKey"
        - "hasFailedWithRetriesLeft"
        - "jobKey"
        - "kind"
        - "listenerEventType"
        - "processDefinitionId"
        - "processDefinitionKey"
        - "processInstanceKey"
        - "retries"
        - "state"
        - "tenantId"
        - "type"
        - "worker"
      properties:
        customHeaders:
          description: "A set of custom headers defined during modelling."
          type: "object"
          additionalProperties:
            type: "string"
        deadline:
          description: "If the job has been activated, when it will next be available to be activated."
          type: "string"
          format: "date-time"
          nullable: true
        deniedReason:
          description: "The reason provided by the user task listener for denying\
            \ the work."
          type: "string"
          nullable: true
        elementId:
          description: "The element ID associated with the job."
          allOf:
            - $ref: "#/components/schemas/ElementId"
        elementInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
          description: "The element instance key associated with the job."
        endTime:
          description: "When the job ended."
          type: "string"
          format: "date-time"
        errorCode:
          description: "The error code provided for a failed job."
          type: "string"
          nullable: true
        errorMessage:
          description: "The error message that provides additional context for a failed\
            \ job."
          type: "string"
          nullable: true
        hasFailedWithRetriesLeft:
          description: "Indicates whether the job has failed with retries left."
          type: "boolean"
        isDenied:
          description: "Indicates whether the user task listener denies the work."
          type: "boolean"
          nullable: true
        jobKey:
          allOf:
            - $ref: "#/components/schemas/JobKey"
          description: "The key, a unique identifier for the job."
        kind:
          $ref: "#/components/schemas/JobKindEnum"
        listenerEventType:
          $ref: "#/components/schemas/JobListenerEventTypeEnum"
        processDefinitionId:
          description: "The process definition ID associated with the job."
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionId"
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The process definition key associated with the job."
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The process instance key associated with the job."
        retries:
          description: "The amount of retries left to this job."
          type: "integer"
          format: "int32"
        state:
          $ref: "#/components/schemas/JobStateEnum"
        tenantId:
          description: "The tenant ID."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        type:
          description: "The type of the job."
          type: "string"
        worker:
          description: "The name of the worker of this job."
          type: "string"
    JobStateEnum:
      description: "The state of the job."
      enum:
        - "CANCELED"
        - "COMPLETED"
        - "CREATED"
        - "ERROR_THROWN"
        - "FAILED"
        - "MIGRATED"
        - "RETRIES_UPDATED"
        - "TIMED_OUT"
    JobKindEnum:
      description: "The job kind."
      example: "BPMN_ELEMENT"
      enum:
        - "BPMN_ELEMENT"
        - "EXECUTION_LISTENER"
        - "TASK_LISTENER"
        - "AD_HOC_SUB_PROCESS"
    JobListenerEventTypeEnum:
      example: "UNSPECIFIED"
      description: "The listener event type of the job."
      enum:
        - "ASSIGNING"
        - "CANCELING"
        - "COMPLETING"
        - "CREATING"
        - "END"
        - "START"
        - "UNSPECIFIED"
        - "UPDATING"
    JobStateFilterProperty:
      description: "JobStateEnum property with full advanced search capabilities."
      type: "object"
      oneOf:
        - type: "string"
          title: "Exact match"
          description: "Matches the value exactly."
          allOf:
            - $ref: "#/components/schemas/JobStateEnum"
        - $ref: "#/components/schemas/AdvancedJobStateFilter"
    AdvancedJobStateFilter:
      title: "Advanced filter"
      description: "Advanced JobStateEnum filter."
      type: "object"
      properties:
        $eq:
          description: "Checks for equality with the provided value."
          allOf:
            - $ref: "#/components/schemas/JobStateEnum"
        $neq:
          description: "Checks for inequality with the provided value."
          allOf:
            - $ref: "#/components/schemas/JobStateEnum"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/JobStateEnum"
        $like:
          $ref: "#/components/schemas/LikeFilterProperty"
    JobKindFilterProperty:
      description: "JobKindEnum property with full advanced search capabilities."
      type: "object"
      oneOf:
        - type: "string"
          title: "Exact match"
          description: "Matches the value exactly."
          allOf:
            - $ref: "#/components/schemas/JobKindEnum"
        - $ref: "#/components/schemas/AdvancedJobKindFilter"
    AdvancedJobKindFilter:
      title: "Advanced filter"
      description: "Advanced JobKindEnum filter."
      type: "object"
      properties:
        $eq:
          description: "Checks for equality with the provided value."
          allOf:
            - $ref: "#/components/schemas/JobKindEnum"
        $neq:
          description: "Checks for inequality with the provided value."
          allOf:
            - $ref: "#/components/schemas/JobKindEnum"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/JobKindEnum"
        $like:
          $ref: "#/components/schemas/LikeFilterProperty"
    JobListenerEventTypeFilterProperty:
      description: "JobListenerEventTypeEnum property with full advanced search capabilities."
      type: "object"
      oneOf:
        - type: "string"
          title: "Exact match"
          description: "Matches the value exactly."
          allOf:
            - $ref: "#/components/schemas/JobListenerEventTypeEnum"
        - $ref: "#/components/schemas/AdvancedJobListenerEventTypeFilter"
    AdvancedJobListenerEventTypeFilter:
      title: "Advanced filter"
      description: "Advanced JobListenerEventTypeEnum filter."
      type: "object"
      properties:
        $eq:
          description: "Checks for equality with the provided value."
          allOf:
            - $ref: "#/components/schemas/JobListenerEventTypeEnum"
        $neq:
          description: "Checks for inequality with the provided value."
          allOf:
            - $ref: "#/components/schemas/JobListenerEventTypeEnum"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/JobListenerEventTypeEnum"
        $like:
          $ref: "#/components/schemas/LikeFilterProperty"
    ProblemDetail:
      description: "A Problem detail object as described in [RFC 9457](https://www.rfc-editor.org/rfc/rfc9457).\
        \ There may be additional properties specific to the problem type.\n"
      type: "object"
      properties:
        type:
          type: "string"
          format: "uri"
          description: "A URI identifying the problem type."
          default: "about:blank"
        title:
          type: "string"
          description: "A summary of the problem type."
        status:
          type: "integer"
          format: "int32"
          description: "The HTTP status code for this problem."
          minimum: 400
          maximum: 600
        detail:
          type: "string"
          description: "An explanation of the problem in more detail."
        instance:
          type: "string"
          format: "uri"
          description: "A URI identifying the origin of the problem."
    SearchQueryRequest:
      type: "object"
      properties:
        page:
          description: "Pagination criteria."
          allOf:
            - $ref: "#/components/schemas/SearchQueryPageRequest"
          type: "object"
    SearchQueryPageRequest:
      x-polymorphic-schema: true
      description: "Pagination criteria. Can use offset-based pagination (from/limit) OR cursor-based pagination (after/before + limit), but not both."
      oneOf:
        - $ref: "#/components/schemas/OffsetPagination"
        - $ref: "#/components/schemas/CursorForwardPagination"
        - $ref: "#/components/schemas/CursorBackwardPagination"
    OffsetPagination:
      type: "object"
      title: "Offset-based pagination"
      properties:
        from:
          description: "The index of items to start searching from."
          type: "integer"
          format: "int32"
          default: 0
          minimum: 0
        limit:
          description: "The maximum number of items to return in one request. <=10,000 for ElasticSearch."
          type: "integer"
          format: "int32"
          default: 100
          minimum: 1
    CursorForwardPagination:
      type: "object"
      title: "Cursor-based forward pagination"
      required:
        - "after"
      properties:
        after:
          description: "Use the `endCursor` value from the previous response to fetch the next page of results."
          allOf:
            - $ref: "#/components/schemas/EndCursor"
        limit:
          description: "The maximum number of items to return in one request."
          type: "integer"
          format: "int32"
          default: 100
    CursorBackwardPagination:
      type: "object"
      title: "Cursor-based backward pagination"
      required:
        - "before"
      properties:
        before:
          description: "Use the `startCursor` value from the previous response to fetch the previous page of results."
          allOf:
            - $ref: "#/components/schemas/StartCursor"
        limit:
          description: "The maximum number of items to return in one request."
          type: "integer"
          format: "int32"
          default: 100
    SearchQueryResponse:
      type: "object"
      required:
        - "page"
      properties:
        page:
          description: "Pagination information about the search results."
          allOf:
            - $ref: "#/components/schemas/SearchQueryPageResponse"
    SearchQueryPageResponse:
      description: "Pagination information about the search results."
      type: "object"
      required:
        - "totalItems"
      properties:
        totalItems:
          description: "Total items matching the criteria."
          type: "integer"
          example: 1
        hasMoreTotalItems:
          description: "Indicates if more results exist beyond the reported totalItems\
            \ value. Due to system limitations, the totalItems value can be capped.\n"
          type: "boolean"
          example: false
        startCursor:
          x-semantic-provider: true
          nullable: true
          description: "The cursor value for getting the previous page of results.\
            \ Use this in the `before` field of an ensuing request."
          allOf:
            - $ref: "#/components/schemas/StartCursor"
        endCursor:
          x-semantic-provider: true
          nullable: true
          description: "The cursor value for getting the next page of results. Use\
            \ this in the `after` field of an ensuing request."
          allOf:
            - $ref: "#/components/schemas/EndCursor"
      example:
        totalItems: 1
        hasMoreTotalItems: false
    DecisionRequirementsSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "decisionRequirementsKey"
            - "decisionRequirementsName"
            - "version"
            - "decisionRequirementsId"
            - "tenantId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    DecisionRequirementsSearchQuery:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/DecisionRequirementsSearchQuerySortRequest"
        filter:
          description: "The decision definition search filters."
          allOf:
            - $ref: "#/components/schemas/DecisionRequirementsFilter"
    DecisionRequirementsFilter:
      description: "Decision requirements search filter."
      type: "object"
      properties:
        decisionRequirementsName:
          type: "string"
          description: "The DMN name of the decision requirements."
        version:
          type: "integer"
          format: "int32"
          description: "The assigned version of the decision requirements."
        decisionRequirementsId:
          type: "string"
          description: "the DMN ID of the decision requirements."
        tenantId:
          allOf:
            - $ref: "#/components/schemas/TenantId"
          description: "The tenant ID of the decision requirements."
        decisionRequirementsKey:
          allOf:
            - $ref: "#/components/schemas/DecisionRequirementsKey"
          description: "The assigned key, which acts as a unique identifier for\
                \ this decision requirements."
        resourceName:
          type: "string"
          description: "The name of the resource from which the decision requirements\
            \ were parsed."
    DecisionRequirementsSearchQueryResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching decision requirements."
          type: "array"
          items:
            $ref: "#/components/schemas/DecisionRequirementsResult"
    DecisionRequirementsResult:
      type: "object"
      properties:
        decisionRequirementsName:
          type: "string"
          description: "The DMN name of the decision requirements."
        version:
          type: "integer"
          format: "int32"
          description: "The assigned version of the decision requirements."
        decisionRequirementsId:
          type: "string"
          description: "The DMN ID of the decision requirements."
        resourceName:
          type: "string"
          description: "The name of the resource from which this decision requirements\
            \ was parsed."
        tenantId:
          allOf:
            - $ref: "#/components/schemas/TenantId"
          description: "The tenant ID of the decision requirements."
        decisionRequirementsKey:
          allOf:
            - $ref: "#/components/schemas/DecisionRequirementsKey"
          description: "The assigned key, which acts as a unique identifier for\
                \ this decision requirements."
    DecisionEvaluationInstruction:
      x-polymorphic-schema: true
      type: "object"
      oneOf:
        - $ref: "#/components/schemas/DecisionEvaluationById"
        - $ref: "#/components/schemas/DecisionEvaluationByKey"
    DecisionEvaluationById:
      type: "object"
      title: "Decision evaluation by ID"
      properties:
        decisionDefinitionId:
          description: "The ID of the decision to be evaluated.\nWhen using the decision ID, the latest\n\
            deployed version of the decision is used.\n"
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionId"
        variables:
          description: "The message variables as JSON document."
          additionalProperties: true
          type: "object"
        tenantId:
          description: "The tenant ID of the decision."
          allOf:
            - $ref: "#/components/schemas/TenantId"
      required: ["decisionDefinitionId"]
    DecisionEvaluationByKey:
      type: "object"
      title: "Decision evaluation by key"
      properties:
        decisionDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionKey"
        variables:
          description: "The message variables as JSON document."
          additionalProperties: true
          type: "object"
        tenantId:
          description: "The tenant ID of the decision."
          allOf:
            - $ref: "#/components/schemas/TenantId"
      required: ["decisionDefinitionKey"]
    EvaluateDecisionResult:
      type: "object"
      properties:
        decisionDefinitionId:
          description: "The ID of the decision which was evaluated."
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionId"
        decisionDefinitionName:
          description: "The name of the decision which was evaluated."
          type: "string"
        decisionDefinitionVersion:
          description: "The version of the decision which was evaluated."
          type: "integer"
          format: "int32"
        decisionRequirementsId:
          description: "The ID of the decision requirements graph that the decision\
            \ which was evaluated is part of."
          type: "string"
        output:
          description: "JSON document that will instantiate the result of the decision\
            \ which was evaluated.\n"
          type: "string"
        failedDecisionDefinitionId:
          description: "The ID of the decision which failed during evaluation."
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionId"
        failureMessage:
          description: "Message describing why the decision which was evaluated failed."
          type: "string"
        tenantId:
          description: "The tenant ID of the evaluated decision."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        decisionDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionKey"
          description: "The unique key identifying the decision which was evaluated."
        decisionRequirementsKey:
          allOf:
            - $ref: "#/components/schemas/DecisionRequirementsKey"
          description: "The unique key identifying the decision requirements graph\
                \ that the decision which was evaluated is part of."
        decisionInstanceKey:
          allOf:
            - $ref: "#/components/schemas/DecisionInstanceKey"
          description: "Deprecated, please refer to `decisionEvaluationKey`."
          deprecated: true
        decisionEvaluationKey:
          x-semantic-provider: true
          description: The unique key identifying this decision evaluation.
          allOf:
            - $ref: "#/components/schemas/DecisionEvaluationKey"
        evaluatedDecisions:
          description: "Decisions that were evaluated within the requested decision\
            \ evaluation."
          type: "array"
          items:
            $ref: "#/components/schemas/EvaluatedDecisionResult"
    EvaluatedDecisionResult:
      type: "object"
      description: "A decision that was evaluated."
      properties:
        decisionDefinitionId:
          description: "The ID of the decision which was evaluated."
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionId"
        decisionDefinitionName:
          description: "The name of the decision which was evaluated."
          type: "string"
        decisionDefinitionVersion:
          description: "The version of the decision which was evaluated."
          type: "integer"
          format: "int32"
        decisionDefinitionType:
          description: "The type of the decision which was evaluated."
          type: "string"
        output:
          description: "JSON document that will instantiate the result of the decision\
            \ which was evaluated.\n"
          type: "string"
        tenantId:
          description: "The tenant ID of the evaluated decision."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        matchedRules:
          description: "The decision rules that matched within this decision evaluation."
          type: "array"
          items:
            $ref: "#/components/schemas/MatchedDecisionRuleItem"
        evaluatedInputs:
          description: "The decision inputs that were evaluated within this decision\
            \ evaluation."
          type: "array"
          items:
            $ref: "#/components/schemas/EvaluatedDecisionInputItem"
        decisionDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionKey"
          description: "The unique key identifying the decision which was evaluate."
        decisionEvaluationInstanceKey:
          x-semantic-provider: true
          allOf:
            - $ref: "#/components/schemas/DecisionEvaluationInstanceKey"
          description: The unique key identifying this decision evaluation instance.

    MatchedDecisionRuleItem:
      type: "object"
      description: "A decision rule that matched within this decision evaluation."
      properties:
        ruleId:
          description: "The ID of the matched rule."
          type: "string"
        ruleIndex:
          description: "The index of the matched rule."
          type: "integer"
          format: "int32"
        evaluatedOutputs:
          description: "The evaluated decision outputs."
          type: "array"
          items:
            $ref: "#/components/schemas/EvaluatedDecisionOutputItem"
    EvaluatedDecisionInputItem:
      type: "object"
      description: "A decision input that was evaluated within this decision evaluation."
      properties:
        inputId:
          description: "The ID of the evaluated decision input."
          type: "string"
        inputName:
          description: "The name of the evaluated decision input."
          type: "string"
        inputValue:
          description: "The value of the evaluated decision input."
          type: "string"
    EvaluatedDecisionOutputItem:
      type: "object"
      description: "The evaluated decision outputs."
      properties:
        outputId:
          description: "The ID of the evaluated decision output."
          type: "string"
        outputName:
          description: "The name of the evaluated decision output."
          type: "string"
        outputValue:
          description: "The value of the evaluated decision output."
          type: "string"
    DecisionInstanceSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "decisionDefinitionId"
            - "decisionDefinitionKey"
            - "decisionDefinitionName"
            - "decisionDefinitionType"
            - "decisionDefinitionVersion"
            - "decisionEvaluationInstanceKey"
            - "decisionEvaluationKey"
            - "elementInstanceKey"
            - "evaluationDate"
            - "evaluationFailure"
            - "processDefinitionKey"
            - "processInstanceKey"
            - "state"
            - "tenantId"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    DecisionInstanceSearchQuery:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/DecisionInstanceSearchQuerySortRequest"
        filter:
          description: "The decision instance search filters."
          allOf:
            - $ref: "#/components/schemas/DecisionInstanceFilter"
    DecisionInstanceFilter:
      description: "Decision instance search filter."
      type: "object"
      properties:
        decisionEvaluationInstanceKey:
          $ref: "#/components/schemas/DecisionEvaluationInstanceKey"
        state:
          $ref: "#/components/schemas/DecisionInstanceStateEnum"
        evaluationFailure:
          type: "string"
          description: "The evaluation failure of the decision instance."
        evaluationDate:
          description: "The evaluation date of the decision instance."
          allOf:
            - $ref: "#/components/schemas/DateTimeFilterProperty"
        decisionDefinitionId:
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionId"
          description: "The ID of the DMN decision."
        decisionDefinitionName:
          type: "string"
          description: "The name of the DMN decision."
        decisionDefinitionVersion:
          type: "integer"
          format: "int32"
          description: "The version of the decision."
        decisionDefinitionType:
          $ref: "#/components/schemas/DecisionDefinitionTypeEnum"
        tenantId:
          allOf:
            - $ref: "#/components/schemas/TenantId"
          description: "The tenant ID of the decision instance."
        decisionEvaluationKey:
          allOf:
            - $ref: "#/components/schemas/DecisionEvaluationKey"
          description: "The key of the parent decision evaluation. Note that this is not\
                \ the identifier of an individual decision instance; the `decisionEvaluationInstanceKey`\
                \ is the identifier for a decision instance.\n"
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The key of the process instance."
        decisionDefinitionKey:
          description: "The key of the decision."
          oneOf:
            - $ref: "#/components/schemas/DecisionDefinitionKey"
            - $ref: "#/components/schemas/AdvancedDecisionDefinitionKeyFilter"
        elementInstanceKey:
          description: "The key of the element instance this decision instance is\
            \ linked to."
          oneOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
            - $ref: "#/components/schemas/AdvancedElementInstanceKeyFilter"
    DecisionInstanceSearchQueryResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching decision instances."
          type: "array"
          items:
            $ref: "#/components/schemas/DecisionInstanceResult"
    DecisionInstanceResult:
      type: "object"
      properties:
        decisionEvaluationInstanceKey:
          $ref: "#/components/schemas/DecisionEvaluationInstanceKey"
        state:
          $ref: "#/components/schemas/DecisionInstanceStateEnum"
        evaluationDate:
          type: "string"
          format: "date-time"
          description: "The evaluation date of the decision instance."
        evaluationFailure:
          type: "string"
          description: "The evaluation failure of the decision instance."
        decisionDefinitionId:
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionId"
          description: "The ID of the DMN decision."
        decisionDefinitionName:
          type: "string"
          description: "The name of the DMN decision."
        decisionDefinitionVersion:
          type: "integer"
          format: "int32"
          description: "The version of the decision."
        decisionDefinitionType:
          $ref: "#/components/schemas/DecisionDefinitionTypeEnum"
        result:
          type: "string"
          description: "The result of the decision instance."
        tenantId:
          allOf:
            - $ref: "#/components/schemas/TenantId"
          description: "The tenant ID of the decision instance."
        decisionEvaluationKey:
          allOf:
            - $ref: "#/components/schemas/DecisionEvaluationKey"
          description: "The key of the decision evaluation where this instance was created."
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The key of the process definition."
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The key of the process instance."
        decisionDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionKey"
          description: "The key of the decision."
        elementInstanceKey:
          description: "The key of the element instance this decision instance\
                \ is linked to."
          allOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
    DecisionInstanceGetQueryResult:
      allOf:
        - $ref: "#/components/schemas/DecisionInstanceResult"
        - type: "object"
          properties:
            evaluatedInputs:
              type: "array"
              items:
                $ref: "#/components/schemas/EvaluatedDecisionInputItem"
              description: "The evaluated inputs of the decision instance.\n"
            matchedRules:
              type: "array"
              items:
                $ref: "#/components/schemas/MatchedDecisionRuleItem"
              description: "The matched rules of the decision instance.\n"
    DecisionDefinitionTypeEnum:
      description: "The type of the decision."
      enum:
        - "DECISION_TABLE"
        - "LITERAL_EXPRESSION"
        - "UNSPECIFIED"
        - "UNKNOWN"
    DecisionInstanceStateEnum:
      description: "The state of the decision instance."
      enum:
        - "EVALUATED"
        - "FAILED"
        - "UNSPECIFIED"
        - "UNKNOWN"
    SortOrderEnum:
      description: "The order in which to sort the related field."
      type: "string"
      enum:
        - "ASC"
        - "DESC"
      default: "ASC"
    OperationReference:
      description: "A reference key chosen by the user that will be part of all records\
        \ resulting from this operation.\nMust be > 0 if provided.\n"
      type: "integer"
      minimum: 1
    MessageCorrelationRequest:
      type: "object"
      required:
        - "name"
        - "correlationKey"
      properties:
        name:
          description: "The message name as defined in the BPMN process\n"
          type: "string"
        correlationKey:
          description: "The correlation key of the message."
          type: "string"
          example: "customer-43421"
          default: ""
        variables:
          description: "The message variables as JSON document"
          additionalProperties: true
          type: "object"
        tenantId:
          description: "the tenant for which the message is published"
          allOf:
            - $ref: "#/components/schemas/TenantId"
    MessageCorrelationResult:
      description: "The message key of the correlated message, as well as the first\
        \ process instance key it\ncorrelated with.\n"
      type: "object"
      properties:
        tenantId:
          description: "The tenant ID of the correlated message"
          allOf:
            - $ref: "#/components/schemas/TenantId"
        messageKey:
          allOf:
            - $ref: "#/components/schemas/MessageCorrelationKey"
          description: "The key of the correlated message"
        processInstanceKey:
          description: "The key of the first process instance the message correlated\
                \ with"
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
    MessagePublicationRequest:
      type: "object"
      properties:
        name:
          description: "The name of the message."
          type: "string"
        correlationKey:
          description: "The correlation key of the message."
          type: "string"
          example: "customer-43421"
          default: ""
        timeToLive:
          description: "Timespan (in ms) to buffer the message on the broker."
          type: "integer"
          default: 0
        messageId:
          description: "The unique ID of the message. This is used to ensure only one\
            \ message with the given ID\nwill be published during the lifetime of the message (if `timeToLive` is set).\n"
          type: "string"
        variables:
          description: "The message variables as JSON document."
          additionalProperties: true
          type: "object"
        tenantId:
          description: "The tenant of the message sender."
          allOf:
            - $ref: "#/components/schemas/TenantId"
          nullable: true
      required:
        - "name"
        - "correlationKey"
    MessagePublicationResult:
      description: "The message key of the published message."
      type: "object"
      properties:
        tenantId:
          description: "The tenant ID of the message."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        messageKey:
          allOf:
            - $ref: "#/components/schemas/MessageKey"
          description: "The key of the message"
    DocumentReference:
      type: "object"
      properties:
        camunda.document.type:
          type: "string"
          description: "Document discriminator. Always set to \"camunda\"."
          enum:
            - "camunda"
        storeId:
          type: "string"
          description: "The ID of the document store."
        documentId:
          allOf:
            - $ref: "#/components/schemas/DocumentId"
          description: "The ID of the document."
        contentHash:
          type: "string"
          description: "The hash of the document."
        metadata:
          $ref: "#/components/schemas/DocumentMetadata"
    DocumentCreationFailureDetail:
      type: "object"
      properties:
        fileName:
          type: "string"
          description: "The name of the file."
        detail:
          type: "string"
          description: "The detail of the failure."
    DocumentCreationBatchResponse:
      allOf:
        - type: "object"
          properties:
            createdDocuments:
              type: "array"
              description: "Documents that were successfully created."
              items:
                $ref: "#/components/schemas/DocumentReference"
            failedDocuments:
              type: "array"
              description: "Documents that failed creation."
              items:
                $ref: "#/components/schemas/DocumentCreationFailureDetail"
    DocumentId:
      description: "Document Id that uniquely identifies a document."
      format: "DocumentId"
      x-semantic-type: "DocumentId"
      type: "string"
    DocumentMetadata:
      description: "Information about the document."
      type: "object"
      properties:
        contentType:
          type: "string"
          description: "The content type of the document."
        fileName:
          type: "string"
          description: "The name of the file."
        expiresAt:
          type: "string"
          format: "date-time"
          description: "The date and time when the document expires."
        size:
          type: "integer"
          description: "The size of the document in bytes."
        processDefinitionId:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionId"
          description: "The ID of the process definition that created the document."
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The key of the process instance that created the document."
        customProperties:
          type: "object"
          description: "Custom properties of the document."
          additionalProperties: true
    DocumentLinkRequest:
      type: "object"
      properties:
        timeToLive:
          type: "integer"
          description: "The time-to-live of the document link in ms."
          default: 3600000
    DocumentLink:
      type: "object"
      properties:
        url:
          type: "string"
          description: "The link to the document."
        expiresAt:
          type: "string"
          format: "date-time"
          description: "The date and time when the link expires."
    DeploymentResult:
      type: "object"
      required:
        - "tenantId"
        - "deploymentKey"
        - "deployments"
      properties:
        tenantId:
          description: "The tenant ID associated with the deployment."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        deploymentKey:
          allOf:
            - $ref: "#/components/schemas/DeploymentKey"
          description: "The unique key identifying the deployment."
        deployments:
          description: "Items deployed by the request."
          type: "array"
          items:
            $ref: "#/components/schemas/DeploymentMetadataResult"
    DeploymentMetadataResult:
      type: "object"
      properties:
        processDefinition:
          $ref: "#/components/schemas/DeploymentProcessResult"
        decisionDefinition:
          $ref: "#/components/schemas/DeploymentDecisionResult"
        decisionRequirements:
          $ref: "#/components/schemas/DeploymentDecisionRequirementsResult"
        form:
          $ref: "#/components/schemas/DeploymentFormResult"
        resource:
          $ref: "#/components/schemas/DeploymentResourceResult"
    DeploymentProcessResult:
      description: "A deployed process."
      type: "object"
      required:
        - "processDefinitionId"
        - "processDefinitionVersion"
        - "resourceName"
        - "processDefinitionKey"
        - "tenantId"
      properties:
        processDefinitionId:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionId"
          description: "The bpmn process ID, as parsed during deployment, together\
            \ with the version forms a\nunique identifier for a specific process definition.\n"
        processDefinitionVersion:
          type: "integer"
          format: "int32"
          description: "The assigned process version."
        resourceName:
          type: "string"
          description: "The resource name from which this process was parsed."
        tenantId:
          allOf:
            - $ref: "#/components/schemas/TenantId"
          description: "The tenant ID of the deployed process."
        processDefinitionKey:
          x-semantic-provider: true
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The assigned key, which acts as a unique identifier for\
                \ this process."
    DeploymentDecisionResult:
      description: "A deployed decision."
      type: "object"
      properties:
        decisionDefinitionId:
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionId"
          description: "The dmn decision ID, as parsed during deployment, together\
            \ with the version forms a\nunique identifier for a specific decision.\n"
        version:
          type: "integer"
          format: "int32"
          description: "The assigned decision version."
        name:
          type: "string"
          description: "The DMN name of the decision, as parsed during deployment."
        tenantId:
          allOf:
            - $ref: "#/components/schemas/TenantId"
          description: "The tenant ID of the deployed decision."
        decisionRequirementsId:
          type: "string"
          description: "The dmn ID of the decision requirements graph that this decision\
            \ is part of, as parsed during deployment.\n"
        decisionDefinitionKey:
          x-semantic-provider: true
          allOf:
            - $ref: "#/components/schemas/DecisionDefinitionKey"
          description: "The assigned decision key, which acts as a unique identifier\
                \ for this decision.\n"
        decisionRequirementsKey:
          x-semantic-provider: true
          allOf:
            - $ref: "#/components/schemas/DecisionRequirementsKey"
          description: "The assigned key of the decision requirements graph that\
                \ this decision is part of.\n"
    DeploymentDecisionRequirementsResult:
      description: "Deployed decision requirements."
      type: "object"
      properties:
        decisionRequirementsId:
          type: "string"
          description: "The dmn decision requirements ID, as parsed during deployment;\
            \ together with the versions forms a unique identifier for a specific\
            \ decision.\n"
        version:
          type: "integer"
          format: "int32"
          description: "The assigned decision requirements version."
        decisionRequirementsName:
          type: "string"
          description: "The DMN name of the decision requirements, as parsed during\
            \ deployment."
        tenantId:
          allOf:
            - $ref: "#/components/schemas/TenantId"
          description: "The tenant ID of the deployed decision requirements."
        resourceName:
          type: "string"
          description: "The resource name from which this decision requirements was\
            \ parsed."
        decisionRequirementsKey:
          x-semantic-provider: true
          allOf:
            - $ref: "#/components/schemas/DecisionRequirementsKey"
          description: "The assigned decision requirements key, which acts as\
                \ a unique identifier for this decision requirements.\n"
    DeploymentFormResult:
      description: "A deployed form."
      type: "object"
      properties:
        formId:
          type: "string"
          description: "The form ID, as parsed during deployment, together with the\
            \ version forms a\nunique identifier for a specific form.\n"
        version:
          type: "integer"
          format: "int32"
          description: "The assigned form version."
        resourceName:
          type: "string"
          description: "The resource name from which this form was parsed."
        tenantId:
          allOf:
            - $ref: "#/components/schemas/TenantId"
          description: "The tenant ID of the deployed form."
        formKey:
          x-semantic-provider: true
          allOf:
            - $ref: "#/components/schemas/FormKey"
          description: "The assigned key, which acts as a unique identifier for\
                \ this form."
    DeploymentResourceResult:
      description: "A deployed Resource."
      type: "object"
      properties:
        resourceId:
          type: "string"
          description: "The resource ID, as parsed during deployment, together with\
            \ the version forms a\nunique identifier for a specific form.\n"
        version:
          type: "integer"
          format: "int32"
          description: "The assigned resource version."
        resourceName:
          type: "string"
          description: "The resource name from which this resource was parsed."
        tenantId:
          allOf:
            - $ref: "#/components/schemas/TenantId"
          description: "The tenant ID of the deployed form."
        resourceKey:
          x-semantic-provider: true
          allOf:
            - $ref: "#/components/schemas/ResourceKey"
          description: "The assigned key, which acts as a unique identifier for\
                \ this Resource."
    IncidentResolutionRequest:
      type: "object"
      properties:
        operationReference:
          $ref: "#/components/schemas/OperationReference"
    ProcessInstanceCreationInstruction:
      x-polymorphic-schema: true
      description: "Instructions for creating a process instance. The process definition\
        \ can be specified\neither by ID or by key.\n"
      oneOf:
        - $ref: "#/components/schemas/ProcessInstanceCreationInstructionById"
        - $ref: "#/components/schemas/ProcessInstanceCreationInstructionByKey"
    ProcessInstanceCreationInstructionBase:
      type: object
      properties:
        variables:
          description: "JSON object that will instantiate the variables for the\
            \ root variable scope\nof the process instance.\n"
          type: "object"
          additionalProperties: true
        tenantId:
          description: "The tenant ID of the process definition."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        operationReference:
          $ref: "#/components/schemas/OperationReference"
        startInstructions:
          description: "List of start instructions. By default, the process instance\
            \ will start at\nthe start event. If provided, the process instance\
            \ will apply start instructions\nafter it has been created.\n"
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessInstanceCreationStartInstruction"
        runtimeInstructions:
          description: "Runtime instructions (alpha). List of instructions that\
            \ affect the runtime behavior of\nthe process instance. Refer to specific\
            \ instruction types for more details.\n\nThis parameter is an alpha\
            \ feature and may be subject to change\nin future releases.\n"
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/ProcessInstanceCreationTerminateInstruction"
            discriminator:
              propertyName: "type"
              mapping:
                TERMINATE_PROCESS_INSTANCE: "#/components/schemas/ProcessInstanceCreationTerminateInstruction"
        awaitCompletion:
          description: "Wait for the process instance to complete. If the process\
            \ instance completion does\nnot occur within the requestTimeout, the\
            \ request will be closed. This can lead to a 504\nresponse status.\
            \ Disabled by default.\n"
          type: "boolean"
          default: false
        fetchVariables:
          description: "List of variables by name to be included in the response\
            \ when awaitCompletion is set to true.\nIf empty, all visible variables\
            \ in the root scope will be returned.\n"
          type: "array"
          example: []
          items:
            type: "string"
        requestTimeout:
          description: "Timeout (in ms) the request waits for the process to complete.\
            \ By default or\nwhen set to 0, the generic request timeout configured\
            \ in the cluster is applied.\n"
          type: "integer"
          default: 0
        tags:
          $ref: '#/components/schemas/TagSet'
    ProcessInstanceCreationInstructionById:
      type: "object"
      title: "Process creation by ID"
      required:
        - "processDefinitionId"
      allOf:
        - $ref: "#/components/schemas/ProcessInstanceCreationInstructionBase"
      properties:
        processDefinitionId:
          description: "The BPMN process ID of the process definition to start\
            \ an instance of.\n"
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionId"
        processDefinitionVersion:
          description: "The version of the process. By default, the latest version\
            \ of the process is used.\n"
          type: "integer"
          format: "int32"
          default: -1

    ProcessInstanceCreationInstructionByKey:
      type: "object"
      title: "Process creation by key"
      required:
        - "processDefinitionKey"
      allOf:
        - $ref: "#/components/schemas/ProcessInstanceCreationInstructionBase"
      properties:
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The unique key identifying the process definition,\
                \ for example, returned for a process in the\ndeploy resources\
                \ endpoint.\n"
    ProcessInstanceCreationStartInstruction:
      type: "object"
      required:
        - "elementId"
      properties:
        elementId:
          description: "Future extensions might include:\n  - different types of start\
            \ instructions\n  - ability to set local variables for different flow\
            \ scopes\n\nFor now, however, the start instruction is implicitly a \"\
            startBeforeElement\" instruction\n"
          allOf:
            - $ref: "#/components/schemas/ElementId"
    RuntimeInstructionType:
      type: "string"
      description: "The type of the runtime instruction. For now, only TERMINATE_PROCESS_INSTANCE\
        \ is supported.\n"
      enum:
        - "TERMINATE_PROCESS_INSTANCE"
    ProcessInstanceCreationRuntimeInstruction:
      type: "object"
      required:
        - "type"
      properties:
        type:
          $ref: "#/components/schemas/RuntimeInstructionType"
      discriminator:
        propertyName: "type"
        mapping:
          TERMINATE_PROCESS_INSTANCE: "#/components/schemas/ProcessInstanceCreationTerminateInstruction"
      description: "Base type for all runtime instructions.\n"
    ProcessInstanceCreationTerminateInstruction:
      description: "Terminate the process"
      allOf:
        - $ref: "#/components/schemas/ProcessInstanceCreationRuntimeInstruction"
        - type: "object"
          required:
            - "afterElementId"
          properties:
            afterElementId:
              description: "The ID of the element that, once completed or terminated,\
                \ will cause the process to be terminated.\n"
              example: "Activity_106kosb"
              allOf:
                - $ref: "#/components/schemas/ElementId"
          description: "Terminates the process instance after a specific BPMN element\
            \ is completed or terminated.\n"
    CreateProcessInstanceResult:
      required:
        - "processDefinitionId"
        - "processDefinitionKey"
        - "processDefinitionVersion"
        - "tenantId"
        - "variables"
        - "processInstanceKey"
      type: "object"
      properties:
        processDefinitionId:
          description: "The BPMN process ID of the process definition which was used\
            \ to create the process.\ninstance\n"
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionId"
          example: "my-process-model-1"
        processDefinitionVersion:
          description: "The version of the process definition which was used to create\
            \ the process instance.\n"
          type: "integer"
          format: "int32"
          example: 3
        tenantId:
          description: "The tenant ID of the created process instance."
          allOf:
            - $ref: "#/components/schemas/TenantId"
          example: "<default>"
        variables:
          additionalProperties: true
          description: "All the variables visible in the root scope."
          type: "object"
        processDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The key of the process definition which was used to create\
                \ the process instance.\n"
        processInstanceKey:
          x-semantic-provider: true
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "The unique identifier of the created process instance;\
                \ to be used wherever a request\nneeds a process instance key (e.g.\
                \ CancelProcessInstanceRequest).\n"
        tags:
          $ref: '#/components/schemas/TagSet'
    ProcessInstanceMigrationBatchOperationRequest:
      type: "object"
      properties:
        filter:
          $ref: "#/components/schemas/ProcessInstanceFilter"
        migrationPlan:
          $ref: "#/components/schemas/ProcessInstanceMigrationBatchOperationPlan"
      required:
        - "filter"
        - "migrationPlan"
    ProcessInstanceMigrationBatchOperationPlan:
      type: "object"
      description: "The migration instructions describe how to migrate a process instance\
        \ from one process definition to another.\n"
      properties:
        mappingInstructions:
          description: "Element mappings from the source process instance to the target\
            \ process instance."
          type: "array"
          items:
            $ref: "#/components/schemas/MigrateProcessInstanceMappingInstruction"
        targetProcessDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The key of process definition to migrate the process instance\
                \ to."
      required:
        - "targetProcessDefinitionKey"
        - "mappingInstructions"
    ProcessInstanceMigrationInstruction:
      type: "object"
      description: "The migration instructions describe how to migrate a process instance\
        \ from one process definition to another.\n"
      properties:
        mappingInstructions:
          description: "Element mappings from the source process instance to the target\
            \ process instance."
          type: "array"
          items:
            $ref: "#/components/schemas/MigrateProcessInstanceMappingInstruction"
        operationReference:
          $ref: "#/components/schemas/OperationReference"
        targetProcessDefinitionKey:
          allOf:
            - $ref: "#/components/schemas/ProcessDefinitionKey"
          description: "The key of process definition to migrate the process instance\
                \ to."
      required:
        - "targetProcessDefinitionKey"
        - "mappingInstructions"
    MigrateProcessInstanceMappingInstruction:
      type: "object"
      description: "The mapping instructions describe how to map elements from the\
        \ source process definition to the target process definition.\n"
      properties:
        sourceElementId:
          description: "The element ID to migrate from."
          allOf:
            - $ref: "#/components/schemas/ElementId"
        targetElementId:
          description: "The element ID to migrate into."
          allOf:
            - $ref: "#/components/schemas/ElementId"
      required:
        - "sourceElementId"
        - "targetElementId"
    ProcessInstanceModificationInstruction:
      type: "object"
      properties:
        operationReference:
          $ref: "#/components/schemas/OperationReference"
        activateInstructions:
          description: "Instructions describing which elements should be activated\
            \ in which scopes and which variables should be created."
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessInstanceModificationActivateInstruction"
        terminateInstructions:
          description: "Instructions describing which elements should be terminated."
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessInstanceModificationTerminateInstruction"
    ProcessInstanceModificationActivateInstruction:
      description: "Instructions describing an element that should be activated."
      type: "object"
      properties:
        elementId:
          description: "The ID of the element that should be activated."
          allOf:
            - $ref: "#/components/schemas/ElementId"
        variableInstructions:
          description: "Instructions describing which variables should be created."
          type: "array"
          items:
            $ref: "#/components/schemas/ModifyProcessInstanceVariableInstruction"
        ancestorElementInstanceKey:
          description: "The key of the ancestor scope the element instance should\
            \ be created in.\nSet to -1 to create the new element instance within\
            \ an existing element instance of the\nflow scope.\n"
          oneOf:
            - type: "string"
              default: "-1"
            - $ref: "#/components/schemas/ElementInstanceKey"
      required:
        - "elementId"
    ModifyProcessInstanceVariableInstruction:
      type: "object"
      description: "Instructions describing which variables should be created."
      properties:
        variables:
          description: "JSON document that will instantiate the variables for the\
            \ root variable scope of the process instance.\nIt must be a JSON object,\
            \ as variables will be mapped in a key-value fashion.\n"
          additionalProperties: true
          type: "object"
        scopeId:
          description: "The ID of the element in which scope the variables should\
            \ be created.\nLeave empty to create the variables in the global scope\
            \ of the process instance\n"
          type: "string"
          default: ""
      required:
        - "variables"
    ProcessInstanceModificationTerminateInstruction:
      type: "object"
      description: "Instructions describing which elements should be terminated."
      properties:
        elementInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ElementInstanceKey"
          description: "The ID of the element that should be terminated."
      required:
        - "elementInstanceKey"
    SetVariableRequest:
      type: "object"
      properties:
        variables:
          description: "JSON object representing the variables to set in the element’\
            s scope."
          additionalProperties: true
          type: "object"
        local:
          description: "If set to true, the variables are merged strictly into the\
            \ local scope (as specified by the `elementInstanceKey`).\nOtherwise,\
            \ the variables are propagated to upper scopes and set at the outermost\
            \ one.\n\nLet’s consider the following example:\n\nThere are two scopes\
            \ '1' and '2'.\nScope '1' is the parent scope of '2'. The effective variables\
            \ of the scopes are:\n1 => { \"foo\" : 2 }\n2 => { \"bar\" : 1 }\n\nAn\
            \ update request with elementInstanceKey as '2', variables { \"foo\" :\
            \ 5 }, and local set\nto true leaves scope '1' unchanged and adjusts scope\
            \ '2' to { \"bar\" : 1, \"foo\" 5 }.\n\nBy default, with local set to\
            \ false, scope '1' will be { \"foo\": 5 }\nand scope '2' will be { \"\
            bar\" : 1 }.\n"
          type: "boolean"
          default: false
        operationReference:
          $ref: "#/components/schemas/OperationReference"
      required:
        - "variables"
    DeleteResourceRequest:
      type: "object"
      nullable: true
      properties:
        operationReference:
          $ref: "#/components/schemas/OperationReference"
    SignalBroadcastRequest:
      type: "object"
      properties:
        signalName:
          description: "The name of the signal to broadcast."
          type: "string"
        variables:
          additionalProperties: true
          description: "The signal variables as a JSON object."
          type: "object"
        tenantId:
          description: "The ID of the tenant that owns the signal."
          allOf:
            - $ref: "#/components/schemas/TenantId"
      required:
        - "signalName"
    SignalBroadcastResult:
      type: "object"
      required:
        - "tenantId"
        - "signalKey"
      properties:
        tenantId:
          description: "The tenant ID of the signal that was broadcast."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        signalKey:
          allOf:
            - $ref: "#/components/schemas/SignalKey"
          description: "The unique ID of the signal that was broadcast."
    FormResult:
      type: "object"
      properties:
        tenantId:
          description: "The tenant ID of the form."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        formId:
          description: "The user-provided identifier of the form."
          type: "string"
        schema:
          description: "The form content."
          type: "object"
        version:
          description: "The version of the the deployed form."
          type: "integer"
        formKey:
          allOf:
            - $ref: "#/components/schemas/FormKey"
          description: "The assigned key, which acts as a unique identifier for\
                \ this form."
    ResourceResult:
      type: "object"
      properties:
        resourceName:
          description: "The resource name from which this resource was parsed."
          type: "string"
        version:
          description: "The assigned resource version."
          type: "integer"
          format: "int32"
        versionTag:
          description: "The version tag of this resource."
          type: "string"
        resourceId:
          description: "The resource ID of this resource."
          type: "string"
        tenantId:
          description: "The tenant ID of this resource."
          allOf:
            - $ref: "#/components/schemas/TenantId"
        resourceKey:
          allOf:
            - $ref: "#/components/schemas/ResourceKey"
          description: "The unique key of this resource."
    BatchOperationTypeEnum:
      description: "The type of the batch operation."
      type: "string"
      enum:
        - "CANCEL_PROCESS_INSTANCE"
        - "RESOLVE_INCIDENT"
        - "MIGRATE_PROCESS_INSTANCE"
        - "MODIFY_PROCESS_INSTANCE"
        - "DELETE_PROCESS_INSTANCE"
        - "ADD_VARIABLE"
        - "UPDATE_VARIABLE"
        - "DELETE_DECISION_DEFINITION"
        - "DELETE_PROCESS_DEFINITION"
    BatchOperationCreatedResult:
      description: "The created batch operation."
      type: "object"
      properties:
        batchOperationKey:
          allOf:
            - $ref: "#/components/schemas/BatchOperationKey"
          description: "Key of the batch operation."
        batchOperationType:
          $ref: "#/components/schemas/BatchOperationTypeEnum"
    BatchOperationSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "batchOperationKey"
            - "operationType"
            - "state"
            - "startDate"
            - "endDate"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    BatchOperationSearchQuery:
      description: "Batch operation search request."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/BatchOperationSearchQuerySortRequest"
        filter:
          description: "The batch operation search filters."
          allOf:
            - $ref: "#/components/schemas/BatchOperationFilter"
    BatchOperationFilter:
      description: "Batch operation filter request."
      type: "object"
      properties:
        batchOperationKey:
          description: "The key (or operate legacy ID) of the batch operation."
          allOf:
            - $ref: "#/components/schemas/BasicStringFilterProperty"
        operationType:
          description: "The type of the batch operation."
          allOf:
            - $ref: "#/components/schemas/BatchOperationTypeFilterProperty"
        state:
          description: "The state of the batch operation."
          allOf:
            - $ref: "#/components/schemas/BatchOperationStateFilterProperty"
    BatchOperationTypeFilterProperty:
      description: "BatchOperationTypeEnum property with full advanced search capabilities."
      type: "object"
      oneOf:
        - type: "string"
          title: "Exact match"
          description: "Matches the value exactly."
          allOf:
            - $ref: "#/components/schemas/BatchOperationTypeEnum"
        - $ref: "#/components/schemas/AdvancedBatchOperationTypeFilter"
    AdvancedBatchOperationTypeFilter:
      title: "Advanced filter"
      description: "Advanced BatchOperationTypeEnum filter."
      type: "object"
      properties:
        $eq:
          description: "Checks for equality with the provided value."
          allOf:
            - $ref: "#/components/schemas/BatchOperationTypeEnum"
        $neq:
          description: "Checks for inequality with the provided value."
          allOf:
            - $ref: "#/components/schemas/BatchOperationTypeEnum"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/BatchOperationTypeEnum"
        $like:
          $ref: "#/components/schemas/LikeFilterProperty"
    BatchOperationStateFilterProperty:
      description: "BatchOperationStateEnum property with full advanced search capabilities."
      type: "object"
      oneOf:
        - type: "string"
          title: "Exact match"
          description: "Matches the value exactly."
          allOf:
            - $ref: "#/components/schemas/BatchOperationStateEnum"
        - $ref: "#/components/schemas/AdvancedBatchOperationStateFilter"
    AdvancedBatchOperationStateFilter:
      title: "Advanced filter"
      description: "Advanced BatchOperationStateEnum filter."
      type: "object"
      properties:
        $eq:
          description: "Checks for equality with the provided value."
          allOf:
            - $ref: "#/components/schemas/BatchOperationStateEnum"
        $neq:
          description: "Checks for inequality with the provided value."
          allOf:
            - $ref: "#/components/schemas/BatchOperationStateEnum"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/BatchOperationStateEnum"
        $like:
          $ref: "#/components/schemas/LikeFilterProperty"
    BatchOperationStateEnum:
      description: "The state, one of ACTIVE, COMPLETED, TERMINATED."
      enum:
        - "CREATED"
        - "ACTIVE"
        - "SUSPENDED"
        - "COMPLETED"
        - "PARTIALLY_COMPLETED"
        - "CANCELED"
    BatchOperationItemSearchQuerySortRequest:
      type: "object"
      properties:
        field:
          description: "The field to sort by."
          type: "string"
          enum:
            - "batchOperationKey"
            - "itemKey"
            - "processInstanceKey"
            - "state"
        order:
          $ref: "#/components/schemas/SortOrderEnum"
      required:
        - "field"
    BatchOperationItemSearchQuery:
      description: "Batch operation item search request."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryRequest"
      properties:
        sort:
          description: "Sort field criteria."
          type: "array"
          items:
            $ref: "#/components/schemas/BatchOperationItemSearchQuerySortRequest"
        filter:
          description: "The batch operation search filters."
          allOf:
            - $ref: "#/components/schemas/BatchOperationItemFilter"
    BatchOperationItemFilter:
      description: "Batch operation item filter request."
      type: "object"
      properties:
        batchOperationKey:
          description: "The key (or operate legacy ID) of the batch operation."
          allOf:
            - $ref: "#/components/schemas/BasicStringFilterProperty"
        itemKey:
          description: "The key of the item, e.g. a process instance key."
          allOf:
            - $ref: "#/components/schemas/BasicStringFilterProperty"
        processInstanceKey:
          description: "The process instance key of the processed item."
          oneOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
            - $ref: "#/components/schemas/AdvancedProcessInstanceKeyFilter"
        state:
          type: "string"
          description: "The state of the batch operation."
          allOf:
            - $ref: "#/components/schemas/BatchOperationItemStateFilterProperty"
    BatchOperationItemStateFilterProperty:
      description: "BatchOperationItemStateEnum property with full advanced search\
        \ capabilities."
      type: "object"
      oneOf:
        - type: "string"
          title: "Exact match"
          description: "Matches the value exactly."
          allOf:
            - $ref: "#/components/schemas/BatchOperationItemStateEnum"
        - $ref: "#/components/schemas/AdvancedBatchOperationItemStateFilter"
    AdvancedBatchOperationItemStateFilter:
      title: "Advanced filter"
      description: "Advanced BatchOperationItemStateEnum filter."
      type: "object"
      properties:
        $eq:
          description: "Checks for equality with the provided value."
          allOf:
            - $ref: "#/components/schemas/BatchOperationItemStateEnum"
        $neq:
          description: "Checks for inequality with the provided value."
          allOf:
            - $ref: "#/components/schemas/BatchOperationItemStateEnum"
        $exists:
          description: "Checks if the current property exists."
          type: "boolean"
        $in:
          description: "Checks if the property matches any of the provided values."
          type: "array"
          items:
            $ref: "#/components/schemas/BatchOperationItemStateEnum"
        $like:
          $ref: "#/components/schemas/LikeFilterProperty"
    BatchOperationItemStateEnum:
      description: "The state, one of ACTIVE, COMPLETED, TERMINATED."
      enum:
        - "ACTIVE"
        - "COMPLETED"
        - "CANCELED"
        - "FAILED"
    BatchOperationSearchQueryResult:
      description: "The batch operation search query result."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching batch operations."
          type: "array"
          items:
            $ref: "#/components/schemas/BatchOperationResponse"
    BatchOperationResponse:
      type: "object"
      properties:
        batchOperationKey:
          allOf:
            - $ref: "#/components/schemas/BatchOperationKey"
          description: "Key or (Operate Legacy ID = UUID) of the batch operation."
        state:
          description: "The state of the batch operation."
          type: "string"
          enum:
            - "CREATED"
            - "ACTIVE"
            - "SUSPENDED"
            - "COMPLETED"
            - "PARTIALLY_COMPLETED"
            - "CANCELED"
            - "INCOMPLETED"
        batchOperationType:
          $ref: "#/components/schemas/BatchOperationTypeEnum"
        startDate:
          type: "string"
          description: "The start date of the batch operation."
          format: "date-time"
        endDate:
          type: "string"
          description: "The end date of the batch operation."
          format: "date-time"
        operationsTotalCount:
          type: "integer"
          description: "The total number of items contained in this batch operation."
          format: "int32"
        operationsFailedCount:
          type: "integer"
          description: "The number of items which failed during execution of the batch\
            \ operation. (e.g. because they are rejected by the Zeebe engine)."
          format: "int32"
        operationsCompletedCount:
          type: "integer"
          description: "The number of successfully completed tasks."
          format: "int32"
        errors:
          description: "The errors that occurred per partition during the batch operation."
          type: "array"
          items:
            $ref: "#/components/schemas/BatchOperationError"
    BatchOperationError:
      type: "object"
      properties:
        partitionId:
          description: "The partition ID where the error occurred."
          type: "integer"
          format: "int32"
        type:
          description: "The type of the error that occurred during the batch operation."
          type: "string"
          enum:
            - "QUERY_FAILED"
            - "RESULT_BUFFER_SIZE_EXCEEDED"
        message:
          description: "The error message that occurred during the batch operation."
          type: "string"
    BatchOperationItemSearchQueryResult:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/SearchQueryResponse"
      properties:
        items:
          description: "The matching batch operations."
          type: "array"
          items:
            $ref: "#/components/schemas/BatchOperationItemResponse"
    BatchOperationItemResponse:
      type: "object"
      properties:
        operationType:
          $ref: "#/components/schemas/BatchOperationTypeEnum"
        batchOperationKey:
          allOf:
            - $ref: "#/components/schemas/BatchOperationKey"
          description: "The key (or operate legacy ID) of the batch operation."
        itemKey:
          description: "Key of the item, e.g. a process instance key."
          type: "string"
        processInstanceKey:
          allOf:
            - $ref: "#/components/schemas/ProcessInstanceKey"
          description: "the process instance key of the processed item."
        state:
          description: "State of the item."
          type: "string"
          enum:
            - "ACTIVE"
            - "COMPLETED"
            - "SKIPPED"
            - "CANCELED"
            - "FAILED"
        processedDate:
          description: "the date this item was processed."
          type: "string"
          format: "date-time"
        errorMessage:
          description: "the error message from the engine in case of a failed operation."
          type: "string"
    ProcessInstanceCancellationBatchOperationRequest:
      type: object
      description: |
        The process instance filter that defines which process instances should be canceled.
      properties:
        filter:
          $ref: "#/components/schemas/ProcessInstanceFilter"
      required:
        - filter
    ProcessInstanceIncidentResolutionBatchOperationRequest:
      type: object
      description: |
        The process instance filter that defines which process instances should have their incidents resolved.
      properties:
        filter:
          $ref: "#/components/schemas/ProcessInstanceFilter"
      required:
        - filter
    ProcessInstanceModificationBatchOperationRequest:
      type: "object"
      description: "The process instance filter to define on which process instances\
        \ tokens should be moved,\nas well as mapping instructions which active element\
        \ instances should be terminated and which\nnew element instances should be\
        \ activated\n"
      properties:
        filter:
          $ref: "#/components/schemas/ProcessInstanceFilter"
        moveInstructions:
          description: "Instructions describing which elements should be activated\
            \ in which scopes and which variables should be created."
          type: "array"
          items:
            $ref: "#/components/schemas/ProcessInstanceModificationMoveBatchOperationInstruction"
      required:
        - "filter"
        - "moveInstructions"
    ProcessInstanceModificationMoveBatchOperationInstruction:
      description: "Instructions describing a move operation. This instruction will\
        \ terminate all active elementInstance\nat sourceElementId and activate a\
        \ new element instance for each terminated one at targetElementId."
      type: "object"
      properties:
        sourceElementId:
          description: "The ID of the element that should be terminated."
          allOf:
            - $ref: "#/components/schemas/ElementId"
        targetElementId:
          description: "The ID of the element that should be activated."
          allOf:
            - $ref: "#/components/schemas/ElementId"
      required:
        - "sourceElementId"
        - "targetElementId"
    Tag:
      description: A tag. Needs to start with a letter; then alphanumerics, `_`, `-`, `:`, or `.`; length ≤ 100.
      example: "business_key:1234"
      format: "Tag"
      x-semantic-type: "Tag"
      type: "string"
      minLength: 1
      maxLength: 100
      pattern: '^[A-Za-z][A-Za-z0-9_\-:.]{0,99}$'
    TagSet:
      description: List of tags. Tags need to start with a letter; then alphanumerics, `_`, `-`, `:`, or `.`; length ≤ 100.
      type: array
      format: "string<Tag>[]"
      example: ["high-touch", "remediation"]
      items:
        $ref: '#/components/schemas/Tag'
      uniqueItems: true
      maxItems: 10
    TenantId:
      example: "customer-service"
      description: "The unique identifier of the tenant."
      format: "TenantId"
      type: "string"
      x-semantic-type: "TenantId"
      minLength: 1
      maxLength: 256
      pattern: "^(<default>|[A-Za-z0-9_@.+-]+)$"
    Username:
      type: "string"
      example: "swillis"
      format: "Username"
      description: "The unique name of a user."
      x-semantic-type: "Username"
      minLength: 1
      maxLength: 256
      pattern: "^(<default>|[A-Za-z0-9_@.+-]+)$"
    OperationMetadata:
      description: "Information about the operation effect characteristics. Suitable for reasoning about the idempotency and safety of operations"
      type: object
      discriminator:
        propertyName: kind
      oneOf:
        - $ref: '#/components/schemas/CommandOperation'
        - $ref: '#/components/schemas/QueryOperation'
        - $ref: '#/components/schemas/CreateOperation'
        - $ref: "#/components/schemas/PatchOperation"
        - $ref: "#/components/schemas/DeleteOperation"
        - $ref: "#/components/schemas/EventOperation"
        - $ref: "#/components/schemas/UpdateOperation"
        - $ref: "#/components/schemas/BatchCommandOperation"
    CommandOperation:
      description: "A non-idempotent state transition / process action"
      type: "object"
      properties:
        kind:
          type: "string"
          enum: ["command"]
        idempotent:
          description: "Idempotent operations cause at-most one effect regardless of how many times that are called."
          type: "boolean"
          default: false
        safe:
          description: "Safe operations do not mutate the state of the Camunda engine."
          type: boolean
          default: false
      required: ["kind"]
    QueryOperation:
      description: "A pure read operation. May return a different state with each call, but causes no effect with each call."
      type: "object"
      properties:
        kind:
          type: "string"
          enum: ["query"]
        idempotent:
          description: "Idempotent operations cause at-most one effect regardless of how many times that are called."
          type: "boolean"
          default: true
        safe:
          description: "Safe operations do not mutate the state of the Camunda engine."
          type: "boolean"
          default: true
      required: ["kind"]
    CreateOperation:
      description: "Creates a new resource. The duplicatePolicy describes what happens when you make the same request more than once."
      type: "object"
      properties:
        kind:
          type: "string"
          enum: ["create"]
        idempotent:
          description: "Idempotent operations cause at-most one effect regardless of how many times that are called. Explicit override; otherwise inferred from duplicatePolicy."
          type: "boolean"
          default: false
        safe:
          description: "Safe operations do not mutate state."
          type: "boolean"
          default: false
        duplicatePolicy:
          description: "Server behavior when the identical create request is repeated:\
            \n - conflict (subsequent identical request → 409; creates none; NOT idempotent)\
            \n - return-existing (subsequent identical request → 200/201 with same representation; idempotent)\
            \n - ignore (subsequent identical request → 2xx minimal body, no new resource; idempotent)\
            \n - upsert (creates if absent, otherwise updates in place producing same final state; idempotent)\
            \n - merge (each call adds/accumulates something; NOT idempotent)\
            \n - batch-partial (mixed: per item may create or conflict; whole-call classification becomes non-idempotent unless every item stabilized)"
          type: "string"
          enum: ["conflict", "return-existing", "ignore", "upsert", "merge", "batch-partial"]
        idempotencyMechanism:
          description: "How this operation calculates idempotency:\
            \ - natural-key (server uses unique natural key(s) in body/path)\
            \ - body-hash (semantic or byte hash dedupe)\
            \ - idempotency-key (client supplies Idempotency-Key header)\
            \ - server-token (client obtains token then submits)\
            \ - none (default)"
          type: "string"
          enum: ["natural-key", "body-hash", "idempotency-key", "server-token", "none"]
          default: "none"
        idempotencyScope:
          description: "Scope within which idempotency applies (resource = same logical resource identity, request = exact same payload, key+payload = Idempotency-Key + payload tuple)."
          type: "string"
          enum: ["resource", "request", "key+payload"]
          default: "request"
      required: ["kind", "duplicatePolicy"]
    PatchOperation:
      description: "Updates a resource."
      type: "object"
      properties:
        kind:
          type: "string"
          enum: ["patch"]
        idempotent:
          description: "Idempotent operations cause at-most one effect regardless of how many times that are called."
          type: "boolean"
          default: false
        safe:
          description: "Safe operations do not mutate the state of the Camunda engine."
          type: "boolean"
          default: false
      required: ["kind"]
    DeleteOperation:
      description: "Deletes a resource."
      type: "object"
      properties:
        kind:
          type: "string"
          enum: ["delete"]
        idempotent:
          description: "Idempotent operations cause at-most one effect regardless of how many times that are called."
          type: "boolean"
          default: true
        safe:
          description: "Safe operations do not mutate the state of the Camunda engine."
          type: "boolean"
          default: false
      required: ["kind"]
    EventOperation:
      description: "Fire-and-forget notification. May fan out."
      type: "object"
      properties:
        kind:
          type: "string"
          enum: ["event"]
        idempotent:
          description: "Idempotent operations cause at-most one effect regardless of how many times that are called."
          type: "boolean"
          default: false
        safe:
          description: "Safe operations do not mutate the state of the Camunda engine."
          type: "boolean"
          default: false
      required: ["kind"]
    UpdateOperation:
      description: "Updates a resource."
      type: "object"
      properties:
        kind:
          type: "string"
          enum: ["update"]
        idempotent:
          description: "Idempotent operations cause at-most one effect regardless of how many times that are called."
          type: "boolean"
          default: true
        safe:
          description: "Safe operations do not mutate the state of the Camunda engine."
          type: "boolean"
          default: false
      required: ["kind"]
    BatchCommandOperation:
      description: "Updates a resource."
      type: object
      properties:
        kind:
          type: "string"
          enum: ["batch-command"]
        idempotent:
          description: "Idempotent operations cause at-most one effect regardless of how many times that are called."
          type: "boolean"
          default: true
        safe:
          description: "Safe operations do not mutate the state of the Camunda engine."
          type: "boolean"
          default: false
      required: ["kind"]
  responses:
    InternalServerError:
      description: "An internal error occurred while processing the request.\n"
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
    Unauthorized:
      description: "The request lacks valid authentication credentials."
      headers:
        WWW-Authenticate:
          schema:
            type: "string"
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
    Forbidden:
      description: "Forbidden. The request is not allowed."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
    InvalidData:
      description: "The provided data is not valid."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
    ServiceUnavailable:
      description: "The service is currently unavailable. This may happen only on\
        \ some requests where the system creates backpressure to prevent the server's\
        \ compute resources from being exhausted, avoiding more severe failures. Clients\
        \ are recommended to eventually retry those requests after a backoff period.\
        \ You can learn more about the backpressure mechanism here: https://docs.camunda.io/docs/components/zeebe/technical-concepts/internal-processing/#handling-backpressure\
        \ .\n"
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
  securitySchemes:
    BearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
