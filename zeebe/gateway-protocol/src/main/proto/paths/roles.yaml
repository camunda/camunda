# Role endpoints
/roles:
  post:
    tags:
      - Role
    operationId: createRole
    summary: Create role
    description: Create a new role.
    requestBody:
      content:
        application/json:
          schema:
            $ref: '../schemas/roles/role-models.yaml#/RoleCreateRequest'
    responses:
      "201":
        description: The role was created successfully.
        content:
          application/json:
            schema:
              $ref: '../schemas/roles/role-models.yaml#/RoleCreateResult'
      "400":
        $ref: '../responses/common-responses.yaml#/InvalidData'
      "401":
        $ref: '../responses/common-responses.yaml#/Unauthorized'
      "403":
        $ref: '../responses/common-responses.yaml#/Forbidden'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
      "503":
        $ref: '../responses/common-responses.yaml#/ServiceUnavailable'
    x-eventually-consistent: false

/roles/search:
  post:
    tags:
      - Role
    operationId: searchRoles
    summary: Search roles
    description: Search for roles based on given criteria.
    requestBody:
      required: false
      content:
        application/json:
          schema:
            $ref: '../schemas/roles/role-models.yaml#/RoleSearchQueryRequest'
    responses:
      "200":
        description: The roles search result.
        content:
          application/json:
            schema:
              $ref: '../schemas/roles/role-models.yaml#/RoleSearchQueryResult'
      "400":
        $ref: '../responses/common-responses.yaml#/InvalidData'
      "401":
        $ref: '../responses/common-responses.yaml#/Unauthorized'
      "403":
        $ref: '../responses/common-responses.yaml#/Forbidden'
      "500":
        description: An internal error occurred while processing the request.
    x-eventually-consistent: true

/roles/{roleId}:
  get:
    tags:
      - Role
    operationId: getRole
    summary: Get role
    description: Get a role by its ID.
    parameters:
      - name: roleId
        in: path
        required: true
        description: The role ID.
        schema:
          type: string
    responses:
      "200":
        description: The role is successfully returned.
        content:
          application/json:
            schema:
              $ref: '../schemas/roles/role-models.yaml#/RoleResult'
      "401":
        $ref: '../responses/common-responses.yaml#/Unauthorized'
      "403":
        $ref: '../responses/common-responses.yaml#/Forbidden'
      "404":
        description: The role with the given ID was not found.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
    x-eventually-consistent: true

  put:
    tags:
      - Role
    operationId: updateRole
    summary: Update role
    description: Update a role with the given ID.
    parameters:
      - name: roleId
        in: path
        required: true
        description: The role ID.
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/roles/role-models.yaml#/RoleUpdateRequest'
    responses:
      "200":
        description: The role was updated successfully.
        content:
          application/json:
            schema:
              $ref: '../schemas/roles/role-models.yaml#/RoleUpdateResult'
      "400":
        $ref: '../responses/common-responses.yaml#/InvalidData'
      "401":
        $ref: '../responses/common-responses.yaml#/Unauthorized'
      "404":
        description: The role with the ID is not found.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
      "503":
        $ref: '../responses/common-responses.yaml#/ServiceUnavailable'
    x-eventually-consistent: false

  delete:
    tags:
      - Role
    operationId: deleteRole
    summary: Delete role
    description: Deletes the role with the given ID.
    parameters:
      - name: roleId
        in: path
        required: true
        description: The role ID.
        schema:
          type: string
    responses:
      "204":
        description: The role was deleted successfully.
      "401":
        $ref: '../responses/common-responses.yaml#/Unauthorized'
      "404":
        description: The role with the ID was not found.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
      "503":
        $ref: '../responses/common-responses.yaml#/ServiceUnavailable'
    x-eventually-consistent: false

/roles/{roleId}/users/{username}:
  put:
    tags:
      - Role
    operationId: assignRoleToUser
    summary: Assign a role to a user
    description: Assigns the specified role to the user. The user will inherit the authorizations associated with this role.
    parameters:
      - name: roleId
        in: path
        required: true
        description: The role ID.
        schema:
          type: string
      - name: username
        in: path
        required: true
        description: The user username.
        schema:
          $ref: '../schemas/common/identifiers.yaml#/Username'
    responses:
      "204":
        description: The role was assigned successfully to the user.
      "400":
        $ref: '../responses/common-responses.yaml#/InvalidData'
      "403":
        $ref: '../responses/common-responses.yaml#/Forbidden'
      "404":
        description: The role or user with the given ID or username was not found.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "409":
        description: The role is already assigned to the user with the given ID.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
      "503":
        $ref: '../responses/common-responses.yaml#/ServiceUnavailable'
    x-eventually-consistent: false

  delete:
    tags:
      - Role
    operationId: unassignRoleFromUser
    summary: Unassign a role from a user
    description: Unassigns a role from a user. The user will no longer inherit the authorizations associated with this role.
    parameters:
      - name: roleId
        in: path
        required: true
        description: The role ID.
        schema:
          type: string
      - name: username
        in: path
        required: true
        description: The user username.
        schema:
          $ref: '../schemas/common/identifiers.yaml#/Username'
    responses:
      "204":
        description: The role was unassigned successfully from the user.
      "400":
        $ref: '../responses/common-responses.yaml#/InvalidData'
      "403":
        $ref: '../responses/common-responses.yaml#/Forbidden'
      "404":
        description: The role or user with the given ID or username was not found.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
      "503":
        $ref: '../responses/common-responses.yaml#/ServiceUnavailable'
    x-eventually-consistent: false

/roles/{roleId}/users/search:
  post:
    tags:
      - Role
    operationId: searchUsersForRole
    summary: Search role users
    description: Search users with assigned role.
    parameters:
      - name: roleId
        in: path
        required: true
        description: The role ID.
        schema:
          type: string
    requestBody:
      required: false
      content:
        application/json:
          schema:
            $ref: '../schemas/roles/role-models.yaml#/RoleUserSearchQueryRequest'
    responses:
      "200":
        description: The users with the assigned role.
        content:
          application/json:
            schema:
              $ref: '../schemas/roles/role-models.yaml#/RoleUserSearchResult'
      "400":
        $ref: '../responses/common-responses.yaml#/InvalidData'
      "401":
        $ref: '../responses/common-responses.yaml#/Unauthorized'
      "403":
        $ref: '../responses/common-responses.yaml#/Forbidden'
      "404":
        description: The role with the given ID was not found.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
    x-eventually-consistent: true

/roles/{roleId}/clients/{clientId}:
  put:
    tags:
      - Role
    operationId: assignRoleToClient
    summary: Assign a role to a client
    description: Assigns the specified role to the client. The client will inherit the authorizations associated with this role.
    parameters:
      - name: roleId
        in: path
        required: true
        description: The role ID.
        schema:
          type: string
      - name: clientId
        in: path
        required: true
        description: The client ID.
        schema:
          type: string
    responses:
      "204":
        description: The role was assigned successfully to the client.
      "400":
        $ref: '../responses/common-responses.yaml#/InvalidData'
      "403":
        $ref: '../responses/common-responses.yaml#/Forbidden'
      "404":
        description: The role with the given ID was not found.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "409":
        description: The role was already assigned to the client with the given ID.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
      "503":
        $ref: '../responses/common-responses.yaml#/ServiceUnavailable'
    x-eventually-consistent: false

  delete:
    tags:
      - Role
    operationId: unassignRoleFromClient
    summary: Unassign a role from a client
    description: Unassigns the specified role from the client. The client will no longer inherit the authorizations associated with this role.
    parameters:
      - name: roleId
        in: path
        required: true
        description: The role ID.
        schema:
          type: string
      - name: clientId
        in: path
        required: true
        description: The client ID.
        schema:
          type: string
    responses:
      "204":
        description: The role was unassigned successfully from the client.
      "400":
        $ref: '../responses/common-responses.yaml#/InvalidData'
      "403":
        $ref: '../responses/common-responses.yaml#/Forbidden'
      "404":
        description: The role or client with the given ID or username was not found.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
      "503":
        $ref: '../responses/common-responses.yaml#/ServiceUnavailable'
    x-eventually-consistent: false

/roles/{roleId}/clients/search:
  post:
    tags:
      - Role
    operationId: searchClientsForRole
    summary: Search role clients
    description: Search clients with assigned role.
    parameters:
      - name: roleId
        in: path
        required: true
        description: The role ID.
        schema:
          type: string
    requestBody:
      required: false
      content:
        application/json:
          schema:
            $ref: '../schemas/roles/role-models.yaml#/RoleClientSearchQueryRequest'
    responses:
      "200":
        description: The clients with the assigned role.
        content:
          application/json:
            schema:
              $ref: '../schemas/roles/role-models.yaml#/RoleClientSearchResult'
      "400":
        $ref: '../responses/common-responses.yaml#/InvalidData'
      "401":
        $ref: '../responses/common-responses.yaml#/Unauthorized'
      "403":
        $ref: '../responses/common-responses.yaml#/Forbidden'
      "404":
        description: The role with the given ID was not found.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
    x-eventually-consistent: true

/roles/{roleId}/groups/{groupId}:
  put:
    tags:
      - Role
    operationId: assignRoleToGroup
    summary: Assign a role to a group
    description: Assigns the specified role to the group. Every member of the group (user or client) will inherit the authorizations associated with this role.
    parameters:
      - name: roleId
        in: path
        required: true
        description: The role ID.
        schema:
          type: string
      - name: groupId
        in: path
        required: true
        description: The group ID.
        schema:
          type: string
    responses:
      "204":
        description: The role was assigned successfully to the group.
      "400":
        $ref: '../responses/common-responses.yaml#/InvalidData'
      "403":
        $ref: '../responses/common-responses.yaml#/Forbidden'
      "404":
        description: The role or group with the given ID was not found.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "409":
        description: The role is already assigned to the group with the given ID.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
      "503":
        $ref: '../responses/common-responses.yaml#/ServiceUnavailable'
    x-eventually-consistent: false

  delete:
    tags:
      - Role
    operationId: unassignRoleFromGroup
    summary: Unassign a role from a group
    description: Unassigns the specified role from the group. All group members (user or client) no longer inherit the authorizations associated with this role.
    parameters:
      - name: roleId
        in: path
        required: true
        description: The role ID.
        schema:
          type: string
      - name: groupId
        in: path
        required: true
        description: The group ID.
        schema:
          type: string
    responses:
      "204":
        description: The role was unassigned successfully from the group.
      "400":
        $ref: '../responses/common-responses.yaml#/InvalidData'
      "403":
        $ref: '../responses/common-responses.yaml#/Forbidden'
      "404":
        description: The role or group with the given ID was not found.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
      "503":
        $ref: '../responses/common-responses.yaml#/ServiceUnavailable'
    x-eventually-consistent: false

/roles/{roleId}/groups/search:
  post:
    tags:
      - Role
    operationId: searchGroupsForRole
    summary: Search role groups
    description: Search groups with assigned role.
    parameters:
      - name: roleId
        in: path
        required: true
        description: The role ID.
        schema:
          type: string
    requestBody:
      required: false
      content:
        application/json:
          schema:
            $ref: '../schemas/roles/role-models.yaml#/RoleGroupSearchQueryRequest'
    responses:
      "200":
        description: The groups with assigned role.
        content:
          application/json:
            schema:
              $ref: '../schemas/roles/role-models.yaml#/RoleGroupSearchResult'
      "400":
        $ref: '../responses/common-responses.yaml#/InvalidData'
      "401":
        $ref: '../responses/common-responses.yaml#/Unauthorized'
      "403":
        $ref: '../responses/common-responses.yaml#/Forbidden'
      "404":
        description: The role with the given ID was not found.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
    x-eventually-consistent: true

/roles/{roleId}/mapping-rules/{mappingRuleId}:
  put:
    tags:
      - Role
    operationId: assignRoleToMappingRule
    summary: Assign a role to a mapping rule
    description: Assigns a role to a mapping rule.
    parameters:
      - name: roleId
        in: path
        required: true
        description: The role ID.
        schema:
          type: string
      - name: mappingRuleId
        in: path
        required: true
        description: The mapping rule ID.
        schema:
          type: string
    responses:
      "204":
        description: The role was assigned successfully to the mapping rule.
      "400":
        $ref: '../responses/common-responses.yaml#/InvalidData'
      "403":
        $ref: '../responses/common-responses.yaml#/Forbidden'
      "404":
        description: The role or mapping rule with the given ID was not found.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "409":
        description: The role is already assigned to the mapping rule with the given ID.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
      "503":
        $ref: '../responses/common-responses.yaml#/ServiceUnavailable'
    x-eventually-consistent: false

  delete:
    tags:
      - Role
    operationId: unassignRoleFromMappingRule
    summary: Unassign a role from a mapping rule
    description: Unassigns a role from a mapping rule.
    parameters:
      - name: roleId
        in: path
        required: true
        description: The role ID.
        schema:
          type: string
      - name: mappingRuleId
        in: path
        required: true
        description: The mapping rule ID.
        schema:
          type: string
    responses:
      "204":
        description: The role was unassigned successfully from the mapping rule.
      "400":
        $ref: '../responses/common-responses.yaml#/InvalidData'
      "403":
        $ref: '../responses/common-responses.yaml#/Forbidden'
      "404":
        description: The role or mapping rule with the given ID was not found.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
      "503":
        $ref: '../responses/common-responses.yaml#/ServiceUnavailable'
    x-eventually-consistent: false

/roles/{roleId}/mapping-rules/search:
  post:
    tags:
      - Role
    operationId: searchMappingRulesForRole
    summary: Search role mapping rules
    description: Search mapping rules with assigned role.
    parameters:
      - name: roleId
        in: path
        required: true
        description: The role ID.
        schema:
          type: string
    requestBody:
      required: false
      content:
        application/json:
          schema:
            $ref: '../schemas/mapping-rules/mapping-rule-models.yaml#/MappingRuleSearchQueryRequest'
    responses:
      "200":
        description: The mapping rules with assigned role.
        content:
          application/json:
            schema:
              $ref: '../schemas/search/search-models.yaml#/SearchQueryResponse'
      "400":
        $ref: '../responses/common-responses.yaml#/InvalidData'
      "401":
        $ref: '../responses/common-responses.yaml#/Unauthorized'
      "403":
        $ref: '../responses/common-responses.yaml#/Forbidden'
      "404":
        description: The role with the given ID was not found.
        content:
          application/problem+json:
            schema:
              $ref: '../schemas/common/problem-detail.yaml#/ProblemDetail'
      "500":
        $ref: '../responses/common-responses.yaml#/InternalServerError'
    x-eventually-consistent: true
