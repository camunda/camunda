# Variable domain schemas
VariableSearchQuerySortRequest:
  type: object
  properties:
    field:
      description: The field to sort by.
      type: string
      enum:
        - value
        - name
        - tenantId
        - variableKey
        - scopeKey
        - processInstanceKey
    order:
      $ref: '../common/enums.yaml#/SortOrderEnum'
  required:
    - field

VariableSearchQuery:
  description: Variable search query request.
  additionalProperties: false
  type: object
  allOf:
    - $ref: '../search/search-models.yaml#/SearchQueryRequest'
  properties:
    sort:
      description: Sort field criteria.
      type: array
      items:
        $ref: '#/VariableSearchQuerySortRequest'
    filter:
      $ref: '#/VariableFilter'
      description: The variable search filters.

VariableFilter:
  description: Variable filter request.
  type: object
  properties:
    name:
      $ref: '../common/filters.yaml#/StringFilterProperty'
      description: Name of the variable.
    value:
      $ref: '../common/filters.yaml#/StringFilterProperty'
      description: The value of the variable.
    tenantId:
      $ref: '../common/identifiers.yaml#/TenantId'
      description: Tenant ID of this variable.
    isTruncated:
      description: Whether the value is truncated or not.
      type: boolean
    variableKey:
      $ref: '../common/filters.yaml#/VariableKeyFilterProperty'
      description: The key for this variable.
    scopeKey:
      $ref: '../common/filters.yaml#/ScopeKeyFilterProperty'
      description: The key of the scope of this variable.
    processInstanceKey:
      $ref: '../common/filters.yaml#/ProcessInstanceKeyFilterProperty'
      description: The key of the process instance of this variable.

VariableSearchQueryResult:
  description: Variable search query response.
  type: object
  allOf:
    - $ref: '../search/search-models.yaml#/SearchQueryResponse'
  properties:
    items:
      description: The matching variables.
      type: array
      items:
        $ref: '#/VariableSearchResult'

VariableSearchResult:
  description: Variable search response item.
  type: object
  allOf:
    - $ref: '#/VariableResultBase'
  properties:
    value:
      description: Value of this variable. Can be truncated.
      type: string
    isTruncated:
      description: Whether the value is truncated or not.
      type: boolean

VariableResult:
  description: Variable search response item.
  type: object
  allOf:
    - $ref: '#/VariableResultBase'
  properties:
    value:
      description: Full value of this variable.
      type: string

VariableResultBase:
  description: Variable response item.
  type: object
  properties:
    name:
      description: Name of this variable.
      type: string
    tenantId:
      $ref: '../common/identifiers.yaml#/TenantId'
      description: Tenant ID of this variable.
    variableKey:
      allOf:
        - $ref: '../common/keys.yaml#/VariableKey'
      description: The key for this variable.
    scopeKey:
      allOf:
        - $ref: '../common/keys.yaml#/ScopeKey'
      description: The key of the scope of this variable.
    processInstanceKey:
      allOf:
        - $ref: '../common/keys.yaml#/ProcessInstanceKey'
      description: The key of the process instance of this variable.

VariableValueFilterProperty:
  type: object
  properties:
    name:
      type: string
      description: Name of the variable.
    value:
      allOf:
        - $ref: '../common/filters.yaml#/StringFilterProperty'
      description: The value of the variable.
  required:
    - name
    - value

SetVariableRequest:
  type: object
  additionalProperties: false
  properties:
    variables:
      description: JSON object representing the variables to set in the element’s scope.
      additionalProperties: true
      type: object
    local:
      description: |
        If set to true, the variables are merged strictly into the local scope (as specified by the `elementInstanceKey`).
        Otherwise, the variables are propagated to upper scopes and set at the outermost one.
        Let’s consider the following example:
        There are two scopes '1' and '2'.
        Scope '1' is the parent scope of '2'. The effective variables of the scopes are:
        1 => { "foo" : 2 }
        2 => { "bar" : 1 }
        An update request with elementInstanceKey as '2', variables { "foo" : 5 }, and local set
        to true leaves scope '1' unchanged and adjusts scope '2' to { "bar" : 1, "foo" 5 }.
        By default, with local set to false, scope '1' will be { "foo": 5 }
        and scope '2' will be { "bar" : 1 }.
      type: boolean
      default: false
    operationReference:
      $ref: '../common/keys.yaml#/OperationReference'
  required:
    - variables
