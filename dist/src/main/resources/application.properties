# General Spring configuration; enable graceful shutdown with a timeout per phase
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30s
logging.register-shutdown-hook=true
# Embedded HTTP server configuration for monitoring
# Defaults are picked from the previous Zeebe specific defaults for backwards compatibility
# We omit the use of management.server since that's only when you want to have two different servers
# In our case, we only have one server purely for management, so we should use the default server
# configurations
server.address=0.0.0.0
server.port=9600
# WebFlux/Reactor configuration
# Disable the default resource mappings (e.g. service static assets)
spring.web.resources.add-mappings=false
# The actual threading configuration is done via the Reactor properties; these are unfortunately
# not configured via Spring, but rather plain System.properties. Default values (where C is the
# number of available cores, are:
# - [0-2C] for any scheduled tasks, such as the delayed health indicators (default is [0, 10C])
# - [1-max(C, 4)] for the request handling event loop (defaults)
# These are either customized in each `main` (e.g. StandaloneBroker#main) that we have, or are plain
# defaults from the Reactor project.
# Default quiet period is 2s, meaning it waits for the server to be idle for 2 seconds before
# shutting down. This isn't very useful for a management server.
spring.reactor.netty.shutdown-quiet-period=0s
# General management configuration; disable all endpoints by default but exposes all enabled ones
# via web. Endpoints should be enabled individually based on the target application
management.endpoints.enabled-by-default=false
management.endpoints.web.exposure.include=*
# Health configuration; disable default health indicators. As it's unclear how to do this globally,
# only the ones which currently would get enabled are explicitly disabled.
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always
# Metrics related configurations
management.endpoint.prometheus.enabled=true
management.prometheus.metrics.export.enabled=true
# Allow runtime configuration of log levels
management.endpoint.loggers.enabled=true
# Allow viewing the config properties, but sanitize their outputs
management.endpoint.configprops.enabled=true
management.endpoint.configprops.show-values=always
management.endpoint.info.enabled=true
# Define keywords to sanitize in applicable endpoints; this will be applied to the configprops,
# beans, and if enabled, the environment endpoint as well
management.sanitize.keywords=user,pass,secret,accessKey,accountKey,token,\
  connectionString
# Disable specific autoconfiguration classes which are triggered automatically (e.g. creating an
# Elastic client which spawns 16 threads)
spring.autoconfigure.exclude=\
  org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration, \
  org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration, \
  org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration
