# General Spring configuration; enable graceful shutdown with a timeout per phase
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30s
logging.register-shutdown-hook=true
# The application name is the default name used by various services like OpenTelemetry
spring.application.name=Camunda
# REST server configuration
# This sever is enabled even for a standalone broker without any embedded gateway, in which case
# there will simply be no endpoints available.
server.address=0.0.0.0
server.port=8080
# Enable a richer error model for the REST server
spring.mvc.problemdetails.enabled=true
# by default disable thymeleaf to check any location which will be overriden by the webapps
spring.thymeleaf.check-template-location=false
# enable ant_path_matcher to support legacy regex in request mappings
spring.mvc.pathmatch.matching-strategy=ant_path_matcher
# Embedded HTTP server configuration for monitoring
# Defaults are picked from the previous Zeebe specific defaults for backwards compatibility
management.server.port=9600
management.server.address=0.0.0.0
# Explicitly disable SSL on the management server to prevent any REST API server
# SSL configuration from being implicitly applied to it
management.server.ssl.enabled=false
# Web/Servlet configuration
# Disable the default resource mappings (e.g. service static assets)
spring.web.resources.add-mappings=false
# General management configuration; disable all endpoints by default but exposes all enabled ones
# via web. Endpoints should be enabled individually based on the target application
management.endpoints.access.default=none
management.endpoints.web.exposure.include=*
# Health configuration; disable default health indicators. As it's unclear how to do this globally,
# only the ones which currently would get enabled are explicitly disabled.
management.endpoint.health.access=unrestricted
management.endpoint.health.show-details=always
management.health.defaults.enabled=false
# Configure Prometheus as the default enabled backend, for scraping
management.endpoint.prometheus.access=unrestricted
management.prometheus.metrics.export.enabled=true
# Disable the OpenTelemetry backend by default; can be enabled on demand by users
management.otlp.metrics.export.enabled=false
# Allow runtime configuration of log levels
management.endpoint.loggers.access=unrestricted
# Allow viewing the config properties, but sanitize their outputs
management.endpoint.configprops.access=unrestricted
management.endpoint.configprops.show-values=always
management.endpoint.info.access=unrestricted
# since springboot 3.4, we need to explicitly enable the custom actuator endpoints, as they are globally disabled by default
management.endpoint.backupHistory.access=unrestricted
management.endpoint.backupRuntime.access=unrestricted
management.endpoint.backups.access=unrestricted
management.endpoint.banning.access=unrestricted
management.endpoint.clock.access=unrestricted
management.endpoint.cluster.access=unrestricted
management.endpoint.exporters.access=unrestricted
management.endpoint.exporting.access=unrestricted
management.endpoint.flowControl.access=unrestricted
management.endpoint.jobstreams.access=unrestricted
management.endpoint.partitions.access=unrestricted
management.endpoint.rebalance.access=unrestricted
management.endpoint.usage-metrics.access=unrestricted
# Define keywords to sanitize in applicable endpoints; this will be applied to the configprops,
# beans, and if enabled, the environment endpoint as well
management.sanitize.keywords=user,pass,secret,accessKey,accountKey,connectionString
# Default user configuration
camunda.security.initialization.users[0].username=demo
camunda.security.initialization.users[0].password=demo
camunda.security.initialization.users[0].name=Demo
camunda.security.initialization.users[0].email=demo@demo.com
# Multipart file uploads
spring.servlet.multipart.max-file-size=4MB
spring.servlet.multipart.max-request-size=4MB
#
# RDBMS extension default properties
#
spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto=validate
spring.liquibase.enabled=false
# forward spring datasource properties
spring.datasource.url=${camunda.database.url:}
spring.datasource.username=${camunda.database.username:}
spring.datasource.password=${camunda.database.password:}
mybatis.mapper-locations:classpath:mapper/**/*-mapper.xml
# Security configuration
camunda.security.initialization.mappings[0].claimName=${INITIAL_CLAIM_NAME:oid}
camunda.security.initialization.mappings[0].claimValue=${INITIAL_CLAIM_VALUE}

# Disable specific autoconfiguration classes which are triggered automatically (e.g. creating an
# Elastic client which spawns 16 threads)
spring.autoconfigure.exclude=\
  org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, \
  org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration, \
  org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration, \
  org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchClientAutoConfiguration, \
  org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration, \
  org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, \
  org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, \
  org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration, \
  org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration
