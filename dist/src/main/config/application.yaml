# Zeebe Standalone Broker configuration file (with embedded gateway)

# This file is based on broker.standalone.yaml.template but stripped down to contain only a limited
# set of configuration options. These are a good starting point to get to know Zeebe.
# For advanced configuration options, have a look at the templates in this folder.

# !!! Note that this configuration is not suitable for running a standalone gateway. !!!
# If you want to run a standalone gateway node, please have a look at gateway.yaml.template

# ----------------------------------------------------
# Byte sizes
# For buffers and others must be specified as strings and follow the following
# format: "10U" where U (unit) must be replaced with KB = Kilobytes, MB = Megabytes or GB = Gigabytes.
# If unit is omitted then the default unit is simply bytes.
# Example:
# sendBufferSize = "16MB" (creates a buffer of 16 Megabytes)
#
# Time units
# Timeouts, intervals, and the likes, must be specified either in the standard ISO-8601 format used
# by java.time.Duration, or as strings with the following format: "VU", where:
#   - V is a numerical value (e.g. 1, 5, 10, etc.)
#   - U is the unit, one of: ms = Millis, s = Seconds, m = Minutes, or h = Hours
#
# Paths:
# Relative paths are resolved relative to the installation directory of the broker.
# ----------------------------------------------------

zeebe:
  broker:
    gateway:
      # Enable the embedded gateway to start on broker startup.
      # This setting can also be overridden using the environment variable ZEEBE_BROKER_GATEWAY_ENABLE.
      enable: true

      network:
        # Sets the port the embedded gateway binds to.
        # This setting can also be overridden using the environment variable ZEEBE_BROKER_GATEWAY_NETWORK_PORT.
        port: 26500

      security:
        # Enables TLS authentication between clients and the gateway
        # This setting can also be overridden using the environment variable ZEEBE_BROKER_GATEWAY_SECURITY_ENABLED.
        enabled: false

    data:
      # Specify a directory in which data is stored.
      # This setting can also be overridden using the environment variable ZEEBE_BROKER_DATA_DIRECTORY.
      directory: data
      # The size of data log segment files.
      # This setting can also be overridden using the environment variable ZEEBE_BROKER_DATA_LOGSEGMENTSIZE.
      logSegmentSize: 128MB
      # How often we take snapshots of streams (time unit)
      # This setting can also be overridden using the environment variable ZEEBE_BROKER_DATA_SNAPSHOTPERIOD.
      snapshotPeriod: 15m

    cluster:
      # Specifies the Zeebe cluster size.
      # This can also be overridden using the environment variable ZEEBE_BROKER_CLUSTER_CLUSTERSIZE.
      clusterSize: 1
      # Controls the replication factor, which defines the count of replicas per partition.
      # This can also be overridden using the environment variable ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR.
      replicationFactor: 1
      # Controls the number of partitions, which should exist in the cluster.
      # This can also be overridden using the environment variable ZEEBE_BROKER_CLUSTER_PARTITIONSCOUNT.
      partitionsCount: 1

    threads:
      # Controls the number of non-blocking CPU threads to be used.
      # WARNING: You should never specify a value that is larger than the number of physical cores
      # available. Good practice is to leave 1-2 cores for ioThreads and the operating
      # system (it has to run somewhere). For example, when running Zeebe on a machine
      # which has 4 cores, a good value would be 2.
      # This setting can also be overridden using the environment variable ZEEBE_BROKER_THREADS_CPUTHREADCOUNT
      cpuThreadCount: 2
      # Controls the number of io threads to be used.
      # This setting can also be overridden using the environment variable ZEEBE_BROKER_THREADS_IOTHREADCOUNT
      ioThreadCount: 2

camunda:
  # Unified Configuration
  data:
    secondary-storage:
      type: 'elasticsearch'
      elasticsearch:
        url: 'http://localhost:9200'
  # ---

  database:
    # Controls which database must be used, possible values: elasticsearch, opensearch
    # This setting can also be overridden using the environment variable CAMUNDA_DATABASE_TYPE
    type: elasticsearch
    # Sets the name of the cluster, default name is "elasticsearch"
    # This setting can also be overridden using the environment variable CAMUNDA_DATABASE_CLUSTERNAME
    clusterName: elasticsearch
    # Sets the database url.
    # This setting can also be overridden using the environment variable CAMUNDA_DATABASE_URL
    url: http://localhost:9200
  # Operate configuration properties
  operate:
    # Set operate username and password.
    # If user with <username> does not exist it will be created.
    # Default: demo/demo
    #username:
    #password:
    # ELS instance to store Operate data
    elasticsearch:
      # Cluster name
      clusterName: elasticsearch
    # Zeebe instance
    zeebe:
      # Gateway address
      gatewayAddress: localhost:26500
    # ELS instance to export Zeebe data to
    zeebeElasticsearch:
      # Cluster name
      clusterName: elasticsearch
      # Index prefix, configured in Zeebe Elasticsearch exporter
      prefix: zeebe-record
  # Tasklist configuration properties
  tasklist:
    # Set Tasklist username and password.
    # If user with <username> does not exist it will be created.
    # Default: demo/demo
    #username:
    #password:
    # ELS instance to store Tasklist data
    elasticsearch:
      # Cluster name
      clusterName: elasticsearch
    # Zeebe instance
    zeebe:
      # Gateway address
      gatewayAddress: localhost:26500
    # ELS instance to export Zeebe data to
    zeebeElasticsearch:
      # Cluster name
      clusterName: elasticsearch
      # Index prefix, configured in Zeebe Elasticsearch exporter
      prefix: zeebe-record
  security:
    # Configures authenticated access in the cluster. We support 3 different authentication modes:
    # - No authentication:
    #     No authentication is required for API access. Form-based authentication in the UI. Users and groups are managed in Identity.
    # - Basic Authentication:
    #     Basic authentication for API access. Form-based authentication in the UI. Users and groups are managed in Identity.
    # - OIDC:
    #     OpenID Connect with any compatible Identity Provider (for example, Keycloak, Microsoft EntraID, Okta).
    authentication:
      # Controls which authentication method is active, supported methods are 'basic' and 'oidc'.
      # If 'basic' is set, authentication will be done using basic authentication. Users need to be created.
      # See https://docs.camunda.io/docs/next/components/identity/user/ for instructions on how to do this.
      # If 'oidc' is set, authentication will be done using an external IdP.
      # See https://docs.camunda.io/docs/next/self-managed/components/management-identity/what-is-identity/ for instructions on hwo to set this up.
      # Note! This setting should be combined with the 'camunda.security.unprotectedApi' setting to fully manage authentications.
      # This setting can also be overridden using the environment variable CAMUNDA_SECURITY_AUTHENTICATION_METHOD.
      method: basic
      # Sets the API to protected or unprotected. If the API is unprotected, no authentication is required to access it.
      # Note! This setting should be combined with the 'camunda.security.method' setting to fully manage authentications.
      # This setting can also be overridden using the environment variable CAMUNDA_SECURITY_AUTHENTICATION_UNPROTECTEDAPI.
      unprotectedApi: false
    authorizations:
      # Controls whether authorization checks are enabled or not.
      # See https://docs.camunda.io/docs/next/components/concepts/access-control/authorizations/ for more information on how to set up authorizations.
      # This setting can also be overridden using the environment variable CAMUNDA_SECURITY_AUTHORIZATIONS_ENABLED.
      enabled: true
    multiTenancy:
        # Controls whether multi-tenancy checks are enforced or not.
        # See https://docs.camunda.io/docs/next/self-managed/concepts/multi-tenancy/ for more information regarding multi-tenancy.
        # This setting can also be overridden using the environment variable CAMUNDA_SECURITY_MULTITENANCY_CHECKSENABLED.
      checksEnabled: false
      # Controls whether the tenants management API is enabled or not.
      # See https://docs.camunda.io/docs/next/self-managed/concepts/multi-tenancy/ for more information regarding multi-tenancy.
      # This setting can also be overridden using the environment variable CAMUNDA_SECURITY_MULTITENANCY_APIENABLED.
      apiEnabled: true
