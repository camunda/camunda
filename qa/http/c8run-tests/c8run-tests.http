###
# @no-cookie-jar
# @name login
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/login?username=demo&password=demo
Content-Type: application/json
Accept: application/json

> {%
  client.test("Login should succeed and set cookies", function () {
    client.assert(response.status === 204, "Login should succeed");

    const setCookieHeaders = response.headers.valuesOf("Set-Cookie");
    if (setCookieHeaders && setCookieHeaders.length > 0) {
      let sessionCookie = null;
      let csrfCookie = null;

      setCookieHeaders.forEach(cookie => {
        if (cookie.includes("camunda-session")) {
          sessionCookie = cookie.split(';')[0].split('=')[1];
        }
        if (cookie.includes("X-CSRF-TOKEN")) {
          csrfCookie = cookie.split(';')[0].split('=')[1];
        }
      });

      if (sessionCookie) {
        client.global.set("session_cookie", sessionCookie);
        console.log("Session cookie: " + sessionCookie);
      }
      if (csrfCookie) {
        client.global.set("csrf_cookie", csrfCookie);
        console.log("CSRF cookie: " + csrfCookie);
      }
    }
  });
%}

###
# @name test-get-x-csrf-token-header
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/authentication/me
Accept: application/json
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}

> {%
  client.test("Authentication request should succeed and return CSRF token", function () {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.headers.valueOf("x-csrf-token"), "CSRF token header is missing");
    client.global.set("csrf_token", response.headers.valueOf("x-csrf-token"));
    console.log("CSRF Token from header: " + client.global.get("csrf_token"));
  });
%}

###
# @name deploy-process-diagram
< {%
  import {wait} from "../js/wait"
  wait(1)
%}
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/deployments
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Accept: application/json
Content-Type: multipart/form-data; boundary=boundary123

--boundary123
Content-Disposition: form-data; name="resources"; filename="User Task Test Process.bpmn"
Content-Type: application/octet-stream

< ./User Task Processes/User Task Test Process.bpmn
--boundary123
Content-Disposition: form-data; name="resources"; filename="New form A.form"
Content-Type: application/octet-stream

< ./User Task Processes/New form A.form
--boundary123
Content-Disposition: form-data; name="resources"; filename="New form B.form"
Content-Type: application/octet-stream

< ./User Task Processes/New form B.form
--boundary123
Content-Disposition: form-data; name="resources"; filename="New form C.form"
Content-Type: application/octet-stream

< ./User Task Processes/New form C.form
--boundary123--


> {%
  client.test("Process deployment is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
    const processKey = response.body.deployments[0].processDefinition.processDefinitionKey;
    const formKey = response.body.deployments[1].form.formKey;
    client.global.set("PROCESS_DEFINITION_KEY", processKey);
    client.global.set("FORM_KEY", formKey);
  });
%}

###
< {%
  import {wait} from "../js/wait"
  wait(1)
%}
# @name process-definition-search-authorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-definitions/search
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "processDefinitionKey",
      "order": "ASC"
    }
  ],
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("Process definition search is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });
%}

###
< {%
  import {wait} from "../js/wait"
  wait(4)
%}
# @name get-process-definition-authorized
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-definitions/{{PROCESS_DEFINITION_KEY}}
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Process definition retrieval is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });
%}

###
# @name get-process-definition-xml-authorized
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-definitions/{{PROCESS_DEFINITION_KEY}}/xml
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: text/xml

> {%
  client.test("Process definition retrieval is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });
%}

###
# @name get-process-definition-start-form-with-no-form-attached-authorized
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-definitions/{{PROCESS_DEFINITION_KEY}}/form
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Process definition start form retrieval is successful, but no form is attached", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

###
# @name get-process-definition-statistics-authorized
< {%
  import {wait} from "../js/wait"
  wait(2)
%}
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-definitions/{{PROCESS_DEFINITION_KEY}}/statistics/element-instances
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{}

> {%
  client.test("Process definition retrieval is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
    client.assert(Array.isArray(response.body.items), "items must be array");
    client.assert(response.body.items.length > 0, "Expect at least one element");
  });
%}

###
# @name create-process-instance
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "processDefinitionKey": "{{PROCESS_DEFINITION_KEY}}",
  "variables": {}
}

> {%
  client.test("Create process instance is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });
let expectedDefinitionKey = client.global.get("PROCESS_DEFINITION_KEY");
  client.test("Response should contain process key", function () {
    client.assert(response.body.processDefinitionKey === expectedDefinitionKey, "Process definition key was not returned");
    client.global.set("PROCESS_INSTANCE_KEY", response.body.processInstanceKey);
  });
%}

###
# @name get-process-instance
< {%
  import {wait} from "../js/wait"
  wait(4)
%}
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances/{{PROCESS_INSTANCE_KEY}}
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Process instance is successful returned", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  let expectedInstanceKey = client.global.get("PROCESS_INSTANCE_KEY");
  client.test("Response should not be empty", function () {
    client.assert(response.body.processInstanceKey === expectedInstanceKey, "Process instances wasn't returned");
  });
%}

###
# @name get-process-instance-sequence-flows
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances/{{PROCESS_INSTANCE_KEY}}/sequence-flows
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Process instance is successful returned", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Response should not be empty", function () {
    client.assert(Array.isArray(response.body.items), "items must be array");
    client.assert(response.body.items.length > 0, "Expect at least one element");
  });
%}

###
# @name get-process-instance-elements-statistics
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances/{{PROCESS_INSTANCE_KEY}}/statistics/element-instances
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Process instance elements statistics are successful returned", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Response should not be empty", function () {
    client.assert(Array.isArray(response.body.items), "items must be array");
    client.assert(response.body.items.length > 0, "Expect at least one element");
  });
%}

###
# @name get-process-instance-call-hierarchy
< {%
  import {wait} from "../js/wait"
  wait(1)
%}
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances/{{PROCESS_INSTANCE_KEY}}/call-hierarchy
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Process instance hierarchy is successful returned", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Response should not be empty", function () {
    client.assert(Array.isArray(response.body), "items must be array");
    client.assert(response.body.length == 0, "Expect no elements in hierarchy");
  });
%}

###
# @name process-instance-search-authorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances/search
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "processInstanceKey",
      "order": "ASC"
    }
  ],
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("Process instance search is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Response should not be empty", function () {
    client.assert(response.body.items.length > 0, "Process instances were not returned");
  });
%}

###
# @name process-instance-search-for-incidents-authorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances/{{PROCESS_INSTANCE_KEY}}/incidents/search
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "processInstanceKey",
      "order": "ASC"
    }
  ],
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("Process instance search for incidents is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Response should be empty", function () {
    client.assert(response.body.items.length == 0, "Process instances were not returned");
  });
%}

###
# @name process-instance-cancellation-authorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances/{{PROCESS_INSTANCE_KEY}}/cancellation
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "operationReference": 1
}

> {%
  client.test("Process instance cancellation is successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

###
# @name get-cancelled-process-instance
< {%
  import {wait} from "../js/wait"
  wait(4)
%}
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances/{{PROCESS_INSTANCE_KEY}}
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Process instance is successful returned", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  let expectedInstanceKey = client.global.get("PROCESS_INSTANCE_KEY");
  client.test("Response should not be empty", function () {
    client.assert(response.body.processInstanceKey === expectedInstanceKey, "Process instances wasn't returned");
    client.assert(response.body.state === "TERMINATED", "Process instance is not canceled");
  });
%}

###
# @name process-definition-resource-deletion-authorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/resources/{{FORM_KEY}}/deletion
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "operationReference": 1
}

> {%
  client.test("Process definition search is successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

###
# @name get-deleted-process-definition-resource-authorized
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/resources/{{FORM_KEY}}
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Resource retrieval is unsuccessful", function () {
    client.assert(response.status === 404, "Expected 404, got " + response.status);
  });
%}

###
# @name deploy-process-diagram-with-incident
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/deployments
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Accept: application/json
Content-Type: multipart/form-data; boundary=boundary123

--boundary123
Content-Disposition: form-data; name="resources"; filename="User Task Test Process Incident.bpmn"
Content-Type: application/octet-stream

< ./User Task Processes/User Task Test Process Incident.bpmn
--boundary123--


> {%
  client.test("Process deployment is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
    const processKey = response.body.deployments[0].processDefinition.processDefinitionKey;
    client.global.set("PROCESS_DEFINITION_KEY_INCIDENT", processKey);
  });
%}

###
# @name create-process-instance-with-incident
< {%
  import {wait} from "../js/wait"
  wait(1)
%}
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "processDefinitionKey": "{{PROCESS_DEFINITION_KEY_INCIDENT}}",
  "variables": {}
}

> {%
  client.test("Create process instance is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });
  let expectedDefinitionKey = client.global.get("PROCESS_DEFINITION_KEY_INCIDENT");
  client.test("Response should contain process key", function () {
    client.assert(response.body.processDefinitionKey === expectedDefinitionKey, "Process definition key was not returned");
    client.global.set("PROCESS_INSTANCE_KEY_INCIDENT", response.body.processInstanceKey);
  });
%}

###
# @name get-process-instance-with-incident
< {%
  import {wait} from "../js/wait"
  wait(4)
%}
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances/{{PROCESS_INSTANCE_KEY_INCIDENT}}
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Process instance is successful returned", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  let expectedInstanceKey = client.global.get("PROCESS_INSTANCE_KEY");
  client.test("Response should not be empty", function () {
    client.assert(response.body.processInstanceKey === expectedInstanceKey, "Process instances wasn't returned");
    client.assert(response.body.state === "INCIDENT", "Process instance is not ACTIVE");
    client.assert(response.body.hasIncident === true, "Process instance is healthy");
  });
%}

###
# @name process-incident-search-authorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/incidents/search
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "processInstanceKey",
      "order": "ASC"
    }
  ],
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("Process instance search is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Response should not be empty", function () {
    client.assert(response.body.items.length > 0, "Process instances were not returned");
    client.global.set("INCIDENT_KEY", response.body.items[0].incidentKey);
  });
%}

###
# @name get-process-incident-authorized
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/incidents/{{INCIDENT_KEY}}
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Process incident retrieval is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });
%}

###
# @name process-incident-resolution-authorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/incidents/{{INCIDENT_KEY}}/resolution
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "operationReference": 1
}

> {%
  client.test("Process incident resolution is successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

###
# @name user-task-search-authorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/user-tasks/search
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "creationDate",
      "order": "ASC"
    }
  ],
  "filter": {
    "state": "CREATED"
  },
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("User tasks search is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Response should not be empty", function () {
    client.assert(response.body.items.length > 0, "User task key were not returned");
    client.global.set("USER_TASK_KEY", response.body.items[0].userTaskKey);
    client.global.set("ELEMENT_INSTANCE_KEY", response.body.items[0].elementInstanceKey);
  });
%}

###
# @name element-instance-search-authorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/element-instances/search
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "startDate",
      "order": "ASC"
    }
  ],
  "filter": {
    "type": "USER_TASK",
    "state": "ACTIVE",
    "elementInstanceKey": "{{ELEMENT_INSTANCE_KEY}}"
  },
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("User tasks search is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Response should not be empty", function () {
    client.assert(response.body.items.length > 0, "Element instance key were not returned");
  });
%}

###
# @name update-element-instance-variables-authorized
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/element-instances/{{ELEMENT_INSTANCE_KEY}}/variables
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "variables": {"testVariable": "testValue"},
  "local": false
}

> {%
  client.test("User tasks search is successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

###
# @name get-element-instance-authorized
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/element-instances/{{ELEMENT_INSTANCE_KEY}}
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("User tasks search is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Response should not be empty", function () {
    client.assert(response.body.elementInstanceKey !==undefined, "Element instance key were not returned");
  });
%}

###
# @name user-task-variables-search-authorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/user-tasks/{{USER_TASK_KEY}}/variables/search
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "name",
      "order": "ASC"
    }
  ],
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("User tasks variables search is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Response should not be empty", function () {
    client.assert(response.body.items.length > 0, "User task key were not returned");
  });
%}

###
# @name get-user-task-authorized
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/user-tasks/{{USER_TASK_KEY}}
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("User tasks retrieval is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Response should not be empty", function () {
    client.assert(response.body.userTaskKey !== undefined, "User task key were not returned");
  });
%}

###
# @name get-user-task-form-authorized
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/user-tasks/{{USER_TASK_KEY}}/form
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("User tasks form retrieval is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Response should not be empty", function () {
    client.assert(response.body.formId !== undefined, "Form ID was not returned");
  });
%}

###
# @name update-user-task-authorized
PATCH {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/user-tasks/{{USER_TASK_KEY}}
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "changeset": {
    "candidateUsers": [
      "demo"
    ],
    "priority": 100
  },
  "action": "update"
}

> {%
  client.test("Update user tasks is successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

###
# @name assign-user-task-authorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/user-tasks/{{USER_TASK_KEY}}/assignment
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "assignee": "demo",
  "allowOverride": true,
  "action": "assign"
}

> {%
  client.test("Assign user tasks is successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

###
# @name get-updated-assigned-user-task-authorized
< {%
  import {wait} from "../js/wait"
  wait(2)
%}
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/user-tasks/{{USER_TASK_KEY}}
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("User tasks retrieval is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("User task should be updated and assigned", function () {
    client.assert(response.body.userTaskKey !== undefined, "User task key were not returned");
    client.assert(response.body.assignee == "demo", "User task was not assigned");
    client.assert(response.body.priority == 100, "Priority was not updated");
    client.assert(response.body.candidateUsers[0] == "demo", "User task key were not returned");
  });
%}

###
# @name unassign-user-task-authorized
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/user-tasks/{{USER_TASK_KEY}}/assignee
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Unassign user tasks is successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

###
# @name complete-user-task-authorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/user-tasks/{{USER_TASK_KEY}}/completion
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "variables": {},
  "action": "complete"
}

> {%
  client.test("Complete user tasks is successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

###
# @name search-variables-authorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/variables/search
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "name",
      "order": "ASC"
    }
  ],
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("Search variables is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Variables should be returned", function () {
    client.assert(response.body.items.length > 0, "Variables were not returned");
    client.global.set("VARIABLE_KEY", response.body.items[0].variableKey);
  });
%}

###
# @name get-variable-by-key-authorized
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/variables/{{VARIABLE_KEY}}
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Search variables is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Variables should be returned", function () {
    client.assert(response.body.variableKey !== undefined, "Variable was not returned");
  });
%}

###
# @name upload-document-authorized
POST http://localhost:8080/v2/documents
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Accept: application/json
Content-Type: multipart/form-data; boundary=boundary123

--boundary123
Content-Disposition: form-data; name="file"; filename="test.pdf"
X-Document-Metadata: {"fileName": "test.pdf", "size": 1234567}
Content-Type: application/pdf

< ../test.pdf
--boundary123

> {%
  client.test("Document upload should be successful", function () {
    client.assert(response.status === 201, "Expected 201, got " + response.status);
    client.global.set("DOCUMENT_ID", response.body.documentId);
    client.global.set("CONTENT_HASH", response.body.contentHash);
  });

  client.test("Response should be JSON", function () {
    const contentType = response.headers.valueOf("Content-Type") || "";
    client.assert(
        contentType.toLowerCase().includes("application/json"),
        `Response is not JSON, Content-Type was: ${contentType}`
    );
  });

  client.test("Response body should include document ID", function () {
    client.assert(response.body.documentId, "Document ID not found in the response");
  });
%}

###
# @name download-document-authorized
GET http://localhost:8080/v2/documents/{{DOCUMENT_ID}}?contentHash={{CONTENT_HASH}}
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Accept: application/octet-stream

> {%
  client.test("Document download should be successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });
%}

###
# @name delete-and-verify-document
DELETE http://localhost:8080/v2/documents/{{DOCUMENT_ID}}
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}

> {%
  client.test("Document deletion should succeed", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });

  client.global.set("DOCUMENT_DELETED", "true");
%}

###
# @name verify-deleted-document
GET http://localhost:8080/v2/documents/{{DOCUMENT_ID}}?contentHash={{CONTENT_HASH}}
Cookie: camunda-session={{session_cookie}}; X-CSRF-TOKEN={{csrf_cookie}}
X-CSRF-TOKEN: {{csrf_token}}
Accept: application/octet-stream

> {%
  if (client.global.get("DOCUMENT_DELETED") === "true") {
    client.test("Document download after deletion should fail", function () {
      client.assert(response.status === 404, "Expected 404, got " + response.status);
    });
  }
%}
