/*
 * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
 * one or more contributor license agreements. See the NOTICE file distributed
 * with this work for additional information regarding copyright ownership.
 * Licensed under the Camunda License 1.0. You may not use this file
 * except in compliance with the Camunda License 1.0.
 */

/* Auto-generated by assert-json-body extract. Do not edit manually. */
import {
  validateResponseShape as _baseValidateResponseShape,
  validateResponse as _baseValidateResponse,
} from 'assert-json-body';
import type {PlaywrightAPIResponse} from 'assert-json-body';

export const RESPONSE_INDEX = {
  '/topology': {
    GET: {
      '200': 1,
    },
  },
  '/license': {
    GET: {
      '200': 1,
    },
  },
  '/authentication/me': {
    GET: {
      '200': 1,
    },
  },
  '/jobs/activation': {
    POST: {
      '200': 1,
    },
  },
  '/jobs/search': {
    POST: {
      '200': 1,
    },
  },
  '/tenants': {
    POST: {
      '201': 1,
    },
  },
  '/tenants/{tenantId}': {
    GET: {
      '200': 1,
    },
    PUT: {
      '200': 1,
    },
  },
  '/tenants/{tenantId}/users/search': {
    POST: {
      '200': 1,
    },
  },
  '/tenants/{tenantId}/clients/search': {
    POST: {
      '200': 1,
    },
  },
  '/tenants/{tenantId}/groups/search': {
    POST: {
      '200': 1,
    },
  },
  '/tenants/{tenantId}/roles/search': {
    POST: {
      '200': 1,
    },
  },
  '/tenants/{tenantId}/mapping-rules/search': {
    POST: {
      '200': 1,
    },
  },
  '/tenants/search': {
    POST: {
      '200': 1,
    },
  },
  '/user-tasks/{userTaskKey}': {
    GET: {
      '200': 1,
    },
  },
  '/user-tasks/{userTaskKey}/form': {
    GET: {
      '200': 1,
    },
  },
  '/user-tasks/search': {
    POST: {
      '200': 1,
    },
  },
  '/user-tasks/{userTaskKey}/variables/search': {
    POST: {
      '200': 1,
    },
  },
  '/variables/search': {
    POST: {
      '200': 1,
    },
  },
  '/variables/{variableKey}': {
    GET: {
      '200': 1,
    },
  },
  '/process-definitions/search': {
    POST: {
      '200': 1,
    },
  },
  '/process-definitions/{processDefinitionKey}': {
    GET: {
      '200': 1,
    },
  },
  '/process-definitions/{processDefinitionKey}/form': {
    GET: {
      '200': 1,
    },
  },
  '/process-definitions/{processDefinitionKey}/statistics/element-instances': {
    POST: {
      '200': 1,
    },
  },
  '/process-instances': {
    POST: {
      '200': 1,
    },
  },
  '/process-instances/{processInstanceKey}': {
    GET: {
      '200': 1,
    },
  },
  '/process-instances/{processInstanceKey}/sequence-flows': {
    GET: {
      '200': 1,
    },
  },
  '/process-instances/{processInstanceKey}/statistics/element-instances': {
    GET: {
      '200': 1,
    },
  },
  '/process-instances/search': {
    POST: {
      '200': 1,
    },
  },
  '/process-instances/{processInstanceKey}/incidents/search': {
    POST: {
      '200': 1,
    },
  },
  '/process-instances/cancellation': {
    POST: {
      '200': 1,
    },
  },
  '/process-instances/incident-resolution': {
    POST: {
      '200': 1,
    },
  },
  '/process-instances/migration': {
    POST: {
      '200': 1,
    },
  },
  '/process-instances/modification': {
    POST: {
      '200': 1,
    },
  },
  '/process-instances/{processInstanceKey}/call-hierarchy': {
    GET: {
      '200': 1,
    },
  },
  '/element-instances/search': {
    POST: {
      '200': 1,
    },
  },
  '/element-instances/{elementInstanceKey}': {
    GET: {
      '200': 1,
    },
  },
  '/decision-definitions/search': {
    POST: {
      '200': 1,
    },
  },
  '/decision-definitions/{decisionDefinitionKey}': {
    GET: {
      '200': 1,
    },
  },
  '/decision-requirements/search': {
    POST: {
      '200': 1,
    },
  },
  '/decision-requirements/{decisionRequirementsKey}': {
    GET: {
      '200': 1,
    },
  },
  '/decision-instances/search': {
    POST: {
      '200': 1,
    },
  },
  '/decision-instances/{decisionEvaluationInstanceKey}': {
    GET: {
      '200': 1,
    },
  },
  '/decision-definitions/evaluation': {
    POST: {
      '200': 1,
    },
  },
  '/authorizations': {
    POST: {
      '201': 1,
    },
  },
  '/authorizations/{authorizationKey}': {
    GET: {
      '200': 1,
    },
  },
  '/authorizations/search': {
    POST: {
      '200': 1,
    },
  },
  '/roles': {
    POST: {
      '201': 1,
    },
  },
  '/roles/{roleId}': {
    GET: {
      '200': 1,
    },
    PUT: {
      '200': 1,
    },
  },
  '/roles/{roleId}/users/search': {
    POST: {
      '200': 1,
    },
  },
  '/roles/{roleId}/clients/search': {
    POST: {
      '200': 1,
    },
  },
  '/roles/search': {
    POST: {
      '200': 1,
    },
  },
  '/roles/{roleId}/groups/search': {
    POST: {
      '200': 1,
    },
  },
  '/roles/{roleId}/mapping-rules/search': {
    POST: {
      '200': 1,
    },
  },
  '/groups': {
    POST: {
      '201': 1,
    },
  },
  '/groups/{groupId}': {
    GET: {
      '200': 1,
    },
    PUT: {
      '200': 1,
    },
  },
  '/groups/{groupId}/users/search': {
    POST: {
      '200': 1,
    },
  },
  '/groups/{groupId}/mapping-rules/search': {
    POST: {
      '200': 1,
    },
  },
  '/groups/{groupId}/roles/search': {
    POST: {
      '200': 1,
    },
  },
  '/groups/{groupId}/clients/search': {
    POST: {
      '200': 1,
    },
  },
  '/groups/search': {
    POST: {
      '200': 1,
    },
  },
  '/mapping-rules': {
    POST: {
      '201': 1,
    },
  },
  '/mapping-rules/{mappingRuleId}': {
    GET: {
      '200': 1,
    },
    PUT: {
      '200': 1,
    },
  },
  '/mapping-rules/search': {
    POST: {
      '200': 1,
    },
  },
  '/messages/publication': {
    POST: {
      '200': 1,
    },
  },
  '/messages/correlation': {
    POST: {
      '200': 1,
    },
  },
  '/correlated-message-subscriptions/search': {
    POST: {
      '200': 1,
    },
  },
  '/message-subscriptions/search': {
    POST: {
      '200': 1,
    },
  },
  '/documents': {
    POST: {
      '201': 1,
    },
  },
  '/documents/batch': {
    POST: {
      '201': 1,
      '207': 1,
    },
  },
  '/documents/{documentId}/links': {
    POST: {
      '201': 1,
    },
  },
  '/users': {
    POST: {
      '201': 1,
    },
  },
  '/users/search': {
    POST: {
      '200': 1,
    },
  },
  '/users/{username}': {
    GET: {
      '200': 1,
    },
    PUT: {
      '200': 1,
    },
  },
  '/setup/user': {
    POST: {
      '201': 1,
    },
  },
  '/incidents/search': {
    POST: {
      '200': 1,
    },
  },
  '/incidents/{incidentKey}': {
    GET: {
      '200': 1,
    },
  },
  '/system/usage-metrics': {
    GET: {
      '200': 1,
    },
  },
  '/deployments': {
    POST: {
      '200': 1,
    },
  },
  '/resources/{resourceKey}': {
    GET: {
      '200': 1,
    },
  },
  '/resources/{resourceKey}/content': {
    GET: {
      '200': 1,
    },
  },
  '/signals/broadcast': {
    POST: {
      '200': 1,
    },
  },
  '/batch-operations/{batchOperationKey}': {
    GET: {
      '200': 1,
    },
  },
  '/batch-operations/search': {
    POST: {
      '200': 1,
    },
  },
  '/batch-operation-items/search': {
    POST: {
      '200': 1,
    },
  },
} as const;

export type RoutePath = keyof typeof RESPONSE_INDEX;
export type MethodFor<P extends RoutePath> = Extract<
  keyof (typeof RESPONSE_INDEX)[P],
  string
>;
export type StatusFor<P extends RoutePath, M extends MethodFor<P>> = Extract<
  keyof (typeof RESPONSE_INDEX)[P][M],
  string
>;

export interface TypedRouteSpec<
  P extends RoutePath = RoutePath,
  M extends MethodFor<P> = MethodFor<P>,
  S extends StatusFor<P, M> = StatusFor<P, M>,
> {
  path: P;
  method: M;
  status: S;
}

export function validateResponseShape<
  P extends RoutePath,
  M extends MethodFor<P>,
  S extends StatusFor<P, M>,
>(
  spec: {path: P; method: M; status: S},
  body: unknown,
  options?: {
    responsesFilePath?: string;
    configPath?: string;
    throw?: boolean;
    record?: boolean | {label?: string};
  },
) {
  // Cast to base signature (method/status widened to string) for internal call.
  const baseFn = _baseValidateResponseShape;
  if (baseFn === (validateResponseShape as unknown)) {
    throw new Error(
      "Typed validator resolved to itself. Avoid aliasing the package name to the generated typed file. Use a relative import to the generated ./json-body-assertions/index or import from 'assert-json-body/base' for the core API.",
    );
  }
  return baseFn(
    spec as unknown as {path: string; method?: string; status?: string},
    body,
    options,
  );
}
export function validateResponse<
  P extends RoutePath = RoutePath,
  M extends MethodFor<P>,
  S extends StatusFor<P, M>,
>(
  spec: {path: P; method: M; status: S},
  response: PlaywrightAPIResponse,
  options?: {
    responsesFilePath?: string;
    configPath?: string;
    throw?: boolean;
    record?: boolean | {label?: string};
  },
) {
  return _baseValidateResponse(spec, response, options);
}
