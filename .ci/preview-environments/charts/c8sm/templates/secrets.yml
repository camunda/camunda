---
{{- $camundaPlatform := deepCopy (index .Subcharts "camunda-platform") -}}
{{- $_ := set .Values "camundaPlatform" (deepCopy (index .Values "camunda-platform")) -}}
# Some components require existing secrets (fixed values) that the Helm Chart 8.8 don't allow to generate anymore
# e.g. Keycloak
{{- if not .Values.global.secrets.autoGenerated }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.global.secrets.name }}
  labels:
    {{- include "camundaPlatform.labels" . | nindent 4 }}
  annotations:
    {{- include "common.tplvalues.merge" (dict
      "values" (list .Values.global.annotations .Values.global.secrets.annotations)
      "context" $) | nindent 4 }}
type: Opaque
data:
  {{- if .Values.camundaPlatform.identity.firstUser.existingSecret }}
  # Identity login.
  {{ .Values.camundaPlatform.identity.firstUser.existingSecretKey }}: "{{ .Values.camundaPlatform.identity.firstUser.username | b64enc }}"
  {{- end }}
  {{- if .Values.camundaPlatform.identityKeycloak.auth.existingSecret }}
  # Identity Keycloak login.
  {{ .Values.camundaPlatform.identityKeycloak.auth.passwordSecretKey }}: "{{ .Values.camundaPlatform.identityKeycloak.auth.adminUser | b64enc }}"
  {{- end }}
  {{- if .Values.camundaPlatform.identityKeycloak.postgresql.auth.existingSecret }}
  # Identity Keycloak PostgreSQL.
  {{ .Values.camundaPlatform.identityKeycloak.postgresql.auth.secretKeys.adminPasswordKey  }}: "{{ "postgresql" | b64enc }}"
  {{ .Values.camundaPlatform.identityKeycloak.postgresql.auth.secretKeys.userPasswordKey }}: "{{ "postgresql" | b64enc }}"
  {{- end }}
  {{- if and .Values.camundaPlatform.webModelerPostgresql.enabled .Values.camundaPlatform.webModelerPostgresql.auth.existingSecret }}
  # WebModeler PostgreSQL.
  {{ .Values.camundaPlatform.webModelerPostgresql.auth.secretKeys.adminPasswordKey }}: "{{ "postgresql" | b64enc }}"
  {{ .Values.camundaPlatform.webModelerPostgresql.auth.secretKeys.userPasswordKey }}: "{{ "postgresql" | b64enc }}"
  {{- end }}
  # OIDC client tokens for Identity/Keycloak authentication
  {{- if .Values.global.identity.auth.enabled }}
  identity-orchestration-client-token: "S0w3OHF4UmZMN3ZDcTlYOGJOUDRHa1pBVTJtRXlUaEo="
  identity-connectors-client-token: "TjVXZkhtOWRRcDdCWGsyVnlVNEdqekxSM3RDYUVNeDg="
  identity-optimize-client-token: "Uzl5UjRHaE43QnhMM2tXRlByVDZjWjhBbU1kVXFKMg=="
  identity-console-client-token: "RjhOMnhUazNMcVlXNFZIQnpHNm1qUzlQZEFjRXJ1NWg="
  {{- end }}

{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: dockerhub-registry
  labels:
    {{- include "commonLabels" $ | nindent 4 }}
  annotations:
    {{- include "commonAnnotations" $ | nindent 4 }}
    replicator.v1.mittwald.de/replicate-from: camunda/dockerhub-registry
    # The following overwrites an "internal" annotation (one that the user
    # should not interfere with as it is not documented in the README at
    # https://github.com/mittwald/kubernetes-replicator/). We do this anyways to
    # force replicator-tool to replicate the contents of this secret again.
    # This is necessary as we have to set empty default data fields to create a
    # valid `type: kubernetes.io/tls` secret but this will purge the previously
    # replicated contents.
    replicator.v1.mittwald.de/replicated-from-version: "0"
type: kubernetes.io/dockerconfigjson
data:
  # Set to an empty JSON to comply with kubernetes.io/dockerconfigjson requirements
  .dockerconfigjson: "e30="
---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: registry-camunda-cloud
  labels: {{ include "commonLabels" $ | nindent 4 }}
  annotations: {{ include "commonAnnotations" $ | nindent 4 }}
spec:
  refreshInterval: "5m"

  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore

  target:
    template:
      type: kubernetes.io/dockerconfigjson
      metadata:
        annotations:
          managed-by: external-secrets

  data:
  - secretKey: .dockerconfigjson
    remoteRef:
      key: secret/data/k8s-camunda-ci/camunda/registries
      property: REGISTRY_CAMUNDA_CLOUD_DOCKERCONFIGJSON
