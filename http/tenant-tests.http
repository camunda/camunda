### Create Tenant Unauthorized
# @name create-tenant-unauthorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants
Content-Type: application/json
Accept: application/json

{
  "tenantId": "testTenant1",
  "name": "TestTenant1",
  "description": "A test tenant."
}

> {%
  client.test("Tenant creation should be unsuccessful", function () {
    client.assert(response.status === 401, "Expected 401, got " + response.status);
  });
%}

### Create Tenant
# @name create-tenant
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "tenantId": "testTenant1",
  "name": "TestTenant1",
  "description": "A test tenant."
}

> {%
  client.test("Tenant creation should be successful", function () {
    client.assert(response.status === 201, "Expected 201, got " + response.status);
    client.global.set("TENANT_ID", response.body.tenantId);
  });
%}

### Get Tenant
# @name get-tenant
< {%
  import {wait} from "js/wait";
  wait(3);
%}
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{TENANT_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  let expectedTenantId = client.global.get("TENANT_ID");

  client.test("Tenant retrieval should be successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
    client.assert(response.body.tenantId === expectedTenantId, "TenantId was not found.");
  });
%}

### Update Tenant
# @name update-tenant
< {%
  import {wait} from "js/wait";
  wait(2);
%}
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{TENANT_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "name": "TestTenant1",
  "description": "Updated tenant description."
}

> {%
  client.test("Tenant update should be successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
    client.assert(response.body.description === "Updated tenant description.", "Description was not updated correctly.");
  });
%}

### Assign User to Tenant
# @name assign-user-to-tenant
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{TENANT_ID}}/users/{{USERNAME}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("User assignment should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Search Users for Tenant
# @name search-users-for-tenant
< {%
  import {wait} from "js/wait";
  wait(4);
%}
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{TENANT_ID}}/users/search
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "username",
      "order": "ASC"
    }
  ],
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("User search should be successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
    client.assert(response.body.items[0].username === "demo", "Username was not found");
  });
%}

### Remove User from Tenant
# @name remove-user-from-tenant
< {%
  import {wait} from "js/wait";
  wait(2);
%}
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{TENANT_ID}}/users/{{USERNAME}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("User removal should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Create Group
# @name create-group
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/groups
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "groupId": "testGroup1",
  "name": "TestGroup1"
}

> {%
  client.test("Group creation should be successful", function () {
    client.assert(response.status === 201, "Expected 201, got " + response.status);
    client.global.set("GROUP_ID", response.body.groupId);
  });
%}

### Assign Group to Tenant
# @name assign-group-to-tenant
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{TENANT_ID}}/groups/{{GROUP_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Group assignment should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Search Group for Tenant
# @name search-group-for-tenant
< {%
  import {wait} from "js/wait";
  wait(3);
%}
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{TENANT_ID}}/groups/search
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "groupId",
      "order": "ASC"
    }
  ],
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("Group search should be successful", function () {
    let expectedGroupId = client.global.get("GROUP_ID");

    client.assert(response.status === 200, "Expected 200, got " + response.status);
    client.assert(response.body.items[0].groupId === expectedGroupId, "Group was not found");
  });
%}

### Remove Group from Tenant
# @name remove-group-from-tenant
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{TENANT_ID}}/groups/{{GROUP_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Group removal should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Search Tenants
# @name search-tenants
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/search
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "tenantId",
      "order": "DESC"
    }
  ],
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("Tenant search should be successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
    client.assert(response.body.items[0].tenantId === "testTenant1", "Tenant was not found");
  });
%}

### Assign Client to Tenant
# @name assign-client-to-tenant
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{TENANT_ID}}/clients/tasklist
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Client assignment should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Remove Client from a Tenant
# @name remove-client-from-tenant
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{TENANT_ID}}/clients/tasklist
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Client deletion should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Delete Group
# @name delete-group
< {%
  import {wait} from "js/wait";
  wait(3);
%}
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/groups/{{GROUP_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Group deletion should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Delete Tenant
# @name delete-tenant
< {%
  import {wait} from "js/wait";
  wait(3);
%}
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{TENANT_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Tenant deletion should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}
