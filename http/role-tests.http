### Create Role Unauthorized
# @name create-role-unauthorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/roles
Content-Type: application/json
Accept: application/json

{
  "roleId": "testRole",
  "name": "TestRole"
}

> {%
  client.test("Role creation should be unsuccessful", function () {
    client.assert(response.status === 401, "Expected 401, got " + response.status);
  });
%}

### Create Role
# @name create-role
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/roles
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "roleId": "testRole",
  "name": "TestRole"
}

> {%
  client.test("Role creation should be successful", function () {
    client.assert(response.status === 201, "Expected 201, got " + response.status);
    client.global.set("ROLE_ID", response.body.roleId);
  });
%}

### Create Role with too long id
# @name create-role-too-long-id
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/roles
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "roleId": "000000BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ThequickbrownfoxjumpsoverthelazydogmultipleTimestoEnsureThatThisStringReachesExactly257CharactersInLengthWithoutAnyIssueOrTruncationABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
  "name": "TestRole"
}

> {%
  client.test("Role creation should be unsuccessful", function () {
    client.assert(response.status === 400, "Expected 400, got " + response.status);
    client.assert(response.body.title === "INVALID_ARGUMENT", "Wrong error title");
    client.assert(response.body.detail === "The provided roleId exceeds the limit of 256 characters.", "Wrong error message");
  });
%}

### Get Role
# @name get-role
< {%
  import {wait} from "js/wait";
  wait(3);
%}
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/roles/{{ROLE_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  let expectedRoleId = client.global.get("ROLE_ID");

  client.test("Role retrieval should be successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
    client.assert(response.body.roleId === expectedRoleId, "RoleId was not found.");
  });
%}

### Update Role
# @name update-role
< {%
  import {wait} from "js/wait";
  wait(2);
%}
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/roles/{{ROLE_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "name": "TestRole Updated",
  "description": "An updated test role description."
}

> {%
  client.test("Role update should be successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
    client.assert(response.body.name === "TestRole Updated", "Name was not updated correctly.");
    client.assert(response.body.description === "An updated test role description.", "Description was not updated correctly.");
  });
%}

### Assign Role to User
# @name assign-role-to-user
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/roles/{{ROLE_ID}}/users/{{USERNAME}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Role assignment should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Search User for Role
# @name search-user-for-role
< {%
  import {wait} from "js/wait";
  wait(4);
%}
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/roles/{{ROLE_ID}}/users/search
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
    "field": "username",
    "order": "ASC"
     }
  ],
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("User search should be successful", function () {

    client.assert(response.status === 200, "Expected 200, got " + response.status);
    client.assert(response.body.items[0].username === "demo", "User was not found");
  });
%}

### Remove Role from User
# @name remove-role-from-user
< {%
  import {wait} from "js/wait";
  wait(2);
%}
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/roles/{{ROLE_ID}}/users/{{USERNAME}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Role removal should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Search Roles
# @name search-roles
< {%
  import {wait} from "js/wait";
  wait(2);
%}
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/roles/search
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "filter": {
    "roleId": "{{ROLE_ID}}"
  },
  "sort": [
    {
    "field": "name",
    "order": "ASC"
     }
  ]
}

> {%
  let expectedRoleId = client.global.get("ROLE_ID");

  client.test("Role search should be successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
    client.assert(response.body.items[0].roleId === expectedRoleId, "Role was not found");
  });
%}

### Assign Role to Client
# @name assign-role-to-client
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/roles/{{ROLE_ID}}/clients/{{CLIENT}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Role assignment should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Remove Role from a Client
# @name remove-role-from-client
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/roles/{{ROLE_ID}}/clients/{{CLIENT}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Role deletion should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Create Tenant
# @name create-tenant
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "tenantId": "testTenant1",
  "name": "TestTenant1",
  "description": "A test tenant."
}

> {%
  client.test("Tenant creation should be successful", function () {
    client.assert(response.status === 201, "Expected 201, got " + response.status);
    client.global.set("TENANT_ID", response.body.tenantId);
  });
%}

### Assign Role to Tenant
# @name assign-role-to-tenant
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{TENANT_ID}}/roles/{{ROLE_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Role assignment should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Search Role for Tenant
# @name search-role-for-tenant
< {%
  import {wait} from "js/wait";
  wait(3);
%}
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{TENANT_ID}}/roles/search
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "filter": {
    "roleId": "{{ROLE_ID}}"
  }
}

> {%
  client.test("Role search should be successful", function () {
    let expectedRoleId = client.global.get("ROLE_ID");
    client.assert(response.status === 200, "Expected 200, got " + response.status);
    client.assert(response.body.items[0].roleId === expectedRoleId, "Role was not found");
  });
%}

### Remove Role from Tenant
# @name remove-role-from-tenant
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{TENANT_ID}}/roles/{{ROLE_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Role removal should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Delete Tenant
# @name delete-tenant
< {%
  import {wait} from "js/wait";
  wait(3);
%}
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{TENANT_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Tenant deletion should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Create Group
# @name create-group
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/groups
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "groupId": "testGroup1",
  "name": "TestGroup1"
}

> {%
  client.test("Group creation should be successful", function () {
    client.assert(response.status === 201, "Expected 201, got " + response.status);
    client.global.set("GROUP_ID", response.body.groupId);
  });
%}

### Assign Role to Group
# @name assign-role-to-group
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/roles/{{ROLE_ID}}/groups/{{GROUP_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Role assignment should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Search Role for Group
# @name search-role-for-group
< {%
  import {wait} from "js/wait";
  wait(3);
%}
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/groups/{{GROUP_ID}}/roles/search
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "filter": {
    "roleId": "{{ROLE_ID}}"
  }
}

> {%
  client.test("Role search should be successful", function () {
    let expectedRoleId = client.global.get("ROLE_ID");
    client.assert(response.status === 200, "Expected 200, got " + response.status);
    client.assert(response.body.items[0].roleId === expectedRoleId, "Role was not found");
  });
%}

### Remove Group from Role
# @name remove-group-from-role
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/roles/{{ROLE_ID}}/groups/{{GROUP_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Group removal should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Delete Group
# @name delete-group
< {%
  import {wait} from "js/wait";
  wait(3);
%}
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/groups/{{GROUP_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Group deletion should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

### Delete Role
# @name delete-role
< {%
  import {wait} from "js/wait";
  wait(3);
%}
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/roles/{{ROLE_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("Role deletion should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}
