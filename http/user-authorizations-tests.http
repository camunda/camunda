###
# @no-cookie-jar
# @name test-create-user-unauthorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users
Content-Type: application/json
Accept: application/json

{
  "password": "sergii",
  "username": "sergii",
  "name": "sergii",
  "email": "sergii@camunda.com"
}

> {%
  client.test("User creation should be unauthorized", function () {
    client.assert(response.status === 401, "Expected 401, got " + response.status);
  });
%}

###
# @name create-test-user-without-authorizations
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "password": "admin",
  "username": "{{USERNAME_NO_AUTHORIZATIONS}}",
  "name": "admin",
  "email": "admin@test.com"
}

> {%
  client.test("User creation should be successful", function () {
    client.assert(response.status === 201, "Expected 201, got " + response.status);
    client.global.set("USERNAME_NO_AUTHORIZATIONS", response.body.username);
  });
%}

###
# @no-cookie-jar
# @name test-create-user-authorized-with-security-headers
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "password": "sergii",
  "username": "sergii",
  "name": "sergii",
  "email": "sergii@camunda.com"
}

> {%
  client.test("User creation should be authorized", function () {
    client.assert(response.status === 201, "Expected 201, got " + response.status);
    client.global.set("USERNAME", response.body.username);
  });

  client.test("Cache Control headers should be present", function () {
    client.assert(response.headers.valueOf("Cache-Control"), "Cache-Control header is missing");
    client.assert(response.headers.valueOf("Pragma"), "Pragma header is missing");
    client.assert(response.headers.valueOf("Expires"), "Expires header is missing");
  });

  client.test("Content Security Policy header should be present", function () {
    client.assert(response.headers.valueOf("Content-Security-Policy"), "Content-Security-Policy header is missing");
  });

  client.test("X-Content-Type-Options header should be present", function () {
    const contentTypeOptions = response.headers.valueOf("X-Content-Type-Options");
    client.assert(contentTypeOptions, "X-Content-Type-Options header is missing");
    client.assert(contentTypeOptions === "nosniff", "X-Content-Type-Options should be 'nosniff'");
  });

  client.test("Cross-Origin-Embedder-Policy header should be present", function () {
    const coep = response.headers.valueOf("Cross-Origin-Embedder-Policy");
    client.assert(coep, "Cross-Origin-Embedder-Policy header is missing");
    client.assert(coep === "unsafe-none", "Cross-Origin-Embedder-Policy should be 'unsafe-none'");
  });

  client.test("Cross-Origin-Opener-Policy header should be present", function () {
    const coop = response.headers.valueOf("Cross-Origin-Opener-Policy");
    client.assert(coop, "Cross-Origin-Opener-Policy header is missing");
    client.assert(coop === "same-origin-allow-popups", "Cross-Origin-Opener-Policy should be 'same-origin-allow-popups'");
  });

  client.test("Cross-Origin-Resource-Policy header should be present", function () {
    const corp = response.headers.valueOf("Cross-Origin-Resource-Policy");
    client.assert(corp, "Cross-Origin-Resource-Policy header is missing");
    client.assert(corp === "same-site", "Cross-Origin-Resource-Policy should be 'same-site'");
  });

  client.test("X-Frame-Options header should be present", function () {
    const frameOptions = response.headers.valueOf("X-Frame-Options");
    client.assert(frameOptions, "X-Frame-Options header is missing");
    client.assert(frameOptions.toUpperCase() === "SAMEORIGIN", "X-Frame-Options should be 'SAMEORIGIN'");
  });

  client.test("Referrer-Policy header should be present", function () {
    const referrerPolicy = response.headers.valueOf("Referrer-Policy");
    client.assert(referrerPolicy, "Referrer-Policy header is missing");
    client.assert(referrerPolicy.toLowerCase() === "strict-origin-when-cross-origin", "Referrer-Policy should be 'STRICT_ORIGIN_WHEN_CROSS_ORIGIN'");
  });

  client.test("Permissions-Policy header validation", function () {
    const permissionsPolicy = response.headers.valueOf("Permissions-Policy");
    console.log(permissionsPolicy)
    if (permissionsPolicy) {
      const expected = [
        "accelerometer=()", "ambient-light-sensor=()", "attribution-reporting=()",
        "autoplay=()", "bluetooth=()", "browsing-topics=()", "camera=()", "compute-pressure=()",
        "cross-origin-isolated=()", "deferred-fetch=()", "deferred-fetch-minimal=()", "display-capture=()",
        "encrypted-media=()", "fullscreen=()", "gamepad=()", "geolocation=()", "gyroscope=()", "hid=()",
        "identity-credentials-get=()", "idle-detection=()", "language-detector=()", "local-fonts=()",
        "magnetometer=()", "microphone=()", "midi=()", "otp-credentials=()", "payment=()",
        "picture-in-picture=()", "publickey-credentials-create=()", "publickey-credentials-get=()",
        "screen-wake-lock=()", "serial=()", "speaker-selection=()", "storage-access=()", "summarizer=()",
        "translator=()", "usb=()", "web-share=()", "window-management=()", "xr-spatial-tracking=()"
      ];

      const actual = permissionsPolicy
          .split(",")
          .map(d => d.trim().toLowerCase());

      expected.forEach(dir => {
        client.assert(
            actual.includes(dir.toLowerCase()),
            `Missing directive in Permissions-Policy: ${dir}`
        );
      });
    }
  });

%}

###
# @name test-user-update
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users/{{USERNAME}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "password": "newStrongPassword123",
  "name": "Sergii Updated",
  "email": "sergii.updated@camunda.com"
}

> {%
  client.test("User update should be authorized", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });
%}


###
# @name test-user-search
< {%
  import {wait} from "js/wait"
  wait(4)
%}
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users/search
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "username",
      "order": "ASC"
    }
  ],
  "filter": {
    "username": "{{USERNAME}}"
  },
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("User search should be authorized", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });
  let expectedUsername = client.global.get("USERNAME");

  client.test("Response should contain updated user data", function () {
    client.assert(response.body.items[0].username === expectedUsername, "Username was not found");
    client.assert(response.body.items[0].name === "Sergii Updated", "Name was not updated correctly");
    client.assert(response.body.items[0].email === "sergii.updated@camunda.com", "Email was not updated correctly");
  });
%}

###
# @name test-delete-fake-user-athorized
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users/fake
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json


> {%
  client.test("The user was not found.", function () {
    client.assert(response.status === 404, "Expected 404, got " + response.status);
    client.assert(response.body.detail === "Command 'DELETE' rejected with code 'NOT_FOUND': Expected to delete user with username fake, but a user with this username does not exist", "Error message is wrong");
  });
%}

###
# @name create-authorization-positive
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/authorizations
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "permissionTypes": [
    "READ_USER_TASK",
    "DELETE_PROCESS_INSTANCE",
    "CREATE_PROCESS_INSTANCE",
    "UPDATE_PROCESS_INSTANCE",
    "READ_PROCESS_INSTANCE",
    "READ_PROCESS_DEFINITION",
    "UPDATE_USER_TASK"
  ],
  "ownerType": "USER",
  "ownerId": "test-user",
  "resourceType": "PROCESS_DEFINITION",
  "resourceId": "test-resource"
}

> {%
  client.test("Authorization creation should be successful", function () {
    client.assert(response.status === 201, "Expected 201, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Authorization key should not be empty", function () {
    client.assert(response.body.authorizationKey !== "", "Authorization key is empty");
    client.global.set("AUTHORIZATION_KEY", response.body.authorizationKey);
  });
%}

###
# @name create-authorization-missing-fields
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/authorizations
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "ownerId": "test-user"
}

> {%
  client.test("Authorization creation should fail due to missing fields", function () {
    client.assert(response.status === 400, "Expected 400, got " + response.status);
    client.assert(response.body.detail === "No ownerType provided. No resourceId provided. No resourceType provided. No permissionTypes provided.");
  });
%}

###
# @name create-authorization-unauthorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/authorizations
Authorization: Basic invalid_token
Content-Type: application/json
Accept: application/json

{
  "permissionTypes": [
    "READ_USER_TASK"
  ],
  "ownerType": "USER",
  "ownerId": "test-user",
  "resourceType": "PROCESS_DEFINITION",
  "resourceId": "test-resource"
}

> {%
  client.test("Authorization creation should be unauthorized", function () {
    client.assert(response.status === 401, "Expected 401, got " + response.status);
  });
%}

###
# @name test-authorization-search
< {%
  import {wait} from "js/wait";
  wait(3);
%}
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/authorizations/search
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "resourceId",
      "order": "ASC"
    }
  ],
  "filter": {
    "ownerId": "test-user"
  },
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("Authorization search should be successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
    console.log(response.headers);
  });

  client.test("Response should contain authorizations for the specified ownerId", function () {
    const authorizations = response.body.items;
    client.assert(Array.isArray(authorizations), "Response items are not an array");
    client.assert(authorizations.length > 0, "No authorizations found for the specified ownerId");
    authorizations.forEach(auth => {
      client.assert(auth.ownerId === "test-user", `Authorization ownerId mismatch: expected 'test-user', got '${auth.ownerId}'`);
    });
  });
%}

###
# @name update-authorization-positive
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/authorizations/{{AUTHORIZATION_KEY}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "permissionTypes": [
    "READ_USER_TASK",
    "UPDATE_USER_TASK"
  ],
  "ownerType": "USER",
  "ownerId": "test-user",
  "resourceType": "PROCESS_DEFINITION",
  "resourceId": "test-resource"
}

> {%
  client.test("Authorization update should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
    client.assert(response.body === "" || response.body === null, "Response body is not empty");
  });
%}

###
# @name delete-authorization-positive
< {%
  import {wait} from "js/wait";
  wait(4);
%}
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/authorizations/{{AUTHORIZATION_KEY}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Authorization update should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
    client.assert(response.body === "" || response.body === null, "Response body is not empty");
  });
%}


###
# @name process-definition-search-authorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-definitions/search
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "processDefinitionKey",
      "order": "ASC"
    }
  ],
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("Process definition search is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
    client.global.set("PROCESS_DEFINITION_KEY", response.body.items[0].processDefinitionKey);
  });
%}

###
# @name create-process-instance
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "processDefinitionVersion": 1,
  "tenantId": "<default>",
  "processDefinitionKey": {{PROCESS_DEFINITION_KEY}},
  "variables": {}
}

> {%
  client.test("Create process instance is successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });
let expectedDefinitionKey = client.global.get("PROCESS_DEFINITION_KEY");
  client.test("Response should contain process key", function () {
    client.assert(response.body.processDefinitionKey === expectedDefinitionKey, "Process definition key was not returned");
    client.global.set("PROCESS_INSTANCE_KEY", response.body.processInstanceKey);
  });
%}

###
# @name get-process-instance
< {%
  import {wait} from "js/wait"
  wait(3)
%}
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances/{{PROCESS_INSTANCE_KEY}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Process instance is successful returned", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  let expectedInstanceKey = client.global.get("PROCESS_INSTANCE_KEY");
  client.test("Response should not be empty", function () {
    client.assert(response.body.processInstanceKey === expectedInstanceKey, "Process instances wasn't returned");
  });
%}

###
# @name process-instance-search-unauthorized
< {%
  import {wait} from "js/wait"
  wait(3)
%}
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances/search
Authorization: Basic {{BASIC_AUTH_TOKEN_NO_AUTHORIZATIONS}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "processInstanceKey",
      "order": "ASC"
    }
  ],
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("Process instance search is successful without authorizations", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Response should be empty", function () {
    client.assert(response.body.items.length === 0, "Process instances were returned");
  });
%}

###
# @name get-process-instance-no-tenant-assignment
< {%
  import {wait} from "js/wait"
  wait(3)
%}
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances/{{PROCESS_INSTANCE_KEY}}
Authorization: Basic {{BASIC_AUTH_TOKEN_NO_AUTHORIZATIONS}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Get process instance is unsuccessful without tenant assignment", function () {
    client.assert(response.status === 404, "Expected 404, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/problem+json"), "Response is not JSON");
  });

  let expectedInstanceKey = client.global.get("PROCESS_INSTANCE_KEY");
  client.test("Response should contain correct error message", function () {
    client.assert(response.body.detail === `Process Instance with key '${expectedInstanceKey}' not found`, "Error message is incorrect");
  });
%}

### Assign Unauthorized User to Tenant
# @name assign-user-to-tenant
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/tenants/{{DEFAULT_TENANT_ID}}/users/{{USERNAME_NO_AUTHORIZATIONS}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json

> {%
  client.test("User assignment should be successful", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

###
# @name get-process-instance-unauthorized
< {%
  import {wait} from "js/wait"
  wait(4)
%}
GET {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/process-instances/{{PROCESS_INSTANCE_KEY}}
Authorization: Basic {{BASIC_AUTH_TOKEN_NO_AUTHORIZATIONS}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Get process instance is unsuccessful without authorizations", function () {
    client.assert(response.status === 403, "Expected 403, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/problem+json"), "Response is not JSON");
  });

  client.test("Response should contain correct error message", function () {
    client.assert(response.body.detail === "Unauthorized to perform operation 'READ_PROCESS_INSTANCE' on resource 'PROCESS_DEFINITION'", "Error message is incorrect");
  });
%}

###
# @name create-user-without-authorizations
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users
Authorization: Basic {{BASIC_AUTH_TOKEN_NO_AUTHORIZATIONS}}
Content-Type: application/json
Accept: application/json

{
  "password": "test1",
  "username": "test1",
  "name": "test1",
  "email": "test1@test.com"
}

> {%
  client.test("User creation should be Unauthorized", function () {
    client.assert(response.status === 403, "Expected 403, got " + response.status);
  });

  client.test("FORBIDDEN error message should be displayed", function () {
    client.assert(response.body.detail.includes("FORBIDDEN"), "Incorrect error message");
  });
%}

###
# @name test-user-update-no-authorizations
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users/{{USERNAME}}
Authorization: Basic {{BASIC_AUTH_TOKEN_NO_AUTHORIZATIONS}}
Content-Type: application/json
Accept: application/json

{
  "password": "newStrongPassword123",
  "name": "Sergii Updated",
  "email": "sergii.updated@camunda.com"
}

> {%
  client.test("User update should be unauthorized", function () {
    client.assert(response.status === 403, "Expected 403, got " + response.status);
  });

  client.test("FORBIDDEN error message should be displayed", function () {
    client.assert(response.body.detail.includes("FORBIDDEN"), "Incorrect error message");
  });
%}

###
# @name test-user-search-no-authorizations
< {%
  import {wait} from "js/wait"
  wait(4)
%}
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users/search
Authorization: Basic {{BASIC_AUTH_TOKEN_NO_AUTHORIZATIONS}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "username",
      "order": "ASC"
    }
  ],
  "filter": {
    "username": "{{USERNAME}}"
  },
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("User search is successful without authorizations", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });

  client.test("Response should not contain user data", function () {
    client.assert(response.body.items.length === 0, "Items array is not empty");
  });
%}

###
# @name create-process-definition-authorization-unauthorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/authorizations
Authorization: Basic {{BASIC_AUTH_TOKEN_NO_AUTHORIZATIONS}}
Content-Type: application/json
Accept: application/json

{
  "permissionTypes": [
    "READ_USER_TASK",
    "DELETE_PROCESS_INSTANCE",
    "CREATE_PROCESS_INSTANCE",
    "UPDATE_PROCESS_INSTANCE",
    "READ_PROCESS_INSTANCE",
    "READ_PROCESS_DEFINITION",
    "UPDATE_USER_TASK"
  ],
  "ownerType": "USER",
  "ownerId": "{{USERNAME_NO_AUTHORIZATIONS}}",
  "resourceType": "PROCESS_DEFINITION",
  "resourceId": "test-resource"
}

> {%
  client.test("Authorization creation should be unsuccessful", function () {
    client.assert(response.status === 403, "Expected 403, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    const contentType = response.headers.valueOf("Content-Type") || "";
    client.assert(
        contentType.toLowerCase().includes("application/problem+json"),
        `Response is not JSON, Content-Type was: ${contentType}`
    );
  });

  client.test("Forbidden error message should be displayed", function () {
    client.assert(response.body.detail == "Command 'CREATE' rejected with code 'FORBIDDEN': Insufficient permissions to perform operation 'CREATE' on resource 'AUTHORIZATION'", "Incorrect error message");
  });
%}

###
# @name update-process-definition-authorization-unauthorized
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/authorizations/{{AUTHORIZATION_KEY}}
Authorization: Basic {{BASIC_AUTH_TOKEN_NO_AUTHORIZATIONS}}
Content-Type: application/json
Accept: application/json

{
  "permissionTypes": [
    "READ_USER_TASK",
    "UPDATE_USER_TASK"
  ],
  "ownerType": "USER",
  "ownerId": "{{USERNAME_NO_AUTHORIZATIONS}}",
  "resourceType": "PROCESS_DEFINITION",
  "resourceId": "test-resource"
}

> {%
  client.test("Authorization creation should be unsuccessful", function () {
    client.assert(response.status === 403, "Expected 403, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    const contentType = response.headers.valueOf("Content-Type") || "";
    client.assert(
        contentType.toLowerCase().includes("application/problem+json"),
        `Response is not JSON, Content-Type was: ${contentType}`
    );
  });

  client.test("Forbidden error message should be displayed", function () {
    client.assert(response.body.detail == "Command 'UPDATE' rejected with code 'FORBIDDEN': Insufficient permissions to perform operation 'UPDATE' on resource 'AUTHORIZATION'", "Incorrect error message");
  });
%}

###
# @name delete-process-definition-authorization-unauthorized
< {%
  import {wait} from "js/wait";
  wait(4);
%}
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/authorizations/{{AUTHORIZATION_KEY}}
Authorization: Basic {{BASIC_AUTH_TOKEN_NO_AUTHORIZATIONS}}
Content-Type: application/json
Accept: application/json

> {%
  client.test("Authorization deletion should be unsuccessful", function () {
    client.assert(response.status === 403, "Expected 403, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    const contentType = response.headers.valueOf("Content-Type") || "";
    client.assert(
        contentType.toLowerCase().includes("application/problem+json"),
        `Response is not JSON, Content-Type was: ${contentType}`
    );
  });

  client.test("Forbidden error message should be displayed", function () {
    client.assert(response.body.detail == "Command 'DELETE' rejected with code 'FORBIDDEN': Insufficient permissions to perform operation 'DELETE' on resource 'AUTHORIZATION'", "Incorrect error message");
  });
%}

###
# @name upload-document-authorized
POST http://localhost:8080/v2/documents
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/json
Content-Type: multipart/form-data; boundary=boundary123

--boundary123
Content-Disposition: form-data; name="file"; filename="test.pdf"
X-Document-Metadata: {"fileName": "test.pdf", "size": 1234567}
Content-Type: application/pdf

< ./test.pdf
--boundary123

> {%
  client.test("Document upload should be successful", function () {
    client.assert(response.status === 201, "Expected 201, got " + response.status);
    client.global.set("DOCUMENT_ID", response.body.documentId);
    client.global.set("CONTENT_HASH", response.body.contentHash);
  });

  client.test("Response should be JSON", function () {
    const contentType = response.headers.valueOf("Content-Type") || "";
    client.assert(
        contentType.toLowerCase().includes("application/json"),
        `Response is not JSON, Content-Type was: ${contentType}`
    );
  });

  client.test("Response body should include document ID", function () {
    client.assert(response.body.documentId, "Document ID not found in the response");
  });
%}

###
# @no-cookie-jar
# @name upload-document-unauthorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/documents
Authorization: Basic {{BASIC_AUTH_TOKEN_NO_AUTHORIZATIONS}}
Accept: application/json
Content-Type: multipart/form-data; boundary=boundary123

--boundary123
Content-Disposition: form-data; name="file"; filename="test.pdf"
X-Document-Metadata: {"fileName": "test.pdf", "size": 1234567}
Content-Type: application/pdf

< ./test.pdf
--boundary123

> {%
  client.test("Document upload should be unsuccessful", function () {
    client.assert(response.status === 403, "Expected 403, got " + response.status);
  });

  client.test("Response should be JSON", function () {
    const contentType = response.headers.valueOf("Content-Type") || "";
    client.assert(
        contentType.toLowerCase().includes("application/problem+json"),
        `Response is not JSON, Content-Type was: ${contentType}`
    );
  });

  client.test("Unauthorized error message should be displayed", function () {
    client.assert(response.body.detail.includes("Unauthorized"), "Incorrect error message");
  });
%}

###
# @name download-document-authorized
GET http://localhost:8080/v2/documents/{{DOCUMENT_ID}}?contentHash={{CONTENT_HASH}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/octet-stream

> {%
  client.test("Document download should be successful", function () {
    client.assert(response.status === 200, "Expected 200, got " + response.status);
  });
%}

###
# @no-cookie-jar
# @name download-document-unauthorized
GET http://localhost:8080/v2/documents/{{DOCUMENT_ID}}?contentHash={{CONTENT_HASH}}
Authorization: Basic {{BASIC_AUTH_TOKEN_NO_AUTHORIZATIONS}}
Accept: application/octet-stream

> {%
  client.test("Document download should be unsuccessful", function () {
    client.assert(response.status === 403, "Expected 403, got " + response.status);
  });

  client.test("Unauthorized error message should be displayed", function () {
    client.assert(response.body.detail.includes("Unauthorized"), "Incorrect error message");
  });
%}

###
# @no-cookie-jar
# @name delete-document-unauthorized
DELETE http://localhost:8080/v2/documents/{{DOCUMENT_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN_NO_AUTHORIZATIONS}}

> {%
  client.test("Document deletion should be unsuccessful", function () {
    client.assert(response.status === 403, "Expected 403, got " + response.status);
  });

  client.test("Unauthorized error message should be displayed", function () {
    client.assert(response.body.detail.includes("Unauthorized"), "Incorrect error message");
  });
%}

###
# @name delete-and-verify-document
DELETE http://localhost:8080/v2/documents/{{DOCUMENT_ID}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}

> {%
  client.test("Document deletion should succeed", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });

  client.global.set("DOCUMENT_DELETED", "true");
%}

###
# @name verify-deleted-document
GET http://localhost:8080/v2/documents/{{DOCUMENT_ID}}?contentHash={{CONTENT_HASH}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Accept: application/octet-stream

> {%
  if (client.global.get("DOCUMENT_DELETED") === "true") {
    client.test("Document download after deletion should fail", function () {
      client.assert(response.status === 404, "Expected 404, got " + response.status);
    });
  }
%}

###
# @name delete-test-user-without-authorizations-athenticated
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users/{{USERNAME_NO_AUTHORIZATIONS}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json


> {%
  client.test("The user was deleted successfully.", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}

###
# @name test-delete-user-athorized
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users/{{USERNAME}}
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json


> {%
  client.test("The user was deleted successfully.", function () {
    client.assert(response.status === 204, "Expected 204, got " + response.status);
  });
%}
