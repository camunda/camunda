###
# @name test-create-user-unathorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users
Content-Type: application/json
Accept: application/json

{
  "password": "string",
  "username": "string",
  "name": "string",
  "email": "string"
}

> {%
  client.test("User creation should be unauthorized", function () {
    client.assert(response.status === 401, "Response status is not 401");
  });
%}

###
# @name test-create-user-athorized
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "password": "sergii",
  "username": "sergii",
  "name": "sergii",
  "email": "sergii@camunda.com"
}

> {%
  client.test("User creation should be authorized", function () {
    client.assert(response.status === 201, "Response status is not 201");
  });
%}

###
# @name test-user-update
PUT {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users/sergii
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "password": "newStrongPassword123",
  "name": "Sergii Updated",
  "email": "sergii.updated@camunda.com"
}

> {%
  client.test("User update should be authorized", function () {
    client.assert(response.status === 204, "Response status is not 204");
  });
%}


###
# @name test-user-search
< {%
  import {wait} from "js/wait"
  wait(2)
%}
POST {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users/search
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json

{
  "sort": [
    {
      "field": "username",
      "order": "ASC"
    }
  ],
  "filter": {
    "username": "sergii"
  },
  "page": {
    "from": 0,
    "limit": 100
  }
}

> {%
  client.test("User search should be authorized", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });

  client.test("Response should be JSON", function () {
    client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Response is not JSON");
  });
  client.test("Response should contain updated user data", function () {
    client.assert(response.body.items[0].username === "sergii", "Username was not updated correctly");
    client.assert(response.body.items[0].name === "Sergii Updated", "Name was not updated correctly");
    client.assert(response.body.items[0].email === "sergii.updated@camunda.com", "Email was not updated correctly");
  });
%}

###
# @name test-delete-user-athorized
< {%
  import {wait} from "js/wait"
  wait(3)
%}
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users/sergii
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json


> {%
  client.test("The user was deleted successfully.", function () {
    client.assert(response.status === 204, "Response status is not 201");
  });
%}

###
# @name test-delete-fake-user-athorized
DELETE {{ZEEBE_REST_ADDRESS_LOCAL}}/v2/users/fake
Authorization: Basic {{BASIC_AUTH_TOKEN}}
Content-Type: application/json
Accept: application/json


> {%
  client.test("The user was not found.", function () {
    client.assert(response.status === 404, "Response status is not 201");
    client.assert(response.body.detail === "Command 'DELETE' rejected with code 'NOT_FOUND': Expected to delete user with username fake, but a user with this username does not exist", "Error message is wrong");
  });
%}
