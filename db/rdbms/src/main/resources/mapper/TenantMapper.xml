<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
  ~ one or more contributor license agreements. See the NOTICE file distributed
  ~ with this work for additional information regarding copyright ownership.
  ~ Licensed under the Camunda License 1.0. You may not use this file
  ~ except in compliance with the Camunda License 1.0.
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.camunda.db.rdbms.sql.TenantMapper">

  <select id="count" parameterType="io.camunda.db.rdbms.read.domain.TenantDbQuery">
    SELECT COUNT(*)
    FROM ${prefix}TENANT t
    <include refid="io.camunda.db.rdbms.sql.TenantMapper.searchFilter"/>
  </select>

  <select id="search" parameterType="io.camunda.db.rdbms.read.domain.TenantDbQuery"
    resultMap="io.camunda.db.rdbms.sql.TenantMapper.tenantResultMap">
    SELECT * FROM (
    SELECT
    TENANT_KEY,
    t.TENANT_ID,
    NAME,
    DESCRIPTION
    FROM ${prefix}TENANT t
    <include refid="io.camunda.db.rdbms.sql.TenantMapper.searchFilter"/>
    ) t
    <include refid="io.camunda.db.rdbms.sql.Commons.keySetPageFilter"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.orderBy"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.paging"/>
  </select>

  <select id="countMembers" parameterType="io.camunda.db.rdbms.read.domain.TenantMemberDbQuery">
    SELECT COUNT(*)
    FROM ${prefix}TENANT_MEMBER tm
    JOIN ${prefix}TENANT t ON t.TENANT_ID = tm.TENANT_ID
    <include refid="io.camunda.db.rdbms.sql.TenantMapper.searchMemberFilter"/>
  </select>

  <select id="searchMembers" parameterType="io.camunda.db.rdbms.read.domain.TenantMemberDbQuery"
    resultMap="io.camunda.db.rdbms.sql.TenantMapper.tenantMemberResultMap">
    SELECT * FROM (
    SELECT
    t.TENANT_KEY,
    t.TENANT_ID,
    t.NAME,
    t.DESCRIPTION,
    tm.ENTITY_ID,
    tm.ENTITY_TYPE
    FROM ${prefix}TENANT_MEMBER tm
    JOIN ${prefix}TENANT t ON t.TENANT_ID = tm.TENANT_ID
    <include refid="io.camunda.db.rdbms.sql.TenantMapper.searchMemberFilter"/>
    ) t
    <include refid="io.camunda.db.rdbms.sql.Commons.keySetPageFilter"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.orderBy"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.paging"/>
  </select>

  <sql id="searchFilter">
    <where>
      <!-- authorization filters -->
      <if test="authorizedResourceIds != null and !authorizedResourceIds.isEmpty()">
        AND TENANT_ID IN
        <foreach collection="authorizedResourceIds" item="resourceId" open="(" separator=","
          close=")">
          #{resourceId}
        </foreach>
      </if>
      <if test="filter.key != null">AND TENANT_KEY = #{filter.key}</if>
      <if test="filter.tenantIds != null and !filter.tenantIds.isEmpty()">
        AND t.TENANT_ID IN
        <foreach collection="filter.tenantIds" item="value" open="(" separator=", " close=")">
          #{value}
        </foreach>
      </if>
      <if test="filter.name != null">AND NAME = #{filter.name}</if>

      <if
        test="filter.memberIds != null and !filter.memberIds.isEmpty() and filter.childMemberType != null">
        AND t.TENANT_ID IN ( SELECT tmf.TENANT_ID FROM ${prefix}TENANT_MEMBER tmf
        WHERE
        tmf.ENTITY_TYPE = #{filter.childMemberType}
        AND tmf.ENTITY_ID IN
        <foreach collection="filter.memberIds" item="memberId" open="(" separator="," close=")">
          #{memberId}
        </foreach>
        )
      </if>
      <if test="filter.memberIdsByType != null and !filter.memberIdsByType.isEmpty()">
        AND t.TENANT_ID IN ( SELECT tmt.TENANT_ID FROM ${prefix}TENANT_MEMBER tmt
        <where>
          <foreach collection="filter.memberIdsByType" index="memberType" item="values" open="("
            separator=" OR " close=")">
            <if test="values != null and !values.isEmpty()">
              tmt.ENTITY_TYPE = #{memberType} AND tmt.ENTITY_ID IN
              <foreach collection="values" item="value" open="(" separator=" , " close=")">
                #{value}
              </foreach>
            </if>
          </foreach>
        </where>
        )
      </if>
    </where>
  </sql>

  <sql id="searchMemberFilter">
    <where>
      <!-- authorization filters -->
      <if test="authorizedResourceIds != null and !authorizedResourceIds.isEmpty()">
        AND TENANT_ID IN
        <foreach collection="authorizedResourceIds" item="resourceId" open="(" separator=","
          close=")">
          #{resourceId}
        </foreach>
      </if>

      <if test="filter.tenantId != null">
        AND t.TENANT_ID = #{filter.tenantId}
      </if>

      <if test="filter.entityType != null">
        AND tm.ENTITY_TYPE = #{filter.entityType}
      </if>
    </where>
  </sql>

  <resultMap id="tenantResultMap" type="io.camunda.db.rdbms.write.domain.TenantDbModel">
    <id column="TENANT_ID" property="tenantId"/>
    <result column="TENANT_KEY" property="tenantKey"/>
    <result column="NAME" property="name"/>
    <result column="DESCRIPTION" property="description"/>
  </resultMap>

  <resultMap id="tenantMemberResultMap" type="io.camunda.db.rdbms.write.domain.TenantMemberDbModel">
    <constructor>
      <idArg column="TENANT_ID" javaType="java.lang.String"/>
      <arg column="ENTITY_ID" javaType="java.lang.String"/>
      <arg column="ENTITY_TYPE" javaType="java.lang.String"/>
    </constructor>
  </resultMap>

  <insert id="insert" parameterType="io.camunda.db.rdbms.write.domain.TenantDbModel">
    INSERT INTO ${prefix}TENANT (TENANT_KEY, TENANT_ID, NAME, DESCRIPTION)
    VALUES (#{tenantKey}, #{tenantId}, #{name}, #{description})
  </insert>

  <update id="update" parameterType="io.camunda.db.rdbms.write.domain.TenantDbModel">
    UPDATE ${prefix}TENANT
    SET NAME        = #{name},
        DESCRIPTION = #{description}
    WHERE TENANT_ID = #{tenantId}
  </update>

  <delete id="delete" parameterType="java.lang.String">
    DELETE
    FROM ${prefix}TENANT
    WHERE TENANT_ID = #{tenantId}
  </delete>

  <insert id="insertMember" parameterType="io.camunda.db.rdbms.write.domain.TenantMemberDbModel">
    INSERT INTO ${prefix}TENANT_MEMBER (TENANT_ID, ENTITY_ID, ENTITY_TYPE)
    VALUES (#{tenantId}, #{entityId}, #{entityType})
  </insert>

  <delete id="deleteMember" parameterType="io.camunda.db.rdbms.write.domain.TenantMemberDbModel">
    DELETE
    FROM ${prefix}TENANT_MEMBER
    WHERE TENANT_ID = #{tenantId}
      AND ENTITY_ID = #{entityId}
      AND ENTITY_TYPE = #{entityType}
  </delete>

</mapper>
