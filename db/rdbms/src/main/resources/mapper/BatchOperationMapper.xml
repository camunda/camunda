<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.camunda.db.rdbms.sql.BatchOperationMapper">

  <resultMap id="BatchOperationResultMap"
    type="io.camunda.db.rdbms.write.domain.BatchOperationDbModel">
    <constructor>
      <idArg column="BATCH_OPERATION_KEY" javaType="java.lang.String"/>
      <arg column="STATE"
        javaType="io.camunda.search.entities.BatchOperationEntity$BatchOperationState"/>
      <arg column="OPERATION_TYPE" javaType="java.lang.String"/>
      <arg column="START_DATE" javaType="java.time.OffsetDateTime"/>
      <arg column="END_DATE" javaType="java.time.OffsetDateTime"/>
      <arg column="OPERATIONS_TOTAL_COUNT" javaType="int"/>
      <arg column="OPERATIONS_FAILED_COUNT" javaType="int"/>
      <arg column="OPERATIONS_COMPLETED_COUNT" javaType="int"/>
      <arg column="PARTITION_ID" javaType="java.lang.String"/>
    </constructor>
  </resultMap>

  <resultMap id="BatchOperationItemResultMap"
    type="io.camunda.search.entities.BatchOperationEntity$BatchOperationItemEntity">
    <constructor>
      <idArg column="BATCH_OPERATION_KEY" javaType="java.lang.String"/>
      <arg column="ITEM_KEY" javaType="java.lang.Long"/>
      <arg column="PROCESS_INSTANCE_KEY" javaType="java.lang.Long"/>
      <arg column="STATE"
        javaType="io.camunda.search.entities.BatchOperationEntity$BatchOperationItemState"/>
      <arg column="PROCESSED_DATE" javaType="java.time.OffsetDateTime"/>
      <arg column="ERROR_MESSAGE" javaType="java.lang.String"/>
    </constructor>
  </resultMap>

  <insert id="insert" parameterType="io.camunda.db.rdbms.write.domain.BatchOperationDbModel">
    INSERT INTO ${prefix}BATCH_OPERATION (BATCH_OPERATION_KEY,
                                 STATE,
                                 OPERATION_TYPE,
                                 START_DATE,
                                 END_DATE,
                                 OPERATIONS_TOTAL_COUNT,
                                 OPERATIONS_FAILED_COUNT,
                                          OPERATIONS_COMPLETED_COUNT,
                                          PARTITION_ID)
    VALUES (#{batchOperationKey},
            #{state},
            #{operationType},
            #{startDate},
            #{endDate},
            #{operationsTotalCount},
            #{operationsFailedCount},
            #{operationsCompletedCount},
            #{partitionId})
  </insert>

  <insert id="insertItems"
    parameterType="io.camunda.db.rdbms.sql.BatchOperationMapper$BatchOperationItemsDto">
    INSERT INTO ${prefix}BATCH_OPERATION_ITEM (BATCH_OPERATION_KEY, ITEM_KEY, PROCESS_INSTANCE_KEY,
    PARTITION_ID)
    VALUES
    <foreach collection="items" item="item" separator=",">
      (#{batchOperationKey}, #{item.itemKey}, #{item.processInstanceKey}, #{partitionId})
    </foreach>
  </insert>

  <update id="updateCompleted"
    parameterType="io.camunda.db.rdbms.sql.BatchOperationMapper$BatchOperationUpdateDto">
    UPDATE ${prefix}BATCH_OPERATION
    SET STATE = #{state},
        END_DATE = #{endDate}
    WHERE BATCH_OPERATION_KEY = #{batchOperationKey}
      AND PARTITION_ID = #{partitionId}
  </update>

  <update id="updateItem"
    parameterType="io.camunda.db.rdbms.sql.BatchOperationMapper$BatchOperationItemDto">
    UPDATE ${prefix}BATCH_OPERATION_ITEM
    SET STATE = #{state},
        PROCESSED_DATE = #{processedDate},
        ERROR_MESSAGE = #{errorMessage}
    WHERE BATCH_OPERATION_KEY = #{batchOperationKey}
      AND ITEM_KEY = #{itemKey}
  </update>

  <update id="updateItemsWithState"
    parameterType="io.camunda.db.rdbms.sql.BatchOperationMapper$BatchOperationItemStatusUpdateDto">
    UPDATE ${prefix}BATCH_OPERATION_ITEM
    SET STATE = #{newState}
    WHERE BATCH_OPERATION_KEY = #{batchOperationKey}
      AND PARTITION_ID = #{partitionId}
      AND STATE = #{oldState}
  </update>

  <update id="incrementOperationsTotalCount"
    parameterType="io.camunda.db.rdbms.sql.BatchOperationMapper$BatchOperationUpdateTotalCountDto">
    UPDATE ${prefix}BATCH_OPERATION
    SET OPERATIONS_TOTAL_COUNT = OPERATIONS_TOTAL_COUNT + #{operationsTotalCount}
    WHERE BATCH_OPERATION_KEY = #{batchOperationKey}
      AND PARTITION_ID = #{partitionId}
  </update>

  <update id="incrementFailedOperationsCount"
    parameterType="io.camunda.db.rdbms.sql.BatchOperationMapper$BatchOperationUpdateCountsDto">
    UPDATE ${prefix}BATCH_OPERATION t
    SET OPERATIONS_FAILED_COUNT = OPERATIONS_FAILED_COUNT + 1
    WHERE BATCH_OPERATION_KEY = #{batchOperationKey}
      AND PARTITION_ID = #{partitionId}
    AND EXISTS(
      SELECT 1
      FROM ${prefix}BATCH_OPERATION_ITEM i
      WHERE i.BATCH_OPERATION_KEY = t.BATCH_OPERATION_KEY
      AND i.ITEM_KEY = #{itemKey}
    )
  </update>

  <update id="incrementCompletedOperationsCount"
    parameterType="io.camunda.db.rdbms.sql.BatchOperationMapper$BatchOperationUpdateCountsDto">
    UPDATE ${prefix}BATCH_OPERATION t
    SET OPERATIONS_COMPLETED_COUNT = OPERATIONS_COMPLETED_COUNT + 1
    WHERE BATCH_OPERATION_KEY = #{batchOperationKey}
      AND PARTITION_ID = #{partitionId}
      AND EXISTS(
      SELECT 1
      FROM ${prefix}BATCH_OPERATION_ITEM i
      WHERE i.BATCH_OPERATION_KEY = t.BATCH_OPERATION_KEY
        AND i.ITEM_KEY = #{itemKey}
    )
  </update>

  <select id="count" resultType="java.lang.Long">
    SELECT COUNT(batch_operation_key)
    FROM ${prefix}BATCH_OPERATION
    <include refid="io.camunda.db.rdbms.sql.BatchOperationMapper.searchFilter"/>
    group by batch_operation_key
  </select>

  <select id="search"
    parameterType="io.camunda.db.rdbms.read.domain.BatchOperationDbQuery"
    resultMap="BatchOperationResultMap"
    statementType="PREPARED">

  SELECT * FROM (
    SELECT
    bo.BATCH_OPERATION_KEY,
    bo.STATE,
    bo.OPERATION_TYPE,
    bo.START_DATE,
    bo.END_DATE,
    bo.OPERATIONS_TOTAL_COUNT,
    bo.OPERATIONS_FAILED_COUNT,
    bo.OPERATIONS_COMPLETED_COUNT
    bo.partition_id
    FROM ${prefix}BATCH_OPERATION bo
    <include refid="io.camunda.db.rdbms.sql.BatchOperationMapper.searchFilter"/>
    ) filtered
    INNER JOIN (
    SELECT batch_operation_key
    FROM batch_operation
    GROUP BY batch_operation_key
    LIMIT 1
    ) AS batch_grouped
    ON filtered.batch_operation_key = batch_grouped.batch_operation_key;
    <include refid="io.camunda.db.rdbms.sql.Commons.keySetPageFilter"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.orderBy"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.paging"/>
  </select>

  <sql id="searchFilter">
    WHERE 1 = 1
    <!-- basic filters -->
    <if test="filter.batchOperationIds != null and !filter.batchOperationIds.isEmpty()">
      AND BATCH_OPERATION_KEY IN
      <foreach collection="filter.batchOperationIds" item="value" open="(" separator=", "
        close=")">#{value}
      </foreach>
    </if>
    <if test="filter.operationTypes != null and !filter.operationTypes.isEmpty()">
      AND OPERATION_TYPE IN
      <foreach collection="filter.operationTypes" item="value" open="(" separator=", " close=")">
        #{value}
      </foreach>
    </if>
    <if test="filter.state != null and !filter.state.isEmpty()">
      AND STATE IN
      <foreach collection="filter.state" item="value" open="(" separator=", " close=")">#{value}
      </foreach>
    </if>
  </sql>

  <select id="countItems" resultType="java.lang.Long">
    SELECT COUNT(*)
    FROM ${prefix}BATCH_OPERATION_ITEM
    <include refid="io.camunda.db.rdbms.sql.BatchOperationMapper.itemSearchFilter"/>
  </select>

  <select id="searchItems"
    parameterType="io.camunda.db.rdbms.read.domain.BatchOperationItemDbQuery"
    resultMap="BatchOperationItemResultMap"
    statementType="PREPARED">

    SELECT * FROM (
    SELECT BATCH_OPERATION_KEY, ITEM_KEY, PROCESS_INSTANCE_KEY, STATE, PROCESSED_DATE, ERROR_MESSAGE
    FROM ${prefix}BATCH_OPERATION_ITEM
    <include refid="io.camunda.db.rdbms.sql.BatchOperationMapper.itemSearchFilter"/>
    ) filtered
    <include refid="io.camunda.db.rdbms.sql.Commons.keySetPageFilter"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.orderBy"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.paging"/>
  </select>

  <sql id="itemSearchFilter">
    WHERE 1 = 1
    <!-- basic filters -->
    <if test="filter.batchOperationIds != null and !filter.batchOperationIds.isEmpty()">
      AND BATCH_OPERATION_KEY IN
      <foreach collection="filter.batchOperationIds" item="value" open="(" separator=", "
        close=")">#{value}
      </foreach>
    </if>
    <if test="filter.itemKeys != null and !filter.itemKeys.isEmpty()">
      AND ITEM_KEYS IN
      <foreach collection="filter.itemKeys" item="value" open="(" separator=", " close=")">
        #{value}
      </foreach>
    </if>
    <if test="filter.processInstanceKeys != null and !filter.processInstanceKeys.isEmpty()">
      AND PROCESS_INSTANCE_KEY IN
      <foreach collection="filter.processInstanceKeys" item="value" open="(" separator=", " close=")">#{value}
      </foreach>
    </if>
    <if test="filter.state != null and !filter.state.isEmpty()">
      AND STATE IN
      <foreach collection="filter.state" item="value" open="(" separator=", " close=")">#{value}
      </foreach>
    </if>
  </sql>

</mapper>
