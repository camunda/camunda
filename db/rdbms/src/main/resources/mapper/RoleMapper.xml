<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
  ~ one or more contributor license agreements. See the NOTICE file distributed
  ~ with this work for additional information regarding copyright ownership.
  ~ Licensed under the Camunda License 1.0. You may not use this file
  ~ except in compliance with the Camunda License 1.0.
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.camunda.db.rdbms.sql.RoleMapper">

  <select id="count" parameterType="io.camunda.db.rdbms.read.domain.RoleDbQuery">
    SELECT COUNT(*)
    FROM ${prefix}ROLES r
    LEFT JOIN ${prefix}ROLE_MEMBER rm ON r.ROLE_ID = rm.ROLE_ID
    AND rm.ENTITY_TYPE = #{filter.childMemberType}
    <if test="filter.tenantId != null">
      JOIN ${prefix}TENANT_MEMBER tm ON r.ROLE_ID = tm.ENTITY_ID
      AND tm.ENTITY_TYPE = 'ROLE'
    </if>
    <include refid="io.camunda.db.rdbms.sql.RoleMapper.searchFilter"/>
  </select>

  <select id="search" parameterType="io.camunda.db.rdbms.read.domain.RoleDbQuery"
    resultMap="io.camunda.db.rdbms.sql.RoleMapper.roleResultMap">
    SELECT * FROM (
    SELECT
    r.ROLE_ID,
    r.ROLE_KEY,
    r.NAME,
    r.DESCRIPTION,
    rm.ROLE_ID AS MEMBER_ROLE_ID,
    rm.ENTITY_ID AS MEMBER_ENTITY_ID,
    rm.ENTITY_TYPE AS MEMBER_ENTITY_TYPE
    FROM ${prefix}ROLES r
    LEFT JOIN ${prefix}ROLE_MEMBER rm ON r.ROLE_ID = rm.ROLE_ID
    <if test="filter.tenantId != null">
      JOIN ${prefix}TENANT_MEMBER tm ON r.ROLE_ID = tm.ENTITY_ID
      AND tm.ENTITY_TYPE = 'ROLE'
    </if>
    <include refid="io.camunda.db.rdbms.sql.RoleMapper.searchFilter"/>
    ) t
    <include refid="io.camunda.db.rdbms.sql.Commons.keySetPageFilter"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.orderBy"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.paging"/>
  </select>

  <sql id="searchFilter">
    WHERE 1 = 1
    <if test="filter.roleId != null">AND r.ROLE_ID = #{filter.roleId}</if>
    <if test="filter.name != null">AND r.NAME = #{filter.name}</if>
    <if test="filter.memberIds != null and !filter.memberIds.isEmpty()">
      AND rm.ENTITY_ID IN
      <foreach collection="filter.memberIds" item="memberId" open="(" separator="," close=")">
        #{memberId}
      </foreach>
      AND rm.ENTITY_TYPE = #{filter.childMemberType}
    </if>
    <if test="filter.memberIdsByType != null and !filter.memberIdsByType.isEmpty()">
      <foreach collection="filter.memberIdsByType" index="memberType" item="values" open="AND (" separator=" OR " close=")">
        <if test="values != null and !values.isEmpty()">
          rm.ENTITY_TYPE = #{memberType} AND rm.ENTITY_ID IN
          <foreach collection="values" item="value" open="(" separator=" , " close=")">
            #{value}
          </foreach>
        </if>
      </foreach>
    </if>
    <if test="filter.tenantId != null">AND tm.TENANT_ID = #{filter.tenantId}</if>
  </sql>

  <resultMap id="roleResultMap" type="io.camunda.db.rdbms.write.domain.RoleDbModel">
    <id column="ROLE_ID" property="roleId" />
    <result column="ROLE_KEY" property="roleKey" />
    <result column="NAME" property="name"/>
    <result column="DESCRIPTION" property="description"/>
    <collection property="members" ofType="io.camunda.db.rdbms.write.domain.RoleMemberDbModel"
      javaType="java.util.List">
      <constructor>
        <idArg column="MEMBER_ROLE_ID" javaType="java.lang.String"/>
        <idArg column="MEMBER_ENTITY_ID" javaType="java.lang.String"/>
        <arg column="MEMBER_ENTITY_TYPE" javaType="java.lang.String"/>
      </constructor>
    </collection>
  </resultMap>

  <insert id="insert" parameterType="io.camunda.db.rdbms.write.domain.RoleDbModel">
    INSERT INTO ${prefix}ROLES (ROLE_KEY, ROLE_ID, NAME, DESCRIPTION)
    VALUES (#{roleKey}, #{roleId}, #{name}, #{description})
  </insert>

  <update id="update" parameterType="io.camunda.db.rdbms.write.domain.RoleDbModel">
    UPDATE ${prefix}ROLES
    SET NAME = #{name},
        DESCRIPTION = #{description}
    WHERE ROLE_ID = #{roleId}
  </update>

  <delete id="delete" parameterType="java.lang.String">
    DELETE
    FROM ${prefix}ROLES
    WHERE ROLE_ID = #{roleId}
  </delete>

  <insert id="insertMember" parameterType="io.camunda.db.rdbms.write.domain.RoleMemberDbModel">
    INSERT INTO ${prefix}ROLE_MEMBER (ROLE_ID, ENTITY_ID, ENTITY_TYPE)
    VALUES (#{roleId}, #{entityId}, #{entityType})
  </insert>

  <delete id="deleteMember" parameterType="io.camunda.db.rdbms.write.domain.RoleMemberDbModel">
    DELETE
    FROM ${prefix}ROLE_MEMBER
    WHERE ROLE_ID = #{roleId}
      AND ENTITY_ID = #{entityId}
      AND ENTITY_TYPE = #{entityType}
  </delete>

</mapper>
