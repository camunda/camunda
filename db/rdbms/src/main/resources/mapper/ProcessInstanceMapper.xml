<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
  ~ one or more contributor license agreements. See the NOTICE file distributed
  ~ with this work for additional information regarding copyright ownership.
  ~ Licensed under the Camunda License 1.0. You may not use this file
  ~ except in compliance with the Camunda License 1.0.
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.camunda.db.rdbms.sql.ProcessInstanceMapper">
  <select id="findOne" parameterType="java.lang.Long"
    resultMap="io.camunda.db.rdbms.sql.ProcessInstanceMapper.searchResultMap">
    SELECT pi.PROCESS_INSTANCE_KEY,
           pi.PROCESS_DEFINITION_ID,
           pi.PROCESS_DEFINITION_KEY,
           pi.STATE,
           pi.START_DATE,
           pi.END_DATE,
           pi.TENANT_ID,
           CASE
               WHEN pi.NUM_INCIDENTS = 0 THEN FALSE
               ELSE TRUE
           END AS HAS_INCIDENT,
           pi.PARENT_PROCESS_INSTANCE_KEY,
           pi.PARENT_ELEMENT_INSTANCE_KEY,
           pi.ELEMENT_ID,
           pi.VERSION AS PROCESS_DEFINITION_VERSION,
           pi.TREE_PATH,
           pd.NAME        AS PROCESS_DEFINITION_NAME,
           pd.VERSION_TAG AS PROCESS_DEFINITION_VERSION_TAG,
           NULL AS TAGS
    FROM ${prefix}PROCESS_INSTANCE pi
           LEFT JOIN ${prefix}PROCESS_DEFINITION pd ON (pi.PROCESS_DEFINITION_KEY = pd.PROCESS_DEFINITION_KEY)
    WHERE PROCESS_INSTANCE_KEY = #{processInstanceKey}
  </select>

  <select id="count" resultType="java.lang.Long">
    SELECT COUNT(*)
    FROM ${prefix}PROCESS_INSTANCE pi
    <!-- TODO: only when definition filters are active -->
    LEFT JOIN ${prefix}PROCESS_DEFINITION pd ON (pi.PROCESS_DEFINITION_KEY = pd.PROCESS_DEFINITION_KEY)
    <include refid="io.camunda.db.rdbms.sql.ProcessInstanceMapper.searchAndAuthFilter"/>
    <if test="filter.orFilters != null and !filter.orFilters.isEmpty()">
      OR (
      <foreach collection="filter.orFilters" item="filter" separator=" OR ">
        <trim prefix="(" suffix=")">
          <trim prefixOverrides="AND">
            <include refid="io.camunda.db.rdbms.sql.ProcessInstanceMapper.searchFilter"/>
          </trim>
        </trim>
      </foreach>
      )
    </if>
  </select>

  <!-- default search statement for databases supporting LIMIT/OFFSET-->
  <select id="search" parameterType="io.camunda.db.rdbms.read.domain.ProcessInstanceDbQuery"
    resultMap="io.camunda.db.rdbms.sql.ProcessInstanceMapper.searchResultMap">
    SELECT * FROM (
    SELECT
    pi.PROCESS_INSTANCE_KEY,
    pi.PROCESS_DEFINITION_ID,
    pi.PROCESS_DEFINITION_KEY,
    pi.STATE,
    pi.START_DATE,
    pi.END_DATE,
    pi.TENANT_ID,
    CASE
        WHEN pi.NUM_INCIDENTS = 0 THEN FALSE
        ELSE TRUE
    END AS HAS_INCIDENT,
    pi.PARENT_PROCESS_INSTANCE_KEY,
    pi.PARENT_ELEMENT_INSTANCE_KEY,
    pi.ELEMENT_ID,
    pi.VERSION PROCESS_DEFINITION_VERSION,
    pi.TREE_PATH,
    pd.NAME AS PROCESS_DEFINITION_NAME,
    pd.VERSION_TAG AS PROCESS_DEFINITION_VERSION_TAG,
    NULL AS TAGS
    FROM ${prefix}PROCESS_INSTANCE pi
    LEFT JOIN ${prefix}PROCESS_DEFINITION pd ON (pi.PROCESS_DEFINITION_KEY = pd.PROCESS_DEFINITION_KEY)
    <include refid="io.camunda.db.rdbms.sql.ProcessInstanceMapper.searchAndAuthFilter"/>
    ) t
    <include refid="io.camunda.db.rdbms.sql.Commons.keySetPageFilter"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.orderBy"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.paging"/>
  </select>

  <sql id="searchAndAuthFilter">
    <where>
      <if test="authorizedResourceIds != null and !authorizedResourceIds.isEmpty()">
        AND pi.PROCESS_DEFINITION_ID IN
        <foreach collection="authorizedResourceIds" item="resourceId" open="(" separator=","
          close=")">
          #{resourceId}
        </foreach>
      </if>
      <if test="authorizedTenantIds != null and !authorizedTenantIds.isEmpty()">
        AND pi.TENANT_ID IN
        <foreach collection="authorizedTenantIds" item="tenantId" open="(" separator="," close=")">
          #{tenantId}
        </foreach>
      </if>
      <include refid="io.camunda.db.rdbms.sql.ProcessInstanceMapper.searchFilter"/>
      <if test="filter.orFilters != null and !filter.orFilters.isEmpty()">
        OR (
        <foreach collection="filter.orFilters" item="filter" separator=" OR ">
          <trim prefix="(" suffix=")">
            <trim prefixOverrides="AND">
              <include refid="io.camunda.db.rdbms.sql.ProcessInstanceMapper.searchFilter"/>
            </trim>
          </trim>
        </foreach>
        )
      </if>

    </where>
  </sql>

  <sql id="searchFilter">
    <!-- basic filters -->
    <if
      test="filter.processInstanceKeyOperations != null and !filter.processInstanceKeyOperations.isEmpty()">
      <foreach collection="filter.processInstanceKeyOperations" item="operation">
        AND PROCESS_INSTANCE_KEY
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if
      test="filter.processDefinitionIdOperations != null and !filter.processDefinitionIdOperations.isEmpty()">
      <foreach collection="filter.processDefinitionIdOperations" item="operation">
        AND pi.PROCESS_DEFINITION_ID
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if
      test="filter.processDefinitionKeyOperations != null and !filter.processDefinitionKeyOperations.isEmpty()">
      <foreach collection="filter.processDefinitionKeyOperations" item="operation">
        AND pi.PROCESS_DEFINITION_KEY
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if
      test="filter.parentProcessInstanceKeyOperations != null and !filter.parentProcessInstanceKeyOperations.isEmpty()">
      <foreach collection="filter.parentProcessInstanceKeyOperations" item="operation">
        AND PARENT_PROCESS_INSTANCE_KEY
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if
      test="filter.parentFlowNodeInstanceKeyOperations != null and !filter.parentFlowNodeInstanceKeyOperations.isEmpty()">
      <foreach collection="filter.parentFlowNodeInstanceKeyOperations" item="operation">
        AND PARENT_ELEMENT_INSTANCE_KEY
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.stateOperations != null and !filter.stateOperations.isEmpty()">
      <foreach collection="filter.stateOperations" item="operation">
        AND pi.STATE
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.tenantIdOperations != null and !filter.tenantIdOperations.isEmpty()">
      <foreach collection="filter.tenantIdOperations" item="operation">
        AND pi.TENANT_ID
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.hasIncident != null">
      <if test="filter.hasIncident == true">
        AND pi.NUM_INCIDENTS > 0
      </if>
      <if test="filter.hasIncident == false">
        AND pi.NUM_INCIDENTS = 0
      </if>
    </if>
    <if test="filter.hasRetriesLeft != null">
      AND EXISTS (
      SELECT 1
      FROM ${prefix}JOB j
      WHERE j.PROCESS_INSTANCE_KEY = pi.PROCESS_INSTANCE_KEY
      AND j.STATE IN ('FAILED', 'ERROR_THROWN')
      <if test="filter.hasRetriesLeft == true">
        AND j.RETRIES > 0
      </if>
      <if test="filter.hasRetriesLeft == false">
        AND j.RETRIES = 0
      </if>
      )
    </if>
    <if test="filter.partitionId != null">
      AND pi.PARTITION_ID = #{filter.partitionId}
    </if>

    <!-- date filters -->
    <if test="filter.startDateOperations != null and !filter.startDateOperations.isEmpty()">
      <foreach collection="filter.startDateOperations" item="operation">
        AND START_DATE
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.endDateOperations != null and !filter.endDateOperations.isEmpty()">
      <foreach collection="filter.endDateOperations" item="operation">
        AND END_DATE
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>

    <!-- process definition filters -->
    <if
      test="filter.processDefinitionNameOperations != null and !filter.processDefinitionNameOperations.isEmpty()">
      <foreach collection="filter.processDefinitionNameOperations" item="operation">
        AND pd.NAME
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if
      test="filter.processDefinitionVersionOperations != null and !filter.processDefinitionVersionOperations.isEmpty()">
      <foreach collection="filter.processDefinitionVersionOperations" item="operation">
        AND pd.VERSION
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>

    <!-- Flow node instance filters -->
    <if test="filter.flowNodeIdOperations != null and !filter.flowNodeIdOperations.isEmpty()">
      AND EXISTS (
      SELECT 1
      FROM ${prefix}FLOW_NODE_INSTANCE fni
      WHERE fni.PROCESS_INSTANCE_KEY = pi.PROCESS_INSTANCE_KEY
      <foreach collection="filter.flowNodeIdOperations" item="operation">
        AND fni.FLOW_NODE_ID
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
      <if
        test="filter.flowNodeInstanceStateOperations != null and !filter.flowNodeInstanceStateOperations.isEmpty()">
        <foreach collection="filter.flowNodeInstanceStateOperations" item="operation">
          AND fni.STATE
          <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
        </foreach>
      </if>
      <if test="filter.hasFlowNodeInstanceIncident != null">
        <if test="filter.hasFlowNodeInstanceIncident == true">
          AND fni.INCIDENT_KEY IS NOT NULL
        </if>
        <if test="filter.hasFlowNodeInstanceIncident == false">
          AND fni.INCIDENT_KEY IS NULL
        </if>
      </if>
      )
    </if>

    <!-- Variable filters -->
    <if
      test="filter.processDefinitionVersionTagOperations != null and !filter.processDefinitionVersionTagOperations.isEmpty()">
      <foreach collection="filter.processDefinitionVersionTagOperations" item="operation">
        AND pd.VERSION_TAG
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>

    <!-- Variable filters -->
    <if test="filter.variableFilters != null and !filter.variableFilters.isEmpty()">
      <foreach collection="filter.variableFilters" item="variableFilter"
        open="AND (" separator=" AND " close=")">
        EXISTS (
        SELECT 1
        FROM ${prefix}VARIABLE v
        WHERE v.PROCESS_INSTANCE_KEY = pi.PROCESS_INSTANCE_KEY
        AND v.VAR_NAME = #{variableFilter.name}
        <if
          test="variableFilter.valueOperations != null and !variableFilter.valueOperations.isEmpty()">
          <foreach collection="variableFilter.valueOperations" item="operation">
            AND
            <include refid="io.camunda.db.rdbms.sql.Commons.variableOperationCondition"/>
          </foreach>
        </if>
        )
      </foreach>
    </if>

    <!-- Error message filters -->
    <if test="filter.errorMessageOperations != null and !filter.errorMessageOperations.isEmpty()">
      <foreach collection="filter.errorMessageOperations" item="operation">
        AND EXISTS (
        SELECT 1
        FROM INCIDENT i
        WHERE i.PROCESS_INSTANCE_KEY = pi.PROCESS_INSTANCE_KEY
        AND i.ERROR_MESSAGE
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
        )
      </foreach>
    </if>
    <if
      test="filter.incidentErrorHashCodeOperations != null and !filter.incidentErrorHashCodeOperations.isEmpty()">
      <foreach collection="filter.incidentErrorHashCodeOperations" item="operation">
        AND EXISTS (
        SELECT 1
        FROM INCIDENT i
        WHERE i.PROCESS_INSTANCE_KEY = pi.PROCESS_INSTANCE_KEY
        AND i.ERROR_MESSAGE_HASH
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
        )
      </foreach>
    </if>
    <if
      test="filter.batchOperationIdOperations != null and !filter.batchOperationIdOperations.isEmpty()">
      AND EXISTS (
      SELECT 1
      FROM ${prefix}BATCH_OPERATION_ITEM boi
      WHERE boi.PROCESS_INSTANCE_KEY = pi.PROCESS_INSTANCE_KEY
      <foreach collection="filter.batchOperationIdOperations" item="operation">
        AND boi.BATCH_OPERATION_KEY
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
      )
    </if>
  </sql>

  <resultMap id="searchResultMap" type="io.camunda.search.entities.ProcessInstanceEntity">
    <constructor>
      <idArg column="PROCESS_INSTANCE_KEY" javaType="java.lang.Long"/>
      <arg column="PROCESS_DEFINITION_ID" javaType="java.lang.String"/>
      <arg column="PROCESS_DEFINITION_NAME" javaType="java.lang.String"/>
      <arg column="PROCESS_DEFINITION_VERSION" javaType="java.lang.Integer"/>
      <arg column="PROCESS_DEFINITION_VERSION_TAG" javaType="java.lang.String"/>
      <arg column="PROCESS_DEFINITION_KEY" javaType="java.lang.Long"/>
      <arg column="PARENT_PROCESS_INSTANCE_KEY" javaType="java.lang.Long"/>
      <arg column="PARENT_ELEMENT_INSTANCE_KEY" javaType="java.lang.Long"/>
      <arg column="START_DATE" javaType="java.time.OffsetDateTime" />
      <arg column="END_DATE" javaType="java.time.OffsetDateTime" />
      <arg column="STATE" javaType="io.camunda.search.entities.ProcessInstanceEntity$ProcessInstanceState"/>
      <arg column="HAS_INCIDENT" javaType="java.lang.Boolean"/>
      <arg column="TENANT_ID" javaType="java.lang.String"/>
      <arg column="TREE_PATH" javaType="java.lang.String"/>
      <arg column="TAGS" javaType="java.util.Set"
           typeHandler="io.camunda.db.rdbms.typehandler.EmptyStringSetTypeHandler"/>
    </constructor>

  </resultMap>

  <select id="flowNodeStatistics"
    parameterType="java.lang.Long"
    resultMap="io.camunda.db.rdbms.sql.Commons.flowNodeStatisticsResultMap">
    SELECT
      fni.FLOW_NODE_ID,
      SUM(CASE WHEN fni.STATE = 'ACTIVE' AND
                    fni.NUM_SUBPROCESS_INCIDENTS = 0 AND
                    fni.INCIDENT_KEY IS NULL THEN 1 ELSE 0 END)
        AS COUNT_ACTIVE,
      SUM(CASE WHEN fni.STATE = 'TERMINATED' THEN 1 ELSE 0 END)
        AS COUNT_CANCELED,
      SUM(CASE WHEN fni.STATE = 'COMPLETED' THEN 1 ELSE 0 END)
        AS COUNT_COMPLETED,
      SUM(CASE WHEN fni.STATE = 'ACTIVE' AND
                    (fni.NUM_SUBPROCESS_INCIDENTS > 0 OR
                     fni.INCIDENT_KEY IS NOT NULL) THEN 1 ELSE 0 END)
        AS COUNT_INCIDENTS
    FROM ${prefix}PROCESS_INSTANCE pi
      JOIN ${prefix}FLOW_NODE_INSTANCE fni ON (pi.PROCESS_INSTANCE_KEY = fni.PROCESS_INSTANCE_KEY)
    WHERE pi.PROCESS_INSTANCE_KEY = #{processInstanceKey}
      AND fni.TYPE != 'MULTI_INSTANCE_BODY'
    GROUP BY fni.FLOW_NODE_ID
  </select>

  <insert id="insert" parameterType="io.camunda.db.rdbms.write.domain.ProcessInstanceDbModel">
    INSERT INTO ${prefix}PROCESS_INSTANCE (PROCESS_INSTANCE_KEY, PROCESS_DEFINITION_ID,
                                           PROCESS_DEFINITION_KEY, STATE, START_DATE, END_DATE,
                                           TENANT_ID, PARENT_PROCESS_INSTANCE_KEY,
                                           PARENT_ELEMENT_INSTANCE_KEY,
                                           NUM_INCIDENTS, VERSION, PARTITION_ID, TREE_PATH,
                                           HISTORY_CLEANUP_DATE)
    VALUES (#{processInstanceKey}, #{processDefinitionId}, #{processDefinitionKey}, #{state},
            #{startDate, jdbcType=TIMESTAMP}, #{endDate, jdbcType=TIMESTAMP}, #{tenantId},
            #{parentProcessInstanceKey},
            #{parentElementInstanceKey}, #{numIncidents}, #{version}, #{partitionId}, #{treePath},
            #{historyCleanupDate, jdbcType=TIMESTAMP})
  </insert>

  <update id="update" parameterType="io.camunda.db.rdbms.write.domain.ProcessInstanceDbModel">
    UPDATE PROCESS_INSTANCE
    SET PROCESS_DEFINITION_ID       = #{processDefinitionId},
        PROCESS_DEFINITION_KEY      = #{processDefinitionKey},
        STATE                       = #{state},
        START_DATE                  = #{startDate, jdbcType=TIMESTAMP},
        END_DATE                    = #{endDate, jdbcType=TIMESTAMP},
        TENANT_ID                   = #{tenantId},
        PARENT_PROCESS_INSTANCE_KEY = #{parentProcessInstanceKey},
        PARENT_ELEMENT_INSTANCE_KEY = #{parentElementInstanceKey},
        NUM_INCIDENTS               = #{numIncidents},
        VERSION                     = #{version},
        TREE_PATH                   = #{treePath},
        HISTORY_CLEANUP_DATE        = #{historyCleanupDate, jdbcType=TIMESTAMP}
    WHERE PROCESS_INSTANCE_KEY = #{processInstanceKey}
  </update>

  <update id="updateStateAndEndDate"
    parameterType="io.camunda.db.rdbms.sql.ProcessInstanceMapper$EndProcessInstanceDto">
    UPDATE ${prefix}PROCESS_INSTANCE p
    SET STATE    = #{state},
        END_DATE = #{endDate}
    WHERE PROCESS_INSTANCE_KEY = #{processInstanceKey}
  </update>

  <update id="incrementIncidentCount" parameterType="java.lang.Long">
    UPDATE ${prefix}PROCESS_INSTANCE
    SET NUM_INCIDENTS = NUM_INCIDENTS + 1
    WHERE PROCESS_INSTANCE_KEY = #{id}
  </update>

  <update id="decrementIncidentCount" parameterType="java.lang.Long">
    UPDATE ${prefix}PROCESS_INSTANCE
    SET NUM_INCIDENTS = NUM_INCIDENTS - 1
    WHERE PROCESS_INSTANCE_KEY = #{id}
  </update>

  <update id="updateHistoryCleanupDate">
    UPDATE ${prefix}PROCESS_INSTANCE
    SET HISTORY_CLEANUP_DATE = #{historyCleanupDate, jdbcType=TIMESTAMP}
    WHERE PROCESS_INSTANCE_KEY = #{processInstanceKey}
  </update>

  <delete id="cleanupHistory">
    <bind name="tableName" value="'PROCESS_INSTANCE'"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.historyCleanup"/>
  </delete>
</mapper>
