<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
  ~ one or more contributor license agreements. See the NOTICE file distributed
  ~ with this work for additional information regarding copyright ownership.
  ~ Licensed under the Camunda License 1.0. You may not use this file
  ~ except in compliance with the Camunda License 1.0.
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.camunda.db.rdbms.sql.AuthorizationMapper">

  <select id="count" parameterType="io.camunda.db.rdbms.read.domain.AuthorizationDbQuery">
    SELECT COUNT(*) FROM (
    SELECT DISTINCT AUTHORIZATION_KEY, OWNER_ID, OWNER_TYPE, RESOURCE_TYPE, RESOURCE_ID
    FROM ${prefix}AUTHORIZATIONS a
    <include refid="io.camunda.db.rdbms.sql.AuthorizationMapper.searchFilter"/>
    ) t
  </select>

  <select id="search" parameterType="io.camunda.db.rdbms.read.domain.AuthorizationDbQuery"
    resultMap="io.camunda.db.rdbms.sql.AuthorizationMapper.authorizationResultMap">
    SELECT
    t.AUTHORIZATION_KEY,
    t.OWNER_ID,
    t.OWNER_TYPE,
    t.RESOURCE_TYPE,
    a.PERMISSION_TYPE,
    a.RESOURCE_ID
    FROM (
    SELECT * FROM (
    SELECT DISTINCT
    AUTHORIZATION_KEY,
    OWNER_ID,
    OWNER_TYPE,
    RESOURCE_TYPE,
    RESOURCE_ID
    FROM ${prefix}AUTHORIZATIONS
    <include refid="io.camunda.db.rdbms.sql.AuthorizationMapper.searchFilter"/>
    ) t
    <include refid="io.camunda.db.rdbms.sql.Commons.keySetPageFilter"/>
    <!-- inner orderBy for keyset pagination -->
    <include refid="io.camunda.db.rdbms.sql.Commons.orderBy"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.paging"/>
    ) t
    JOIN ${prefix}AUTHORIZATIONS a ON t.AUTHORIZATION_KEY = a.AUTHORIZATION_KEY AND t.OWNER_ID = a.OWNER_ID AND t.OWNER_TYPE = a.OWNER_TYPE AND
    t.RESOURCE_TYPE = a.RESOURCE_TYPE AND t.RESOURCE_ID = a.RESOURCE_ID
    <!-- outer orderBy for actual sorting -->
    <include refid="io.camunda.db.rdbms.sql.Commons.orderBy"/>
  </select>

  <sql id="searchFilter">
    WHERE 1 = 1
    <if test="filter.ownerType != null">AND OWNER_TYPE = #{filter.ownerType}</if>
    <if test="filter.resourceType != null">AND RESOURCE_TYPE = #{filter.resourceType}</if>
    <if test="filter.permissionTypes != null and !filter.permissionTypes.isEmpty()">
        AND PERMISSION_TYPE IN
      <foreach collection="filter.permissionTypes" item="value" open="(" separator=", "
        close=")">#{value}
      </foreach>
    </if>
    <if test="filter.ownerIds != null and !filter.ownerIds.isEmpty()">
      AND OWNER_ID IN
      <foreach collection="filter.ownerIds" item="value" open="(" separator=", "
        close=")">#{value}
      </foreach>
    </if>
    <if test="filter.resourceIds != null and !filter.resourceIds.isEmpty()">
      AND RESOURCE_ID IN
      <foreach collection="filter.resourceIds" item="value" open="(" separator=", "
        close=")">#{value}
      </foreach>
    </if>
  </sql>

  <resultMap id="authorizationResultMap"
    type="io.camunda.db.rdbms.write.domain.AuthorizationDbModel">
    <id column="AUTHORIZATION_KEY" property="authorizationKey"/>
    <id column="OWNER_ID" property="ownerId"/>
    <id column="OWNER_TYPE" property="ownerType"/>
    <id column="RESOURCE_TYPE" property="resourceType"/>
    <id column="RESOURCE_ID" property="resourceId" />
    <collection property="permissionTypes"
      ofType="io.camunda.zeebe.protocol.record.value.PermissionType"
      javaType="java.util.Set">
      <id column="PERMISSION_TYPE"/>
    </collection>
  </resultMap>

  <insert id="insert" parameterType="io.camunda.db.rdbms.write.domain.AuthorizationDbModel"
    flushCache="true">
    INSERT INTO ${prefix}AUTHORIZATIONS (AUTHORIZATION_KEY, OWNER_ID, OWNER_TYPE, RESOURCE_TYPE, RESOURCE_ID, PERMISSION_TYPE)
    VALUES
    <foreach collection="permissionTypes" item="permissionType" separator=",">
      (#{authorizationKey}, #{ownerId}, #{ownerType}, #{resourceType}, #{resourceId}, #{permissionType})
    </foreach>
  </insert>

  <delete id="delete" parameterType="io.camunda.db.rdbms.write.domain.AuthorizationDbModel"
    flushCache="true">
    DELETE
    FROM ${prefix}AUTHORIZATIONS
    WHERE AUTHORIZATION_KEY = #{authorizationKey}
  </delete>
</mapper>
