<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
  ~ one or more contributor license agreements. See the NOTICE file distributed
  ~ with this work for additional information regarding copyright ownership.
  ~ Licensed under the Camunda License 1.0. You may not use this file
  ~ except in compliance with the Camunda License 1.0.
  -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.camunda.db.rdbms.sql.MessageSubscriptionMapper">

  <select id="count" resultType="java.lang.Long">
    SELECT COUNT(*)
    FROM ${prefix}MESSAGE_SUBSCRIPTION
    <include refid="io.camunda.db.rdbms.sql.MessageSubscriptionMapper.searchAndAuthFilter" />
  </select>

  <!-- default search statement for databases supporting LIMIT/OFFSET-->
  <select id="search"
    parameterType="io.camunda.db.rdbms.read.domain.MessageSubscriptionDbQuery"
    resultMap="io.camunda.db.rdbms.sql.MessageSubscriptionMapper.searchResultMap">
    SELECT * FROM (
    SELECT
    MESSAGE_SUBSCRIPTION_KEY,
    PROCESS_DEFINITION_ID,
    PROCESS_INSTANCE_KEY,
    FLOW_NODE_ID,
    FLOW_NODE_INSTANCE_KEY,
    MESSAGE_SUBSCRIPTION_STATE,
    DATE_TIME,
    MESSAGE_NAME,
    CORRELATION_KEY,
    TENANT_ID,
    PARTITION_ID,
    HISTORY_CLEANUP_DATE
    FROM ${prefix}MESSAGE_SUBSCRIPTION

    <include refid="io.camunda.db.rdbms.sql.MessageSubscriptionMapper.searchAndAuthFilter" />
    ) t
    <include refid="io.camunda.db.rdbms.sql.Commons.keySetPageFilter" />
    <include refid="io.camunda.db.rdbms.sql.Commons.orderBy" />
    <include refid="io.camunda.db.rdbms.sql.Commons.paging" />
  </select>

  <sql id="searchAndAuthFilter">
    <where>
      <if test="authorizedResourceIds != null and !authorizedResourceIds.isEmpty()">
        AND PROCESS_DEFINITION_ID IN
        <foreach collection="authorizedResourceIds" item="resourceId" open="(" separator=","
          close=")">
          #{resourceId}
        </foreach>
      </if>
      <if test="authorizedTenantIds != null and !authorizedTenantIds.isEmpty()">
        AND TENANT_ID IN
        <foreach collection="authorizedTenantIds" item="tenantId" open="(" separator="," close=")">
          #{tenantId}
        </foreach>
      </if>
      <include refid="io.camunda.db.rdbms.sql.MessageSubscriptionMapper.searchFilter"/>

    </where>
  </sql>

  <sql id="searchFilter">
    <!-- basic filter -->
    <if test="filter.messageSubscriptionKeyOperations != null and !filter.messageSubscriptionKeyOperations.isEmpty()">
      <foreach collection="filter.messageSubscriptionKeyOperations" item="operation">
        AND MESSAGE_SUBSCRIPTION_KEY
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.processDefinitionIdOperations != null and !filter.processDefinitionIdOperations.isEmpty()">
      <foreach collection="filter.processDefinitionIdOperations" item="operation">
        AND PROCESS_DEFINITION_ID
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.processInstanceKeyOperations != null and !filter.processInstanceKeyOperations.isEmpty()">
      <foreach collection="filter.processInstanceKeyOperations" item="operation">
        AND PROCESS_INSTANCE_KEY
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.flowNodeIdOperations != null and !filter.flowNodeIdOperations.isEmpty()">
      <foreach collection="filter.flowNodeIdOperations" item="operation">
        AND FLOW_NODE_ID
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.flowNodeInstanceKeyOperations != null and !filter.flowNodeInstanceKeyOperations.isEmpty()">
      <foreach collection="filter.flowNodeInstanceKeyOperations" item="operation">
        AND FLOW_NODE_INSTANCE_KEY
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.messageSubscriptionStateOperations != null and !filter.messageSubscriptionStateOperations.isEmpty()">
      <foreach collection="filter.messageSubscriptionStateOperations" item="operation">
        AND MESSAGE_SUBSCRIPTION_STATE
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.dateTimeOperations != null and !filter.dateTimeOperations.isEmpty()">
      <foreach collection="filter.dateTimeOperations" item="operation">
        AND DATE_TIME
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.messageNameOperations != null and !filter.messageNameOperations.isEmpty()">
      <foreach collection="filter.messageNameOperations" item="operation">
        AND MESSAGE_NAME
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.correlationKeyOperations != null and !filter.correlationKeyOperations.isEmpty()">
      <foreach collection="filter.correlationKeyOperations" item="operation">
        AND CORRELATION_KEY
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.tenantIdOperations != null and !filter.tenantIdOperations.isEmpty()">
      <foreach collection="filter.tenantIdOperations" item="operation">
        AND TENANT_ID
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
  </sql>

  <resultMap id="searchResultMap" type="io.camunda.db.rdbms.write.domain.MessageSubscriptionDbModel">
    <constructor>
      <idArg column="MESSAGE_SUBSCRIPTION_KEY" javaType="java.lang.Long" />
    </constructor>
    <result column="PROCESS_DEFINITION_ID" property="processDefinitionId" javaType="java.lang.String" />
    <result column="PROCESS_INSTANCE_KEY" property="processInstanceKey" javaType="java.lang.Long" />
    <result column="FLOW_NODE_ID" property="flowNodeId" javaType="java.lang.String" />
    <result column="FLOW_NODE_INSTANCE_KEY" property="flowNodeInstanceKey" javaType="java.lang.Long" />
    <result column="MESSAGE_SUBSCRIPTION_STATE" property="messageSubscriptionState" javaType="io.camunda.search.entities.MessageSubscriptionEntity$MessageSubscriptionState" />
    <result column="DATE_TIME" property="dateTime" javaType="java.time.OffsetDateTime" />
    <result column="MESSAGE_NAME" property="messageName" javaType="java.lang.String" />
    <result column="CORRELATION_KEY" property="correlationKey" javaType="java.lang.String" />
    <result column="TENANT_ID" property="tenantId" javaType="java.lang.String" />
    <result column="PARTITION_ID" property="partitionId" javaType="java.lang.Integer" />
    <result column="HISTORY_CLEANUP_DATE" property="historyCleanupDate" javaType="java.time.OffsetDateTime" />
  </resultMap>


  <insert id="insert" parameterType="io.camunda.db.rdbms.write.domain.MessageSubscriptionDbModel">
    INSERT INTO ${prefix}MESSAGE_SUBSCRIPTION (
                                               MESSAGE_SUBSCRIPTION_KEY,
                                               PROCESS_DEFINITION_ID,
                                               PROCESS_INSTANCE_KEY,
                                               FLOW_NODE_ID,
                                               FLOW_NODE_INSTANCE_KEY,
                                               MESSAGE_SUBSCRIPTION_STATE,
                                               DATE_TIME,
                                               MESSAGE_NAME,
                                               CORRELATION_KEY,
                                               TENANT_ID,
                                               PARTITION_ID,
                                               HISTORY_CLEANUP_DATE
    )
    VALUES (
            #{messageSubscriptionKey},
            #{processDefinitionId},
            #{processInstanceKey},
            #{flowNodeId},
            #{flowNodeInstanceKey},
            #{messageSubscriptionState},
            #{dateTime, jdbcType=TIMESTAMP},
            #{messageName},
            #{correlationKey},
            #{tenantId},
            #{partitionId},
            #{historyCleanupDate, jdbcType=TIMESTAMP}
    )
  </insert>

  <update id="update" parameterType="io.camunda.db.rdbms.write.domain.MessageSubscriptionDbModel">
    UPDATE ${prefix}MESSAGE_SUBSCRIPTION
    SET PROCESS_DEFINITION_ID = #{processDefinitionId},
        PROCESS_INSTANCE_KEY = #{processInstanceKey},
        FLOW_NODE_ID = #{flowNodeId},
        FLOW_NODE_INSTANCE_KEY = #{flowNodeInstanceKey},
        MESSAGE_SUBSCRIPTION_STATE = #{messageSubscriptionState},
        DATE_TIME = #{dateTime, jdbcType=TIMESTAMP},
        MESSAGE_NAME = #{messageName},
        CORRELATION_KEY = #{correlationKey},
        TENANT_ID = #{tenantId},
        HISTORY_CLEANUP_DATE = #{historyCleanupDate, jdbcType=TIMESTAMP}
    WHERE MESSAGE_SUBSCRIPTION_KEY = #{messageSubscriptionKey}
  </update>

  <update id="updateHistoryCleanupDate">
    UPDATE ${prefix}MESSAGE_SUBSCRIPTION SET
      HISTORY_CLEANUP_DATE = #{historyCleanupDate, jdbcType=TIMESTAMP}
    WHERE PROCESS_INSTANCE_KEY IN
    <foreach collection="processInstanceKeys" item="key" open="(" separator="," close=")">
      #{key}
    </foreach>
  </update>

  <delete id="cleanupHistory">
    <bind name="tableName" value="'MESSAGE_SUBSCRIPTION'"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.historyCleanup"/>
  </delete>
</mapper>
