# This action sets up the environment with the required tech stack in order to build, install, and
# run Zeebe.

---
name: Setup Zeebe
description: Sets up the required stack to build, install, and run Zeebe

inputs:
  go:
    description: If true, will set up Golang; defaults to true
    required: false
    default: "true"
  java:
    description: If true, will set up Java; defaults to true
    required: false
    default: "true"
  java-version:
    description: The JDK version to setup
    default: "21"
    required: false
  maven-cache-key-modifier:
    description: A modifier key used for the maven cache, can be used to create isolated caches for certain jobs.
    default: "shared"
    required: false
  secret_vault_address:
    description: 'secret vault url'
    required: false
  secret_vault_roleId:
    description: 'secret vault roleId'
    required: false
  secret_vault_secretId:
    description: 'secret valut secret id'
    required: false
  docker:
    description: If true, logs into Docker Hub using our CI account; helpful to prevent rate limiting
    required: false
    default: "true"
  docker-token:
    description: The token to use when logging into Docker Hub
    required: false
    default: "REGISTRY_HUB_DOCKER_COM_PSW_READ_ONLY"

outputs: {}

runs:
  using: composite
  steps:
    - name: Secrets check
      if: |
        github.event.name == 'pull_request'
        && github.event.pull_request.head.repo.full_name == 'camunda/camunda'
        && (inputs.secret_vault_address == ''
        || inputs.secret_vault_roleId == ''
        || inputs.secret_vault_secretId == '')
      shell: bash
      run: |
        echo "We will fail the action if it's an internal PR without the secrets. If this occurs it indicates a configuration failure that needs to be fixed."
        exit 1
    - name: Import Secrets
      id: secrets
      uses: hashicorp/vault-action@v3.0.0
      if: |
        inputs.secret_vault_address != ''
        && inputs.secret_vault_roleId != ''
        && inputs.secret_vault_secretId != ''
      with:
        url: ${{ inputs.secret_vault_address }}
        method: approle
        roleId: ${{ inputs.secret_vault_roleId }}
        secretId: ${{ inputs.secret_vault_secretId }}
        secrets: |
          secret/data/products/zeebe/ci/zeebe ARTIFACTS_USR;
          secret/data/products/zeebe/ci/zeebe ARTIFACTS_PSW;
          secret/data/products/zeebe/ci/zeebe REGISTRY_HUB_DOCKER_COM_USR;
          secret/data/products/zeebe/ci/zeebe ${{ inputs.docker-token }};
    - uses: actions/setup-java@v4
      if: inputs.java == 'true'
      with:
        distribution: 'temurin'
        java-version: ${{ inputs.java-version }}
    # Logging into Docker Hub will help prevent us being rate limited when using an anonymous account
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      if: |
        inputs.docker == 'true'
        && inputs.secret_vault_address != ''
        && inputs.secret_vault_roleId != ''
        && inputs.secret_vault_secretId != ''
      with:
        username: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_USR }}
        password: ${{ steps.secrets.outputs[inputs.docker-token] }}
    # Use CI Nexus as co-located pull-through cache for Maven artifacts via ~/.m2/settings.xml
    - name: 'Create settings.xml'
      uses: s4u/maven-settings-action@v3.0.0
      if: |
        inputs.java == 'true'
        && inputs.secret_vault_address != ''
        && inputs.secret_vault_roleId != ''
        && inputs.secret_vault_secretId != ''
      with:
        githubServer: false
        servers: |
          [{
            "id": "camunda-nexus",
            "username": "${{ steps.secrets.outputs.ARTIFACTS_USR }}",
            "password": "${{ steps.secrets.outputs.ARTIFACTS_PSW }}"
          }]
        mirrors: '[{"url": "https://repository.nexus.camunda.cloud/content/groups/internal/", "id": "camunda-nexus", "mirrorOf": "zeebe,zeebe-snapshots", "name": "camunda Nexus"}]'
    - name: Configure Maven
      if: inputs.java == 'true'
      shell: bash
      # `--errors` ensures errors will also spit out a stack trace, which is always useful, and has no impact on normal builds
      #
      # `--update-snapshots` to force Maven into updating snapshots, but also to retry looking for
      #    release artifacts when an earlier lookup failure made it into the cache.
      #
      # `maven.wagon.*` and `maven.resolver.transport` set the resolver's network transport to Wagon,
      #    the old provider pre 3.9. Until Maven 3.9.2, we have to do this if we want to retry on
      #    network issues, as otherwise any issue will fail the build.
      #
      # `aether.enhancedLocalRepository.split` splits between local and remote artifacts.
      # `aether.enhancedLocalRepository.splitRemote` splits remote artifacts into released and snapshot
      # `aether.syncContext.*` config ensures that maven uses file locks to prevent corruption
      #      from downloading multiple artifacts at the same time.
      run: |
        tee .mvn/maven.config <<EOF
        --errors
        --batch-mode
        --update-snapshots
        -D maven.wagon.httpconnectionManager.ttlSeconds=120
        -D maven.wagon.http.pool=false
        -D maven.resolver.transport=wagon
        -D maven.wagon.http.retryHandler.class=standard
        -D maven.wagon.http.retryHandler.requestSentEnabled=true
        -D maven.wagon.http.retryHandler.count=5
        -D aether.enhancedLocalRepository.split=true
        -D aether.enhancedLocalRepository.splitRemote=true
        -D aether.syncContext.named.nameMapper=file-gav
        -D aether.syncContext.named.factory=file-lock
        -D aether.syncContext.named.time=180
        -D maven.artifact.threads=32
        EOF
    - name: Determine if running on GH infra or self-hosted
      if: inputs.java == 'true'
      id: runner-env
      shell: bash
      # it matters for caching as absolute paths on self-hosted and Github runners differ
      # self-hosted: `/runner/` vs gh-hosted: `/home/runner`
      run: |
        if [[ "${{ runner.name }}" =~ ^(actions-runner-|gcp-|aws-|n1-).*$ ]]; then
          echo "result=self-hosted" >> $GITHUB_OUTPUT
        else
          echo "result=gh-hosted" >> $GITHUB_OUTPUT
        fi
    - name: Cache local Maven repository
      # Only use the full cache action if we're on main or stable/* branches
      if: inputs.java == 'true' && (startsWith(github.ref_name, 'stable/') || github.ref_name == 'main')
      uses: actions/cache@v4
      with:
        # This is the path used by the `enhancedLocalRepository` set up in the 'Configure Maven' step.
        # `aether.enhancedLocalRepository.remotePrefix` defaults to 'cached'
        # `aether.enhancedLocalRepository.releasesPrefix` defaults to 'releases'
        path: ~/.m2/repository/cached/releases/
        key: ${{ steps.runner-env.outputs.result }}-${{ runner.os }}-mvn-${{ inputs.maven-cache-key-modifier }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ steps.runner-env.outputs.result }}-${{ runner.os }}-mvn-${{ inputs.maven-cache-key-modifier }}
    - name: Restore maven cache
      # Restore cache (but don't save it) if we're not on main or stable/* branches
      if: inputs.java == 'true' && !(startsWith(github.ref_name, 'stable/') || github.ref_name == 'main')
      uses: actions/cache/restore@v4
      with:
        # This has to match the 'Cache local Maven repository' step above
        path: ~/.m2/repository/cached/releases/
        key: ${{ steps.runner-env.outputs.result }}-${{ runner.os }}-mvn-${{ inputs.maven-cache-key-modifier }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ steps.runner-env.outputs.result }}-${{ runner.os }}-mvn-${{ inputs.maven-cache-key-modifier }}
    - if: ${{ inputs.go == 'true' }}
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: false
