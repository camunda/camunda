---
name: Analyze test runs

description: Check for duplicated test runs from a maven build output file and fail if found.

inputs:
  buildOutputFilePath:
    description: 'Path to the build log file.'
    required: true
  skipSummary:
    description: "Whether to run the test-summary action, it might run into problems an large test outputs"
    default: "false"
    required: false

outputs:
  flakyTests:
    description: "A collection of flaky tests, if there are any"
    value: ${{ steps.find-flakes.outputs.FLAKY_TESTS }}

runs:
  using: composite
  steps:
  - name: Test Summary
    uses: test-summary/action@v2
    if: ${{ inputs.skipSummary == 'false' }}
    with:
      paths: |
        **/target/failsafe-reports/TEST-*.xml
        **/target/surefire-reports/TEST-*.xml
  - name: Find flaky tests
    id: find-flakes
    shell: bash
    env:
      BUILD_OUTPUT_FILE_PATH: ${{ inputs.buildOutputFilePath }}
    run: |
      set -eoux
      if [ ! -s "$BUILD_OUTPUT_FILE_PATH" ]; then
        echo "::error::Build output file does not exist or is empty!"
        exit 1
      fi

      # Extracting flaky tests
      # Based on old Jenkins script
      # https://github.com/camunda/camunda/blob/stable/8.1/.ci/scripts/lib/flaky-tests.sh
      if grep -q "\[WARNING\] Flakes:" "$BUILD_OUTPUT_FILE_PATH"; then
        irOutputFile=$(mktemp)

        # Extracting the essential lines
        awk '/^\[WARNING\] Flakes:.*$/{flag=1}/^\[ERROR\] Tests run:.*Flakes: [0-9]*$/{print;flag=0}flag' "$BUILD_OUTPUT_FILE_PATH" > ${irOutputFile}

        # To cover cases where we use parameterized tests like
        # [WARNING]  io.camunda.zeebe.engine.state.BanInstanceTest.shouldBanInstance[PROCESS_MESSAGE_SUBSCRIPTION DELETE should ban instance true]
        # We grep the WARNING line and set the first argument to an empty string
        flakyTests=$(grep -E "\[WARNING\] [a-z]+\." ${irOutputFile} | awk '{$1=""; print $0}')

        # To support multi-line string in output we have to work with EOF delimiter
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#example-of-a-multiline-string
        {
          echo 'FLAKY_TESTS<<EOF'
          echo "$flakyTests"
          echo EOF
        } >> $GITHUB_OUTPUT

        echo "::warning::Found flaky tests!\n ${flakyTests}"
      fi

  - name: Unfinished tests
    if: failure() || cancelled()
    shell: bash
    env:
      BUILD_OUTPUT_FILE_PATH: ${{ inputs.buildOutputFilePath }}
    run: |
      if [ ! -s "$BUILD_OUTPUT_FILE_PATH" ]; then
        echo "::error::Build output file does not exist or is empty!"
        exit 1
      fi
      running=$(mktemp)
      finished=$(mktemp)
      unfinished=$(mktemp)
      grep -oP "\[INFO\] Running \K(.*)$" "$BUILD_OUTPUT_FILE_PATH" > "$running"
      grep -oP 'Tests run.*?-- in \K(.*)$' "$BUILD_OUTPUT_FILE_PATH" > "$finished"
      sort $running $finished | uniq -u > "$unfinished"
      if [ -s "$unfinished" ]; then
        echo "### ⚠️ Unfinished test runs" >> $GITHUB_STEP_SUMMARY
        cat $unfinished >> $GITHUB_STEP_SUMMARY
      fi
      exit 0
