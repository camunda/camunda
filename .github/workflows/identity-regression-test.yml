# description: Runs regression tests on Identity. Tests are defined as .http files
# test location: /http
# type: CI
# owner: @camunda/identity
name: Identity API Regression Tests

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run tests on'
        required: true
        default: 'main'
      multi-tenancy:
        description: 'Enable MT?'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      authorizations:
        description: 'Enable Authorizations?'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

concurrency:
  cancel-in-progress: true
  group: ${{ format('{0}-{1}', github.workflow, github.ref == 'refs/heads/main' && github.sha || github.ref) }}

permissions:
  actions: write
  attestations: none
  checks: write
  contents: read
  deployments: none
  id-token: none
  issues: none
  discussions: none
  packages: none
  pages: none
  pull-requests: none
  repository-projects: none
  security-events: none
  statuses: write

jobs:
  run-http-regression-tests:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    strategy:
      fail-fast: false
      matrix:
        env: [ 'local' ]
        case:
          - 'user-authorizations-tests.http'
          - 'tenant-tests.http'
          - 'group-tests.http'
          - 'mapping-rules.http'
          - 'role-tests.http'

    runs-on: ubuntu-latest
    environment: '${{ matrix.env }}-http-tests'
    env:
      LC_ALL: C.UTF-8

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0

      - uses: ./.github/actions/setup-build
        with:
          dockerhub-readonly: true
          vault-address: ${{ secrets.VAULT_ADDR }}
          vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}

      - name: Start Elasticsearch with Docker Compose
        run: docker compose -f operate/docker-compose.yml up -d elasticsearch

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@4c06c5ccf5c0761b6029f56cfb1dcf5565918a3b
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false
          secrets: |
            secret/data/products/qa/ci/github.com/apps/camunda/entra-credentials CLIENT_ID;
            secret/data/products/qa/ci/github.com/apps/camunda/entra-credentials CLIENT_SECRET;
            secret/data/products/qa/ci/github.com/apps/camunda/entra-credentials AUDIENCE;
            secret/data/products/qa/ci/github.com/apps/camunda/entra-credentials INITIAL_CLAIM_VALUE;
            secret/data/products/qa/ci/github.com/apps/camunda/entra-credentials ISSUER_URI;
            secret/data/products/qa/ci/github.com/apps/camunda/entra-credentials TOKEN_URL;

      - name: Merge Secrets into Existing HTTP Client Env File
        run: |
          jq \
            --arg client_id "$CLIENT_ID" \
            --arg client_secret "$CLIENT_SECRET" \
            --arg token_url "$TOKEN_URL" \
            --arg audience "$AUDIENCE" \
            '.local += {
              CLIENT_ID: $client_id,
              CLIENT_SECRET: $client_secret,
              TOKEN_URL: $token_url,
              AUDIENCE: $audience
            }' http/http-client.private.env.json > http/tmp.env.json && mv http/tmp.env.json http/http-client.private.env.json
        env:
          CLIENT_ID: ${{ steps.secrets.outputs.CLIENT_ID }}
          CLIENT_SECRET: ${{ steps.secrets.outputs.CLIENT_SECRET }}
          TOKEN_URL: ${{ steps.secrets.outputs.TOKEN_URL }}
          AUDIENCE: ${{ steps.secrets.outputs.AUDIENCE }}

      - name: Package camunda-dist
        shell: bash
        id: build-dist
        run: |
          ./mvnw -B -T1C -DskipTests -DskipChecks -Dflatten.skip=true package

      - name: Extract Distribution Tarball
        run: |
          cd ./dist/target
          tarball=$(ls camunda-zeebe-*.tar.gz)
          tar -xvzf "$tarball"

      - name: Start Camunda (default config)
        if: matrix.case != 'mapping-rules.http'
        run: |
          cd ./dist/target
          dir=$(ls -d camunda-zeebe-*/)
          cd "$dir"
          export ZEEBE_BROKER_EXPORTERS_CAMUNDAEXPORTER_CLASSNAME=io.camunda.exporter.CamundaExporter && \
          export ZEEBE_BROKER_EXPORTERS_CAMUNDAEXPORTER_ARGS_CONNECT_URL=http://localhost:9200 && \
          export ZEEBE_BROKER_EXPORTERS_CAMUNDAEXPORTER_ARGS_BULK_SIZE=100 && \
          export ZEEBE_BROKER_EXPORTERS_CAMUNDAEXPORTER_ARGS_INDEX_SHOULDWAITFORIMPORTERS=false && \
          export CAMUNDA_SECURITY_AUTHORIZATIONS_ENABLED=${{ inputs.authorizations }} && \
          export CAMUNDA_SECURITY_AUTHENTICATION_UNPROTECTEDAPI=false && \
          export CAMUNDA_SECURITY_MULTITENANCY_CHECKSENABLED=${{ inputs.multi-tenancy }} && \
          export CAMUNDA_SECURITY_INITIALIZATION_USERS_0_USERNAME=demo && \
          export CAMUNDA_SECURITY_INITIALIZATION_USERS_0_PASSWORD=demo && \
          export CAMUNDA_SECURITY_INITIALIZATION_USERS_0_NAME=Demo && \
          export CAMUNDA_SECURITY_INITIALIZATION_USERS_0_EMAIL=demo@example.com && \
          export CAMUNDA_SECURITY_INITIALIZATION_DEFAULTROLES_ADMIN_USERS_0=demo && \
          export SPRING_PROFILES_ACTIVE=identity,tasklist,operate,broker,consolidated-auth && \
          ./bin/camunda &
          sleep 60

      - name: Start Camunda (OIDC config for mapping-rules)
        if: matrix.case == 'mapping-rules.http'
        run: |
          cd ./dist/target/camunda-zeebe-8.8.0-SNAPSHOT
          export ZEEBE_BROKER_EXPORTERS_CAMUNDAEXPORTER_CLASSNAME=io.camunda.exporter.CamundaExporter && \
          export ZEEBE_BROKER_EXPORTERS_CAMUNDAEXPORTER_ARGS_CONNECT_URL=http://localhost:9200 && \
          export ZEEBE_BROKER_EXPORTERS_CAMUNDAEXPORTER_ARGS_BULK_SIZE=100 && \
          export ZEEBE_BROKER_EXPORTERS_CAMUNDAEXPORTER_ARGS_INDEX_SHOULDWAITFORIMPORTERS=false && \
          export CAMUNDA_SECURITY_AUTHENTICATION_METHOD=OIDC && \
          export CAMUNDA_SECURITY_AUTHENTICATION_OIDC_CLIENTID=${{ steps.secrets.outputs.CLIENT_ID}} && \
          export CAMUNDA_SECURITY_AUTHENTICATION_OIDC_CLIENTSECRET=${{ steps.secrets.outputs.CLIENT_SECRET}} && \
          export CAMUNDA_SECURITY_AUTHENTICATION_OIDC_ISSUERURI=${{ steps.secrets.outputs.ISSUER_URI}} && \
          export CAMUNDA_SECURITY_AUTHENTICATION_OIDC_REDIRECTURI=http://localhost:8080/sso-callback && \
          export INITIAL_CLAIM_VALUE=${{ steps.secrets.outputs.INITIAL_CLAIM_VALUE}}  && \
          export CAMUNDA_SECURITY_AUTHORIZATIONS_ENABLED=false && \
          export CAMUNDA_SECURITY_AUTHENTICATION_UNPROTECTEDAPI=false && \
          export CAMUNDA_SECURITY_MULTITENANCY_CHECKSENABLED=${{ inputs.multi-tenancy }} && \
          export SPRING_PROFILES_ACTIVE=identity,broker,consolidated-auth && \
          ./bin/camunda &
          sleep 60

      - name: Install IntelliJ HTTP Client
        shell: bash
        run: |
          curl -f -L -o ijhttp.zip "https://jb.gg/ijhttp/latest"
          unzip ijhttp.zip
          ijhttp/ijhttp http/${{ matrix.case }} --private-env-file http/http-client.private.env.json --env ${{ matrix.env }} --report -t 60000

      - name: Publish Test Report
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: '**/reports/report.xml'
          comment_mode: off

      - name: Cleanup
        shell: bash
        if: always()
        run: |
          rm http/http-client.private.env.json

      - name: Shut down Docker Compose
        if: always()
        run: docker compose -f operate/docker-compose.yml down -v
