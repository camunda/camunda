# description: For C8Run, this workflow runs a linting check, unit tests, a build, tests on unix, and end to end tests on windows
# type: CI
# owner: @camunda/distribution
---
name: "C8Run: build/test"

on:
  push:
    branches:
      - "main"
      - "stable/**"
      - "release/**"
    paths:
      - "c8run/**"
      - ".github/workflows/c8run-build.yaml"
  pull_request:
    paths:
      - "c8run/**"
      - ".github/workflows/c8run-build.yaml"
  schedule:
    # Run at 23:30 UTC every day
    - cron: "30 23 * * *"
  workflow_dispatch:

env:
  GO_VERSION: ">= 1.23.1"

permissions:
  actions: write
  attestations: none
  checks: write
  contents: read
  deployments: none
  id-token: none
  issues: none
  discussions: none
  packages: none
  pages: none
  pull-requests: none
  repository-projects: none
  security-events: none
  statuses: write

jobs:
  linting:
    name: C8Run linting
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION}}
          cache: false # disabling since not working anyways without a cache-dependency-path specified

      - name: golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          working-directory: ./c8run
          skip-cache: true

  test_c8run_unittests:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-13, windows-latest]
    name: C8Run Unit Tests ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 2
    defaults:
      run:
        working-directory: ./c8run
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION}}
          cache: false

      - name: Download dependencies
        run: go mod download

      - name: Unit tests
        run: go test ./...

  camunda-dist-build:
    name: Build camunda-dist
    runs-on: gcp-perf-core-16-default
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: ./.github/actions/setup-build
        with:
          dockerhub-readonly: true
          vault-address: ${{ secrets.VAULT_ADDR }}
          vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}

      - name: Package camunda-dist
        shell: bash
        id: build-dist
        run: |
          ./mvnw -B -T1C -DskipTests -DskipChecks -Dflatten.skip=true -Dskip.fe.build=false -pl '!optimize,!optimize-distro' package
          ARTIFACT=$(./mvnw -pl dist/ help:evaluate -Dexpression=project.build.finalName -q -DforceStdout)
          export ARTIFACT
          echo "distball=dist/target/${ARTIFACT}.tar.gz" >> "$GITHUB_OUTPUT"
          echo "distzip=dist/target/${ARTIFACT}.zip" >> "$GITHUB_OUTPUT"

      - name: Upload camunda-dist
        uses: actions/upload-artifact@v4
        with:
          name: camunda-platform-dist
          path: ${{ steps.build-dist.outputs.distball }}

      - name: Upload camunda-dist-zip
        uses: actions/upload-artifact@v4
        with:
          name: camunda-platform-dist-zip
          path: ${{ steps.build-dist.outputs.distzip }}

  test_c8run_on_unix:
    strategy:
      matrix:
        # macos-latest is ARM, mac os 13 will execute on x86 runner.
        os: [ubuntu-latest, macos-latest, macos-13]
    name: C8Run Test ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    needs: camunda-dist-build
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Download Camunda Core Dist
        uses: actions/download-artifact@v4
        with:
          name: camunda-platform-dist
          path: c8run

      - name: Setup C8Run
        uses: ./.github/actions/setup-c8run
        with:
          vault-address: ${{ secrets.VAULT_ADDR }}
          vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}
          os: ${{ matrix.os }}
          github-token: ${{ github.token }}
          local-archive-build: "true"
          checkout: "false"

      - name: Install dependencies
        run: npm ci
        working-directory: ./c8run/e2e_tests

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: ./c8run/e2e_tests

      - name: Run Playwright tests
        run: npx playwright test
        working-directory: ./c8run/e2e_tests

      - name: Run v2 API endpoint test
        run: ./api_tests.sh
        working-directory: ./c8run/e2e_tests

      - uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.os }}
          path: ./c8run/e2e_tests/playwright-report
          retention-days: 30

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: c8run-logs-${{ matrix.os }}
          path: ./c8run/log/*.log
          retention-days: 10

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@4c06c5ccf5c0761b6029f56cfb1dcf5565918a3b # v3.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/distribution/ci SLACK_DISTRO_BOT_WEBHOOK;

      - name: Upload message to Slack on failure
        if: ${{ failure() && github.event_name == 'schedule' }}
        env:
          SLACK_WEBHOOK_URL: ${{ steps.secrets.outputs.SLACK_DISTRO_BOT_WEBHOOK }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "Job *${{ github.job }}* in workflow *${{ github.workflow }}* failed for *${{ github.repository }}*!\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}\nRun: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>\nLogs: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts|View Artifacts>"
          }' \
          "$SLACK_WEBHOOK_URL"

  test_c8run_e2e_on_windows:
    name: C8Run Test Windows
    runs-on: windows-latest
    timeout-minutes: 15
    needs: camunda-dist-build
    steps:
      - uses: actions/checkout@v4

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@4c06c5ccf5c0761b6029f56cfb1dcf5565918a3b # v3.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/distribution/ci NEXUS_USERNAME;
            secret/data/products/distribution/ci NEXUS_PASSWORD;
            secret/data/products/distribution/ci SLACK_DISTRO_BOT_WEBHOOK;

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION}}
          cache: false # disabling since not working anyways without a cache-dependency-path specified

      - name: Download Camunda Core Dist
        uses: actions/download-artifact@v4
        with:
          name: camunda-platform-dist-zip
          path: c8run

      - name: Get version of camunda-dist
        run: |
          for file in camunda-zeebe*.zip; do
            version=$(echo "$file" | sed -E 's/camunda-zeebe-(.*)\.zip/\1/')
            echo "CAMUNDA_VERSION=$version" >> "$GITHUB_ENV"
            break  # just use the first matching file
          done
        shell: bash
        working-directory: .\c8run

      - name: Build c8run runtime
        run: go build -o c8run.exe ./cmd/c8run
        working-directory: .\c8run

      - name: Build c8run packager
        run: go build -o packager.exe ./cmd/packager
        working-directory: .\c8run

      - name: make a package
        run: .\packager.exe package
        working-directory: .\c8run
        env:
          GH_TOKEN: ${{ github.token }}
          JAVA_ARTIFACTS_USER: ${{ steps.secrets.outputs.NEXUS_USERNAME }}
          JAVA_ARTIFACTS_PASSWORD: ${{ steps.secrets.outputs.NEXUS_PASSWORD }}

      - name: ls
        run: ls
        working-directory: .\c8run

      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "22"

      - name: Set env
        run: echo "JAVA_HOME=${JAVA_HOME_22_X64}" >> "$GITHUB_ENV"
        shell: bash

      - name: Run c8run
        run: bash -c './c8run.exe start --config e2e_tests/prefix-config.yaml'
        working-directory: ./c8run
        shell: bash
        env:
          JAVA_VERSION: "22.0.2"

      - name: Install jq
        run: choco install jq

      - name: Run test
        shell: bash
        run: ./api_tests.sh
        working-directory: .\c8run\e2e_tests

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci
        working-directory: .\c8run\e2e_tests

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: .\c8run\e2e_tests

      - name: Wait for camunda process to start
        run: bash -c 'while ! curl -s -f "http://localhost:9600/actuator/health"; do sleep 5; done'
        shell: bash
        timeout-minutes: 5

      - name: Run Playwright tests
        run: npx playwright test
        working-directory: .\c8run\e2e_tests

      - uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: .\c8run\e2e_tests\playwright-report
          retention-days: 30

      - uses: actions/upload-artifact@v4
        with:
          name: camunda8-run-build-windows
          path: .\c8run\camunda8-run*
          retention-days: 1

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: c8run-logs
          path: .\c8run\log\*.log
          retention-days: 10

      - name: Upload message to Slack on failure
        if: ${{ failure() && github.event_name == 'schedule' }}
        env:
          SLACK_WEBHOOK_URL: ${{ steps.secrets.outputs.SLACK_DISTRO_BOT_WEBHOOK }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "Job *${{ github.job }}* in workflow *${{ github.workflow }}* failed for *${{ github.repository }}*!\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}\nRun: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>\nLogs: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts|View Artifacts>"
          }' \
          $SLACK_WEBHOOK_URL
