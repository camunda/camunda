---
name: CI

# owner: @camunda/monorepo-devops-team

on:
  push:
    branches:
      - main
      - stable/*
      - release-*
  pull_request: { }
  merge_group: { }
  workflow_dispatch: { }
  schedule:
    - cron: '0 6 * * *' # daily full build in the morning to re-populate GHA caches

defaults:
  run:
    # use bash shell by default to ensure pipefail behavior is the default
    # see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
    shell: bash

env:
  DOCKER_PLATFORMS: "linux/amd64,linux/arm64"
  GHA_BEST_PRACTICES_LINTER: enabled

jobs:

  integration-tests:
    name: "[IT] ${{ matrix.name }}"
    timeout-minutes: 25
    permissions: { }  # GITHUB_TOKEN unused in this job
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - group: qa-integration
            name: "Zeebe QA - Integration Tests"
            maven-modules: "zeebe/qa/integration-tests"
            maven-build-threads: 1
            maven-test-fork-count: 10
            runs-on: gcp-perf-core-16-default
            docker-repository: localhost:5000/camunda/zeebe
            docker-file: Dockerfile
    env:
      ZEEBE_TEST_DOCKER_IMAGE: localhost:5000/camunda/zeebe:current-test
      OPERATE_TEST_DOCKER_IMAGE: localhost:5000/camunda/operate:current-test
      TASKLIST_TEST_DOCKER_IMAGE: localhost:5000/camunda/tasklist:current-test
      CAMUNDA_DOCKER_IMAGE_NAME: localhost:5000/camunda/camunda
      DOCKER_IMAGE_TAG: current-test
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-build
        with:
          maven-cache-key-modifier: it-${{ matrix.group }}
          vault-address: ${{ secrets.VAULT_ADDR }}
          vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}
      - uses: ./.github/actions/build-zeebe
        id: build-zeebe
        with:
          maven-extra-args: -T1C -PskipFrontendBuild
      - uses: ./.github/actions/build-platform-docker
        if: ${{ matrix.docker-file != '' }}
        with:
          repository: ${{ matrix.docker-repository }}
          version: ${{ env.DOCKER_IMAGE_TAG }}
          dockerfile: ${{ matrix.docker-file }}
          push: true
          distball: ${{ steps.build-zeebe.outputs.distball }}
      - uses: ./.github/actions/build-platform-docker
        if: ${{ matrix.group == 'root' }}
        with:
          repository: localhost:5000/camunda/operate
          version: ${{ env.DOCKER_IMAGE_TAG }}
          dockerfile: operate.Dockerfile
          push: true
          distball: ${{ steps.build-zeebe.outputs.distball }}
      - uses: ./.github/actions/build-platform-docker
        if: ${{ matrix.group == 'root' }}
        with:
          repository: localhost:5000/camunda/tasklist
          version: ${{ env.DOCKER_IMAGE_TAG }}
          dockerfile: tasklist.Dockerfile
          push: true
          distball: ${{ steps.build-zeebe.outputs.distball }}
      - name: Create build output log file
        run: echo "BUILD_OUTPUT_FILE_PATH=$(mktemp)" >> "$GITHUB_ENV"
      - name: Maven Test Build
        run: >
          ./mvnw -B -T ${{ matrix.maven-build-threads }} --no-snapshot-updates
          -D forkCount=${{ matrix.maven-test-fork-count }}
          -D maven.javadoc.skip=true
          -D skipUTs -D skipChecks
          -D failsafe.rerunFailingTestsCount=3 -D flaky.test.reportDir=failsafe-reports
          -Dio.camunda.process.test.camundaDockerImageName="${{ env.CAMUNDA_DOCKER_IMAGE_NAME }}"
          -Dio.camunda.process.test.camundaDockerImageVersion="${{ env.DOCKER_IMAGE_TAG }}"
          -Dio.camunda.process.test.camundaVersion="${{ env.DOCKER_IMAGE_TAG }}"
          -P parallel-tests,extract-flaky-tests,skipFrontendBuild
          -pl ${{ matrix.maven-modules }}
          verify
          | tee "${BUILD_OUTPUT_FILE_PATH}"
      - name: Analyze Test Runs
        id: analyze-test-run
        if: always()
        uses: ./.github/actions/analyze-test-runs
        with:
          buildOutputFilePath: ${{ env.BUILD_OUTPUT_FILE_PATH }}
      - name: Upload test artifacts
        uses: ./.github/actions/collect-test-artifacts
        if: ${{ failure() || cancelled() || steps.analyze-test-run.outputs.flakyTests != '' }}
        with:
          name: "[IT] ${{ matrix.name }}"
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          job_name: "integration-tests/${{ matrix.group }}"
          build_status: ${{ job.status }}
          user_reason: ${{ (steps.analyze-test-run.outputs.flakyTests != '') && 'flaky-tests' || '' }}
          user_description: ${{ steps.analyze-test-run.outputs.flakyTests }}
          detailed_junit_flaky_tests: true
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  check-results:
    # Used by the merge queue to check all tests, including the unit test matrix.
    # New test jobs must be added to the `needs` lists!
    # This name is hard-coded in the branch rules; remember to update that if this name changes
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 3
    permissions:
      checks: read
    needs: # BELOW LIST IS IN ALPHABETICAL ORDER
      - integration-tests
    steps:
      - uses: actions/checkout@v4
      - name: Check for aborted jobs
        continue-on-error: true
        uses: ./.github/actions/observe-aborted-jobs
        with:
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
      - run: |
          # shellcheck disable=SC2242
          exit ${{ ((contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'failure')) && 1) || 0 }}
