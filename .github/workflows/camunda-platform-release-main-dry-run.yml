# type: Release
# owner: @camunda/monorepo-devops-team
---
name: Camunda Platform Release Dry Run from main

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Specifies the branch, for which the Release Dry Run should be executed'
        default: 'main'
        required: false
        type: string
  schedule:
    # Runs at 01:00 every week day; see this link for more: https://crontab.guru/#0_1_*_*_1-5
    - cron: '0 1 * * 1-5'

jobs:
  # create-fake-tag:
  #   name: "Create fake tag for dry runs"
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   permissions:
  #     contents: read
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v5
  #       with:
  #         fetch-depth: 0
  #     - name: Git User Setup
  #       run: |
  #         git config user.name "github-actions[bot]"
  #         git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
  #     - name: Create fake tag locally
  #       run: |
  #         git fetch origin tag 0.0.0-dryrun-minor --no-tags 2>/dev/null || git tag -a 0.0.0-dryrun-minor -m "Dummy tag for dry run minor"
  #         git fetch origin tag 0.0.0-dryrun-alpha --no-tags 2>/dev/null || git tag -a 0.0.0-dryrun-alpha -m "Dummy tag for dry run alpha"
  #         echo "Created fake tags for all dry runs locally (not pushed)"
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: create-fake-tag
  #         path: .git
  dry-run-release:
    name: "${{ matrix.version }} from ${{ inputs.branch || 'main' }}"
    # needs: [create-fake-tag]
    uses: ./.github/workflows/camunda-platform-release.yml
    secrets: inherit
    strategy:
      fail-fast: false
      matrix:
        # Uses fake tag for dry run testing without affecting real releases
        version: [ 0.0.0-dryrun-minor, 0.0.0-dryrun-alpha ]
        include:
          - version: 0.0.0-dryrun-minor
            latest: true
          - version: 0.0.0-dryrun-alpha
            latest: false
    with:
      releaseBranch: ${{ inputs.branch || 'main' }}
      releaseVersion: ${{ matrix.version }}
      nextDevelopmentVersion: 0.0.0-SNAPSHOT
      isLatest: ${{ matrix.latest }}
      dryRun: true

  notify:
    name: Send Slack notification
    runs-on: ubuntu-latest
    needs: [dry-run-release]
    if: always()
    timeout-minutes: 5
    permissions: {}  # GITHUB_TOKEN unused in this job
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@4c06c5ccf5c0761b6029f56cfb1dcf5565918a3b # v3.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false # we rely on step outputs, no need for environment variables
          secrets: |
            secret/data/products/camunda/ci/github-actions SLACK_TOPMONOREPORELEASE_WEBHOOK_URL;

      - name: Send failure Slack notification
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1
        if: ${{ always() && needs.dry-run-release.result != 'success' && github.event_name == 'schedule' }}
        with:
          webhook: ${{ steps.secrets.outputs.SLACK_TOPMONOREPORELEASE_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          # For posting a rich message using Block Kit
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":alarm: *Release Dry Run* on `${{ inputs.branch || 'main' }}` failed!\n"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please check this <https://github.com/camunda/camunda/actions/runs/${{ github.run_id }}|GHA workflow run>."
                  }
                }
              ]
            }
