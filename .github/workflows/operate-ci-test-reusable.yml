# This GitHub Actions workflow automates the CI test process for the 'operate' service.
# It triggers on a `workflow_call` event and accepts inputs for branch name[required] and fork count[optional]
#
# It consists of a several steps:
# 1. Setup: It checks out the specified branch, sets up Java and Maven with the provided inputs, and imports secrets from Vault.
# 2. Tests: Runs unit and integration tests.
# 3. Reports: Publishes the test results, even if some steps failed.
#
# Environment variables are used to control CPU limits.
# This workflow is designed to provide a comprehensive, automated CI process that ensures code quality, handles secrets securely,
# and enables detailed reporting of test results.

# CI IT test reusable GitHub Actions Workflow
# Triggers on a workflow_call event and accepts inputs for branch name and fork count
# Performs integration tests for the tasklist service with parallel execution.

name: Operate CI IT test reusable

on:
  workflow_call:
    inputs:
      branch:
        description: "The branch name to be used for the workflow"
        required: true
        type: string
      forkCount:
        description: "The number of VMs to fork in parallel in order to execute the unit tests"
        required: false
        default: 4
        type: number
      command:
        description: "Maven command to trigger the test"
        required: true
        type: string
      test-type:
        description: "Type of test, used in the job name, stage name, and report artifact name"
        required: true
        type: string
      runner-type:
        description: "CI runner type for the tests"
        default: gcp-core-32-default
        type: string

defaults:
  run:
    shell: bash

# Define environment variable for concurrency
env:
  BRANCH_NAME: ${{ inputs.branch }}
  LIMITS_CPU: ${{ inputs.forkCount }} # consumed by `maven-surefire-plugin` & `maven-failsafe-plugin` plugins defined in main `pom.xml` file

jobs:
  integration-tests:
    name: ${{ inputs.test-type }}
    timeout-minutes: 40
    runs-on: ${{ inputs.runner-type }}
    if: ${{ !startsWith(inputs.branch, 'fe-') && !(startsWith(inputs.branch, 'renovate/') && contains(inputs.branch, '-fe-')) }}

    steps:
      # Setup: checkout branch
      - name: Checkout '${{ inputs.branch }}' branch
        uses: actions/checkout@v4
        with:
          ref: refs/heads/${{ inputs.branch }}
          fetch-depth: 0 # fetches all history for all branches and tags

      # Setup: import secrets from vault
      - name: Import Secrets
        id: secrets # important to refer to it in later steps
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false # we rely on step outputs, no need for environment variables
          secrets: |
            secret/data/products/operate/ci/github-actions OPERATE_CI_ALERT_WEBHOOK_URL;

      # Setup: configure Java, Maven, settings.xml
      - uses: ./.github/actions/setup-build
        name: Build setup
        with:
          java-distribution: adopt
          maven-cache-key-modifier: operate-tests
          maven-version: 3.8.6
          vault-address: ${{ secrets.VAULT_ADDR }}
          vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}

      # Build: all Maven artifacts
      - name: Build Maven
        run: |
          ./mvnw clean install -B -T1C -P -docker,skipFrontendBuild -DskipTests -P!include-optimize -DskipChecks -DaltStagingDirectory=${{ github.workspace }}/staging-${{ env.BRANCH_NAME }} -DskipRemoteStaging=true -Dmaven.deploy.skip=true

      # Run integration tests in parallel
      - name: Backend - ${{ inputs.test-type }}
        run: |
          ${{ inputs.command }}

      # Reports: publish test metrics results
      - name: Upload Test Report
        if: ${{ (success() || failure()) }}
        uses: ./.github/actions/collect-test-artifacts
        with:
          name: "Operate ${{ inputs.test-type }}"
      - name: Send Slack notification on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.27.1
        env:
          SLACK_WEBHOOK_URL: ${{ steps.secrets.outputs.OPERATE_CI_ALERT_WEBHOOK_URL }}
        with:
          payload: |
            {
              "workflow_name": "${{ github.workflow }}",
              "github_run_url": "https://github.com/camunda/camunda/actions/runs/${{ github.run_id }}",
              "branch": "${{ github.head_ref || github.ref_name }}"
            }

      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
