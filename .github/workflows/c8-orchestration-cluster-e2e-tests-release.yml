# description: Runs End to End tests on the C8 Orchestration Cluster (ie, Tasklist, Operate) for release validation
# test location: /qa/c8-orchestration-cluster-e2e-test-suite
# type: CI
# owner: @camunda/qa-engineering
---
name: C8 Orchestration Cluster E2E Tests - Release Validation

on:
  push:
    branches:
      - "release**"
  pull_request:
    branches:
      - "release**"

permissions: {}

jobs:
  release-e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions: {}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Determine Image Tag
        id: image-tag
        shell: bash
        run: |
          # Extract version from 8.8+ release branch patterns:
          # - release-8.8.0, release-8.9.1, release-9.0.0
          # - release-8.8.0-SNAPSHOT, release-SNAPSHOT
          # - origin/release-8.8.2
          # - custom-release-8.8.0-rc3
          BRANCH_NAME="${{ github.ref_name }}"
          echo "Analyzing branch name: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" =~ ^(origin/)?.*release-([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?)$ ]]; then
            VERSION="${BASH_REMATCH[2]}"
            
            # Extract major and minor version numbers (handle SNAPSHOT versions)
            BASE_VERSION=$(echo "$VERSION" | sed 's/-SNAPSHOT$//')
            MAJOR=$(echo "$BASE_VERSION" | cut -d. -f1)
            MINOR=$(echo "$BASE_VERSION" | cut -d. -f2)
            
            # Check if version is 8.8 or greater (consolidated architecture)
            if [[ "$MAJOR" -eq 8 && "$MINOR" -ge 8 ]] || [[ "$MAJOR" -gt 8 ]]; then
              IMAGE_TAG="$VERSION"
              echo "Extracted version $IMAGE_TAG from branch name (8.8+ supported)"
            else
              echo "Error: Version $VERSION is not supported"
              echo "This workflow only supports 8.8+ releases (consolidated architecture)"
              exit 1
            fi
          elif [[ "$BRANCH_NAME" =~ ^(origin/)?.*release-SNAPSHOT$ ]]; then
            # Handle generic SNAPSHOT releases - use latest development version
            IMAGE_TAG="SNAPSHOT"
            echo "Extracted SNAPSHOT version for development testing"
          else
            echo "Error: Could not extract version from branch name: $BRANCH_NAME"
            echo "Expected patterns: release-X.Y.Z, release-SNAPSHOT where X.Y >= 8.8"
            echo "Examples: release-8.8.0, release-8.9.1-SNAPSHOT, release-SNAPSHOT"
            exit 1
          fi

          echo "image-tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "Final image tag: $IMAGE_TAG"

      - name: Update Docker Compose with Release Image
        if: steps.image-tag.outcome == 'success'
        shell: bash
        run: |
          IMAGE_TAG="${{ steps.image-tag.outputs.image-tag }}"
          echo "Updating Docker Compose configuration for version: $IMAGE_TAG"

          # Update consolidated image for all versions
          sed -i -E "s|image: camunda/camunda:[^[:space:]]*|image: camunda/camunda:$IMAGE_TAG|g" \
            qa/c8-orchestration-cluster-e2e-test-suite/config/docker-compose.yml

          echo "Updated docker-compose.yml to use image: camunda/camunda:$IMAGE_TAG"

          # Fix Elasticsearch URL configuration conflicts for 8.9+ versions
          # The error shows conflicting URLs: localhost:9200 vs elasticsearch:9200
          echo "Fixing Elasticsearch URL configuration conflicts..."

          # Update any localhost Elasticsearch references to use the Docker service name
          sed -i -E 's|http://localhost:9200|http://elasticsearch:9200|g' \
            qa/c8-orchestration-cluster-e2e-test-suite/config/docker-compose.yml

          # Verify the changes
          echo "Updated image and Elasticsearch configuration:"
          grep -E "(image: camunda/camunda:|elasticsearch:9200)" qa/c8-orchestration-cluster-e2e-test-suite/config/docker-compose.yml || echo "Configuration updated"

      - name: Debug Docker Compose Configuration
        if: steps.image-tag.outcome == 'success'
        shell: bash
        run: |
          echo "=== Docker Compose Configuration Debug ==="
          echo "Current working directory: $(pwd)"
          echo "DATABASE environment variable: $DATABASE"
          echo "Available compose files:"
          ls -la *.yml *.yaml 2>/dev/null || echo "No compose files found"

          echo "=== Docker Compose File Contents ==="
          cat docker-compose.yml | grep -A5 -B5 -E "(camunda|elasticsearch|9200)" || echo "No matching configuration found"

          echo "=== Docker Compose Config Validation ==="
          DATABASE=elasticsearch docker compose config --quiet || echo "Compose config validation failed"

          echo "=== Docker Compose Services ==="
          DATABASE=elasticsearch docker compose ps -a
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite/config
        env:
          DATABASE: elasticsearch

      - name: Start Camunda
        if: steps.image-tag.outcome == 'success'
        shell: bash
        run: |
          echo "Starting Camunda with image tag: ${{ steps.image-tag.outputs.image-tag }}"
          echo "Setting up environment variables..."

          # Explicitly set DATABASE variable for Docker Compose
          export DATABASE=elasticsearch
          echo "DATABASE=$DATABASE"

          # Verify Docker Compose can read the environment
          echo "=== Environment Variables ==="
          env | grep DATABASE || echo "DATABASE not found in environment"

          # Start Elasticsearch first to ensure it's ready
          echo "Starting Elasticsearch..."
          DATABASE=elasticsearch docker compose up -d elasticsearch

          # Wait for Elasticsearch to be ready
          echo "Waiting for Elasticsearch to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:9200/_cluster/health > /dev/null 2>&1; then
              echo "Elasticsearch is ready!"
              break
            fi
            echo "Waiting for Elasticsearch... ($i/30)"
            sleep 5
          done

          # Start Camunda services with explicit environment variable
          echo "Starting Camunda..."
          DATABASE=elasticsearch docker compose up -d camunda

          # Verify services started
          echo "Checking if Docker Compose started successfully..."
          DATABASE=elasticsearch docker compose ps
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite/config
        env:
          DATABASE: elasticsearch

      - name: Wait for services to be ready
        if: steps.image-tag.outcome == 'success'
        id: wait-for-services
        shell: bash
        run: |
          echo "Checking if services are up..."
          echo "DATABASE environment: $DATABASE"

          # First check if containers are running
          echo "=== Container status ==="
          DATABASE=elasticsearch docker compose ps

          # Check container logs for startup issues
          echo "=== Camunda Container logs (last 50 lines) ==="
          DATABASE=elasticsearch docker compose logs --tail=50 camunda || echo "No logs available"

          # Wait for services with increased timeout for 8.9 SNAPSHOT
          ready=false
          max_attempts=120  # Increased from 90 for SNAPSHOT versions

          for i in $(seq 1 $max_attempts); do
            # Check if container is running first
            if ! DATABASE=elasticsearch docker compose ps camunda | grep -q "running"; then
              echo "Container is not running, attempt $i/$max_attempts"
              # Show recent logs if container stopped
              DATABASE=elasticsearch docker compose logs --tail=20 camunda
              sleep 10
              continue
            fi
            
            # Check service endpoints
            tasklist_status=$(curl -s -m 10 http://localhost:8080/tasklist || echo "Failed")
            operate_status=$(curl -s -m 10 http://localhost:8080/operate || echo "Failed")
            identity_status=$(curl -s -m 10 http://localhost:8080/identity || echo "Failed")

            if [[ "$tasklist_status" != "Failed" && "$operate_status" != "Failed" && "$identity_status" != "Failed" ]]; then
              echo "Services are ready!"
              ready=true
              break
            fi

            echo "Waiting for services... ($i/$max_attempts)"
            echo "Response from Tasklist: $tasklist_status"
            echo "Response from Operate: $operate_status" 
            echo "Response from Identity: $identity_status"
            
            # Show logs every 10 attempts for debugging
            if (( i % 10 == 0 )); then
              echo "=== Recent Camunda logs (attempt $i) ==="
              DATABASE=elasticsearch docker compose logs --tail=10 camunda
            fi
            
            sleep 15  # Increased sleep for SNAPSHOT versions
          done

          if [ "$ready" = true ]; then
            echo "ready=true" >> "$GITHUB_OUTPUT"
          else
            echo "Services failed to start in time after $max_attempts attempts."
            echo "Final container status:"
            DATABASE=elasticsearch docker compose ps
            echo "Final container logs:"
            DATABASE=elasticsearch docker compose logs --tail=100 camunda
            exit 1
          fi
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite/config
        env:
          DATABASE: elasticsearch

      - name: Setup Node.js
        if: steps.image-tag.outcome == 'success'
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
          cache-dependency-path: qa/c8-orchestration-cluster-e2e-test-suite/package-lock.json

      - name: Clean install dependencies
        if: steps.image-tag.outcome == 'success'
        shell: bash
        run: |
          rm -rf node_modules package-lock.json
          npm install
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite

      - name: Import Secrets
        if: steps.image-tag.outcome == 'success'
        id: secrets
        uses: hashicorp/vault-action@2c5827061f1ad91ca97897d6257ebe638e033699
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false
          secrets: |
            secret/data/github.com/organizations/camunda TESTRAIL_QA_EMAIL;
            secret/data/github.com/organizations/camunda TESTRAIL_QA_PSW;

      - name: Install Playwright Browsers
        if: steps.image-tag.outcome == 'success'
        shell: bash
        run: npx playwright install --with-deps chromium
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite

      - name: Run E2E Tests
        if: steps.image-tag.outcome == 'success'
        shell: bash
        env:
          LOCAL_TEST: "false"
          CAMUNDA_AUTH_STRATEGY: "BASIC"
          CAMUNDA_BASIC_AUTH_USERNAME: "demo"
          CAMUNDA_BASIC_AUTH_PASSWORD: "demo"
          CORE_APPLICATION_URL: "http://localhost:8080"
          ZEEBE_REST_ADDRESS: "http://localhost:8080"
          RELEASE_VERSION: ${{ steps.image-tag.outputs.image-tag }}
        run: |
          echo "Running E2E tests against Camunda release version: $RELEASE_VERSION"
          npm run test -- --project=chromium
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite

      - name: Publish test results to TestRail
        if: always() && steps.image-tag.outcome == 'success'
        shell: bash
        env:
          TESTRAIL_HOST: "https://camunda.testrail.com/"
          TESTRAIL_USERNAME: ${{ steps.secrets.outputs.TESTRAIL_QA_EMAIL }}
          TESTRAIL_KEY: ${{ steps.secrets.outputs.TESTRAIL_QA_PSW }}
          JUNIT_RESULTS_FILE: "qa/c8-orchestration-cluster-e2e-test-suite/test-results/junit-report.xml"
        run: |
          pip install trcli
          trcli -y -h "$TESTRAIL_HOST" \
            --project 'C8' \
            --username "$TESTRAIL_USERNAME" \
            --key "$TESTRAIL_KEY" \
            parse_junit --suite-id 17050 \
            --title "${{ steps.image-tag.outputs.image-tag }}-Release OC test" \
            --close-run \
            -f "$JUNIT_RESULTS_FILE"

      - name: Upload test results
        if: always() && steps.image-tag.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.image-tag.outputs.image-tag }}-Release OC test
          path: qa/c8-orchestration-cluster-e2e-test-suite/html-report
          retention-days: 10

      - name: Print Docker logs before failing
        if: failure()
        shell: bash
        run: |
          echo "=== Camunda logs ==="
          DATABASE=elasticsearch docker compose logs camunda || true
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite/config

      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
