# description: Runs End to End tests on the C8 Orchestration Cluster (ie, Tasklist, Operate) during monoRepo releases
# type: CI
# owner: @camunda/qa-engineering
---
name: C8 Orchestration Cluster E2E Tests Release

on:
  workflow_dispatch:
    inputs:
      monorepo_release:
        description: "Enter the monorepo release version (e.g., 8.8.0, 8.8.1, 8.8.0-alpha8, 8.8.0-alpha8-rc1)"
        required: true
        type: string

permissions:
  contents: read

jobs:
  validate-release:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.49.0-jammy
    outputs:
      release_version: ${{ steps.get-release.outputs.release_version }}
      base: ${{ steps.detect-base.outputs.base }}
    steps:
      - name: Get release version
        id: get-release
        run: |
          release_version="${{ github.event.inputs.monorepo_release }}"

          echo "Release version: $release_version"
          echo "release_version=$release_version" >> "$GITHUB_OUTPUT"

          # Validate version format (x.y.z or x.y.z-suffix)
          if [[ ! "$release_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)*(-[a-zA-Z0-9]+)*$ ]]; then
            echo "Error: Invalid release version format. Expected format: x.y.z or x.y.z-suffix (e.g., 8.8.0, 8.8.0-alpha8, 8.8.0-alpha8-rc1)"
            exit 1
          fi

      - uses: actions/checkout@v4

      - name: Detect base branch
        id: detect-base
        run: |
          release_version="${{ steps.get-release.outputs.release_version }}"
          echo "Detecting base branch for release version: $release_version"

          # Extract major.minor version
          major_minor=$(echo "$release_version" | cut -d. -f1-2)

          git fetch origin stable/8.6 stable/8.7 stable/8.8 main

          # Determine base branch based on version
          if [[ "$major_minor" == "8.6" ]]; then
            base="stable/8.6"
          elif [[ "$major_minor" == "8.7" ]]; then
            base="stable/8.7"
          elif [[ "$major_minor" == "8.8" ]]; then
            base="stable/8.8"
          else
            base="main"
          fi

          echo "Detected base branch: $base"
          echo "base=$base" >> "$GITHUB_OUTPUT"

      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          job_name: c8-orchestration-cluster-e2e-tests-validate-release
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}

  c8-orchestration-cluster-e2e-tests:
    name: C8 Orchestration Cluster E2E Tests Release (Tasklist ${{ matrix.tasklist_mode }} mode)
    strategy:
      fail-fast: false
      matrix:
        tasklist_mode: ${{ fromJSON( (needs.validate-release.outputs.base == 'stable/8.6' || needs.validate-release.outputs.base == 'stable/8.7') && '["v1"]' || '["v1","v2"]' ) }}
    needs: validate-release
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions: {}
    steps:
      - name: Print release info
        run: |
          echo "Release version: ${{ needs.validate-release.outputs.release_version }}"
          echo "Base branch: ${{ needs.validate-release.outputs.base }}"
          echo "Tasklist mode: ${{ matrix.tasklist_mode }}"

      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-release.outputs.base }}

      - name: Update docker-compose with release version
        run: |
          release_version="${{ needs.validate-release.outputs.release_version }}"
          base="${{ needs.validate-release.outputs.base }}"
          compose_file="qa/c8-orchestration-cluster-e2e-test-suite/config/docker-compose.yml"

          echo "Updating docker images to version: $release_version for base: $base"

          if [[ "$base" == "stable/8.6" || "$base" == "stable/8.7" ]]; then
            echo "Updating separate service images (zeebe, tasklist, operate)"
            # Update zeebe image
            sed -i.bak "s|image: camunda/zeebe:.*|image: camunda/zeebe:$release_version|g" "$compose_file"
            # Update tasklist image  
            sed -i.bak2 "s|image: camunda/tasklist:.*|image: camunda/tasklist:$release_version|g" "$compose_file"
            # Update operate image
            sed -i.bak3 "s|image: camunda/operate:.*|image: camunda/operate:$release_version|g" "$compose_file"
            
            echo "Updated docker-compose.yml with separate services:"
            grep -E "image: camunda/(zeebe|tasklist|operate):" "$compose_file"
          else
            echo "Updating unified camunda service image"
            # Replace the camunda image tag in docker-compose.yml
            sed -i.bak "s|image: camunda/camunda:.*|image: camunda/camunda:$release_version|g" "$compose_file"
            
            echo "Updated docker-compose.yml with unified service:"
            grep "image: camunda/camunda:" "$compose_file"
          fi

      - name: Set NON_STANDALONE variable
        run: |
          base="${{ needs.validate-release.outputs.base }}"
          if [[ "$base" == "stable/8.6" || "$base" == "stable/8.7" ]]; then
            echo "NON_STANDALONE=true" >> "$GITHUB_ENV"
          else
            echo "NON_STANDALONE=false" >> "$GITHUB_ENV"
          fi

      - name: Start Camunda
        run: |
          if [[ "$NON_STANDALONE" == "true" ]]; then
            echo "Using separate services for older branches (8.6/8.7)"
            DATABASE=elasticsearch docker compose up -d zeebe operate tasklist
          else
            echo "Using standalone camunda container"
            if [[ "${{ matrix.tasklist_mode }}" == "v1" ]]; then
              echo "Starting with Tasklist V1 mode enabled"
              CAMUNDA_TASKLIST_V2_MODE_ENABLED=false DATABASE=elasticsearch docker compose up -d camunda
            else
              echo "Starting with default Tasklist V2 mode"
              DATABASE=elasticsearch docker compose up -d camunda
            fi
          fi
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite/config

      - name: List running Docker containers
        run: docker ps -a
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite/config

      - name: Wait for services to be ready
        id: wait-for-services
        run: |
          echo "Checking if services are up..."
          ready=false
          for i in {1..90}; do
            if [[ "$NON_STANDALONE" == "true" ]]; then
              tasklist_status=$(curl -s -m 5 http://localhost:8080 || echo "Failed")
              operate_status=$(curl -s -m 5 http://localhost:8081 || echo "Failed")
            else
              tasklist_status=$(curl -s -m 5 http://localhost:8080/tasklist || echo "Failed")
              operate_status=$(curl -s -m 5 http://localhost:8080/operate || echo "Failed")
              identity_status=$(curl -s -m 5 http://localhost:8080/identity || echo "Failed")
            fi
            if [[ "$NON_STANDALONE" == "true" ]]; then
              if [[ "$tasklist_status" != "Failed" && "$operate_status" != "Failed" ]]; then
                echo "Services are ready!"
                ready=true
                break
              fi
            else
              if [[ "$tasklist_status" != "Failed" && "$operate_status" != "Failed" && "$identity_status" != "Failed" ]]; then
                echo "Services are ready!"
                ready=true
                break
              fi
            fi
            echo "Waiting for services... ($i/90)"
            sleep 10
          done
          if [ "$ready" = true ]; then
            echo "ready=true" >> "$GITHUB_OUTPUT"
          else
            echo "Services failed to start in time."
            exit 1
          fi
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite/config

      - name: Print Docker logs before failing
        if: failure()
        run: |
          if [[ "$NON_STANDALONE" == "true" ]]; then
            docker compose logs zeebe
            docker compose logs tasklist
            docker compose logs operate
          else
            docker compose logs camunda
          fi
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite/config

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
          cache-dependency-path: qa/c8-orchestration-cluster-e2e-test-suite/package-lock.json

      - name: Clean install dependencies
        shell: bash
        run: |
          rm -rf node_modules package-lock.json
          npm install
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@2c5827061f1ad91ca97897d6257ebe638e033699
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false # we rely on step outputs, no need for environment variables
          secrets: |
            secret/data/github.com/organizations/camunda TESTRAIL_QA_EMAIL;
            secret/data/github.com/organizations/camunda TESTRAIL_QA_PSW;

      - name: Python setup
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Run tests
        shell: bash
        env:
          LOCAL_TEST: "false"
          CAMUNDA_AUTH_STRATEGY: "BASIC"
          CAMUNDA_BASIC_AUTH_USERNAME: "demo"
          CAMUNDA_BASIC_AUTH_PASSWORD: "demo"
          CAMUNDA_TASKLIST_V2_MODE_ENABLED: ${{ matrix.tasklist_mode == 'v2' && 'true' || 'false' }}
        run: |
          if [[ "$NON_STANDALONE" == "true" ]]; then
            export CORE_APPLICATION_TASKLIST_URL="http://localhost:8080"
            export CORE_APPLICATION_OPERATE_URL="http://localhost:8081"
            export ZEEBE_REST_ADDRESS="http://localhost:8089"
            TEST_ARGS=(--project=chromium)
          else
            export CORE_APPLICATION_URL="http://localhost:8080"
            export ZEEBE_REST_ADDRESS="http://localhost:8080"
            TEST_ARGS=(--project=chromium)
            
            if [[ "${{ matrix.tasklist_mode }}" == "v2" ]]; then
              echo "Running V2 mode tests"
              if [[ "${{ needs.validate-release.outputs.base }}" == "stable/8.8" ]]; then
                # stable/8.8: run all tests excluding @v1-only tagged tests
                TEST_ARGS+=(tests/ --grep-invert '@v1-only')
              else
                # main: run all tests excluding v1/ directories
                TEST_ARGS+=(tests/ --grep-invert 'v1/')
              fi
            else
              echo "Running V1 mode tests"
              if [[ "${{ needs.validate-release.outputs.base }}" == "stable/8.8" ]]; then
                # stable/8.8: no v1/ directories, run regular directories for V1 mode
                TEST_ARGS+=(tests/tasklist/ tests/common-flows/)
              else
                # main: has v1/ directories for V1 mode
                TEST_ARGS+=(tests/tasklist/v1/ tests/common-flows/v1/)
              fi
            fi
          fi
          echo "Running tests with args: ${TEST_ARGS[*]}"
          npm run test -- "${TEST_ARGS[@]}"
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite

      - name: Publish test results to TestRail
        if: always()
        shell: bash
        env:
          TESTRAIL_HOST: "https://camunda.testrail.com/"
          TESTRAIL_USERNAME: ${{ steps.secrets.outputs.TESTRAIL_QA_EMAIL }} # Use the imported secret
          TESTRAIL_KEY: ${{ steps.secrets.outputs.TESTRAIL_QA_PSW }} # Use the imported secret
          JUNIT_RESULTS_FILE: "qa/c8-orchestration-cluster-e2e-test-suite/test-results/junit-report.xml"
        run: |
          pip install trcli
          trcli -y -h "$TESTRAIL_HOST" \
            --project 'C8' \
            --username "$TESTRAIL_USERNAME" \
            --key "$TESTRAIL_KEY" \
            parse_junit --suite-id 17050 \
            --title "Release C8 Orchestration Cluster Test Run Results - v${{ needs.validate-release.outputs.release_version }} (Tasklist ${{ matrix.tasklist_mode }} mode) - $(date '+%Y-%m-%d %H:%M:%S')" \
            --close-run \
            -f "$JUNIT_RESULTS_FILE"

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: C8 Orchestration Cluster E2E Test Result Release v${{ needs.validate-release.outputs.release_version }} (Tasklist ${{ matrix.tasklist_mode }} mode)
          path: qa/c8-orchestration-cluster-e2e-test-suite/html-report
          retention-days: 10

      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          job_name: c8-orchestration-cluster-e2e-tests-release
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}

  notify-result:
    name: Send notification based on test results
    runs-on: ubuntu-latest
    needs: [validate-release, c8-orchestration-cluster-e2e-tests]
    if: always()
    timeout-minutes: 5
    permissions: {}
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@2c5827061f1ad91ca97897d6257ebe638e033699
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false
          secrets: |
            secret/data/products/camunda/ci/github-actions SLACK_TOPMONOREPORELEASE_WEBHOOK_URL;

      - name: Send Slack notification
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a
        with:
          webhook: ${{ steps.secrets.outputs.SLACK_TOPMONOREPORELEASE_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ needs.c8-orchestration-cluster-e2e-tests.result == 'success' && format('<@qa-automated-release-manager> :test_tube: C8 Orchestration Cluster E2E Tests for {0} succeeded. See <https://github.com/camunda/camunda/actions/runs/{1}|test run overview> for details.', needs.validate-release.outputs.release_version, github.run_id) || format('<@qa-automated-release-manager> :warning: C8 Orchestration Cluster E2E Tests for {0} failed. See <https://github.com/camunda/camunda/actions/runs/{1}|test run overview> for details.', needs.validate-release.outputs.release_version, github.run_id) }}"
                  }
                }
              ]
            }

      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          job_name: c8-orchestration-cluster-e2e-tests-notify-result
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
