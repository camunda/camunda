# type: Release
# owner: @camunda/monorepo-devops-team
---
name: Camunda Platform Release Workflow

on:
  workflow_call:
    inputs:
      releaseBranch:
        description: 'The branch to perform the release on, defaults to `release-$releaseVersion`'
        type: string
        required: false
        default: ''
      releaseVersion:
        description: 'The version to be build and released. If no releaseBranch specified, expecting `release-$releaseVersion` to already exist.'
        type: string
        required: true
      nextDevelopmentVersion:
        description: 'Next development version, e.g. 8.X.X-SNAPSHOT.'
        type: string
        required: true
      isLatest:
        description: 'Whether this is the latest release and the docker image should be tagged as camunda/{component}:latest'
        type: boolean
        required: false
        default: false
      dryRun:
        description: 'Whether to perform a dry release where no changes or artifacts are pushed, defaults to true.'
        type: boolean
        default: true
      releaseProcessDryRun:
        description: 'Activates E2E testing mode for the release process. This mode creates real, temporary changes and artifacts in GitHub and Maven Central, which are left for manual inspection. A separate process (dryrun_cleanup.bpmn) is responsible for their final reversion, ensuring no lasting impact on production. This flag acts separately to dryRun flag and should be used with dryRun=false. If both flags are active then dryRun takes precedence.'
        type: boolean
        default: false
  workflow_dispatch:
    inputs:
      releaseBranch:
        description: 'The branch to perform the release on, defaults to `release-$releaseVersion`'
        type: string
        required: false
        default: ''
      releaseVersion:
        description: 'The version to be build and released. If no releaseBranch specified, expecting `release-$releaseVersion` to already exist.'
        type: string
        required: true
      nextDevelopmentVersion:
        description: 'Next development version, e.g. 8.X.X-SNAPSHOT.'
        type: string
        required: true
      isLatest:
        description: 'Whether this is the latest release and the docker image should be tagged as camunda/{component}:latest'
        type: boolean
        required: false
        default: false
      dryRun:
        description: 'Whether to perform a dry release where no changes or artifacts are pushed, defaults to true.'
        type: boolean
        default: true
      releaseProcessDryRun:
        description: 'Activates E2E testing mode for the release process. This mode creates real, temporary changes and artifacts in GitHub and Maven Central, which are left for manual inspection. A separate process (dryrun_cleanup.bpmn) is responsible for their final reversion, ensuring no lasting impact on production. This flag acts separately to dryRun flag and should be used with dryRun=false. If both flags are active then dryRun takes precedence.'
        type: boolean
        default: false
defaults:
  run:
    shell: bash

env:
  RELEASE_BRANCH: ${{ inputs.releaseBranch != '' && inputs.releaseBranch || format('release-{0}', inputs.releaseVersion) }}
  RELEASE_VERSION: ${{ inputs.releaseVersion }}
  RELEASE_TAG: ${{ inputs.releaseProcessDryRun && format('dryrun-{0}', inputs.releaseVersion) || inputs.releaseVersion }}
  GH_TOKEN: ${{ github.token }} # needs to be available for the gh CLI tool
jobs:
  # Release job performs Maven prepare and perform release operations, managing release artifacts and repository changes.
  # Flags impact:
  # - With dryRun=true: Skips pushing changes to Git, Maven Central, and Artifactory (local-only operations)
  # - With releaseProcessDryRun=true: Creates real, temporary but unpublished artifacts in Maven Central and GitHub for E2E testing, but skips Artifactory publishing
  # - When both flags are active, dryRun takes precedence over releaseProcessDryRun
  release:
    name: Maven Release
    runs-on: gcp-core-16-release
    outputs:
      releaseTagRevision: ${{ steps.maven-perform-release.outputs.tagRevision }}
      releaseBranch: ${{ env.RELEASE_BRANCH }}
    env:
      DEVELOPMENT_VERSION: ${{ inputs.nextDevelopmentVersion }}
      PUSH_CHANGES: ${{ !inputs.dryRun }}
    steps:
      - name: Output Inputs
        run: echo "${{ toJSON(github.event.inputs) }}"
        # This step generates a GitHub App token to be used in Git operations as a workaround  for
        # the known GitHub issue described in https://github.com/camunda/camunda/issues/28522
      - name: Generate GitHub token
        id: github-token
        uses: camunda/infra-global-github-actions/generate-github-app-token-from-vault-secrets@main
        with:
          github-app-id-vault-key: MONOREPO_RELEASE_APP_ID
          github-app-id-vault-path: secret/data/products/camunda/ci/camunda
          github-app-private-key-vault-key: MONOREPO_RELEASE_APP_PRIVATE_KEY
          github-app-private-key-vault-path: secret/data/products/camunda/ci/camunda
          vault-auth-method: approle
          vault-auth-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-auth-secret-id: ${{ secrets.VAULT_SECRET_ID}}
          vault-url: ${{ secrets.VAULT_ADDR }}
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_BRANCH }}
          # Overriding the default GITHUB_TOKEN with a GitHub App token in order to workaround
          # the known GitHub issue described in https://github.com/camunda/camunda/issues/28522
          # NOTES:
          # - This token will be used for all git operations in this job
          # - This token expires after 1 hour (https://github.com/actions/create-github-app-token?tab=readme-ov-file#create-github-app-token)
          token: ${{ steps.github-token.outputs.token }}
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v3.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_PUB;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_DEPLOYMENT_USR;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_DEPLOYMENT_PSW;
      - name: Git User Setup
        run: |
          git config --global user.email "github-actions[release]"
          git config --global user.name "github-actions[release]@users.noreply.github.com"
      - name: Install Maven Central GPG Key
        # setup-maven supports this as well but needs the key in the armor ascii format,
        # while we only have it plain bas64 encoded
        # see https://github.com/actions/setup-java/issues/100#issuecomment-742679976
        run: |
          echo -n "${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC }}" \
            | base64 --decode \
            | gpg -q --allow-secret-key-import --import --no-tty --batch --yes
          echo -n "${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PUB }}" \
            | base64 --decode \
            | gpg -q --import --no-tty --batch --yes
      - name: Setup Build Tooling
        uses: ./.github/actions/setup-build
        with:
          maven-servers: |
            [{
                "id": "central",
                "username": "${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_USR }}",
                "password": "${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_PSW }}"
            }]
          vault-address: ${{ secrets.VAULT_ADDR }}
          vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}
      - name: Maven Prepare Release
        id: maven-prepare-release
        run: |
          # Preparing the maven release
          # https://maven.apache.org/maven-release/maven-release-plugin/prepare-mojo.html
          # https://maven.apache.org/maven-release/maven-release-plugin/usage/prepare-release.html
          #
          # -DcompletionGoals
          #   Goals to run on completion of the preparation step, after transformation back to the next development
          #   version but before committing. Space delimited.
          #   We apply spotless to make sure that pom format is correct before committing.
          #
          # -DpreparationGoals
          #   Goals to run as part of the preparation step, after transformation but before committing. Space delimited.
          #   Default is 'clean verify'; We want to skip all the checks and packaging (as it will be done again later) so we set it to empty
          #
          # -Darguments
          #   Additional arguments to pass to the Maven executions, separated by spaces.
          #   Per default it is not required, but the release plugin is configured in the camunda release plugin (and this property is used)
          #   This is the reason why we have to set it at least as empty string.
          ./mvnw release:prepare -B \
            -Dresume=false \
            -Dtag="${RELEASE_TAG}" \
            -DreleaseVersion="${RELEASE_VERSION}" \
            -DdevelopmentVersion="${DEVELOPMENT_VERSION}" \
            -DpushChanges="${PUSH_CHANGES}" \
            -DremoteTagging="${PUSH_CHANGES}" \
            -DcompletionGoals="spotless:apply" \
            -P-autoFormat \
            -DpreparationGoals="" \
            -P\!include-optimize \
            -Darguments='-P!include-optimize'

      - name: Maven Perform Release
        id: maven-perform-release
        env:
          SKIP_CENTRAL_RELEASE: ${{ inputs.dryRun }}
          SKIP_CAMUNDA_RELEASE: ${{ inputs.dryRun || inputs.releaseProcessDryRun }}
        run: |
          # Perform a maven release
          # https://maven.apache.org/maven-release/maven-release-plugin/perform-mojo.html
          # https://maven.apache.org/maven-release/maven-release-plugin/usage/perform-release.html

          # -DskipQaBuild=true -P-autoFormat
          #   In order to disable QA/IT and the auto formatting during the release.
          #   It is unnecessary to release integration tests, and we don't want to run the auto-formatting unnecessarily.

          # shellcheck disable=SC2016
          ./mvnw release:perform -B \
            -DreleaseVersion="${RELEASE_VERSION}" \
            -Dgpg.passphrase="${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}" \
            -DlocalCheckout="${{ inputs.dryRun }}" \
            -DskipQaBuild=true \
            -P-autoFormat \
            -P\!include-optimize \
            -Darguments='-P-autoFormat -DskipQaBuild=true -DskipChecks=true -DskipTests=true -Dskip.fe.build=false -Dspotless.apply.skip=false -Dskip.central.release=${SKIP_CENTRAL_RELEASE} -Dskip.camunda.release=${SKIP_CAMUNDA_RELEASE} -P!include-optimize -Dgpg.passphrase="${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}"' \
            ${{ inputs.dryRun && '-Djapicmp.skip=true' || '' }}

          # switch to the directory to which maven checks out the release tag
          # see https://maven.apache.org/maven-release/maven-release-plugin/perform-mojo.html#workingDirectory
          pushd target/checkout
          TAG_REVISION=$(git log -n 1 --pretty=format:'%h')
          export TAG_REVISION
          echo "tagRevision=${TAG_REVISION}" >> "$GITHUB_OUTPUT"
          popd
      - name: Collect Release artifacts
        id: release-artifacts
        run: |
          ARTIFACT_DIR=$(mktemp -d)
          cp target/checkout/dist/target/camunda-zeebe-"${RELEASE_VERSION}".tar.gz "${ARTIFACT_DIR}/"
          cp target/checkout/dist/target/camunda-zeebe-"${RELEASE_VERSION}".zip "${ARTIFACT_DIR}/"
          cp target/checkout/db/rdbms-schema/target/camunda-db-rdbms-schema-"${RELEASE_VERSION}".zip "${ARTIFACT_DIR}/"
          echo "dir=${ARTIFACT_DIR}" >> "$GITHUB_OUTPUT"
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ inputs.releaseVersion }}
          path: ${{ steps.release-artifacts.outputs.dir }}
          retention-days: 5
      - name: Update Compat Version
        run: |
          if [[ ! "$RELEASE_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Skipping updating the compat version as ${RELEASE_VERSION} is not a stable version"
            exit 0
          fi

          ./mvnw -B versions:set-property -DgenerateBackupPoms=false -Dproperty=backwards.compat.version -DnewVersion="${RELEASE_VERSION}" -P\!include-optimize
          FILE=$(./mvnw -B help:evaluate -Dexpression=ignored.changes.file -q -DforceStdout -P\!include-optimize)
          rm -f "clients/java/${FILE}" "test/${FILE}" "exporter-api/${FILE}" "protocol/${FILE}" "bpmn-model/${FILE}"
          git commit -am "build(project): update java compat versions"
      - name: Delete version-specific allowed API breaking changes
        run: |
          IFS=$'\n' readarray -t files <<< "$(find . -name 'ignored-changes.json')"
          for file in "${files[@]}"; do
            if [ '${{ inputs.dryRun }}' = 'false' ]; then
              echo "[DRY RUN] rm -f ${file}"
            else
              rm -f "${file}"
            fi
          done
      - name: Push Changes to Release branch
        if: ${{ !inputs.dryRun }}
        run: git push origin "${RELEASE_BRANCH}"
      - name: Cleanup Maven Central GPG Key
        # make sure we always remove the imported signing key to avoid it leaking on runners
        if: always()
        run: rm -rf "$HOME/.gnupg"
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  # GitHub release job creates a GitHub release with artifacts, changelog, and proper versioning.
  # Flags impact:
  # - With dryRun=true: Skips creating the actual GitHub release (only prepares artifacts and changelog)
  # - With releaseProcessDryRun=true: Creates a draft GitHub release for E2E testing and manual inspection
  # - Uses RELEASE_TAG for versioning (prefixed with 'dryrun-' when releaseProcessDryRun=true)
  # The job generates changelog, checksums artifacts, and determines pre-release status
  github:
    needs: release
    name: Github Release
    runs-on: ubuntu-latest
    # Minor releases take more time since a lot of issues are included in the changelog
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_BRANCH }}
          fetch-depth: 0 # To fetch tags as well - necessary for the changelog generation
      - name: Install Zeebe changelog tool
        run: |
          gh release download --repo camunda/zeebe-changelog --pattern '*_Linux_i386.tar.gz'
          tar -xzvf zeebe-changelog_*
          chmod +x zcl
      - name: Identify previous release version
        id: prev_version
        uses: camunda/infra-global-github-actions/previous-version@main
        with:
          version: "${{ inputs.releaseVersion }}"
          verbose: 'false'
      - name: Generate Changelog
        id: gen-changelog
        run: |
          # We set some bash properties to better fail/debug this script
          #
          # * https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html
          # * https://explainshell.com/explain?cmd=set+-euox+pipefail
          #
          set -euox pipefail

          # Default changelog value
          changelog="Release ${{ inputs.releaseVersion }}"

          # Add the release labels to the release's issues, specifying the previous and current release in place of ZCL_FROM_REV and ZCL_TARGET_REV, respectively.
          #
          # ZCL_TARGET_REV should be replaced with the tag name for the version you are releasing, and
          # ZCL_FROM_REV should be replaced as the tag name for the previous version, based on the release type
          ZCL_FROM_REV="${{ steps.prev_version.outputs.previous_version }}"
          ZCL_TARGET_REV="${{ env.RELEASE_TAG }}"

          # The following command will add labels to the issues on GitHub.
          # You can verify this step by looking at closed issues. They should now be tagged with the release.
          ./zcl add-labels \
          --token=${{ secrets.GITHUB_TOKEN }} \
          --from="$ZCL_FROM_REV" \
          --target="$ZCL_TARGET_REV" \
          --label="version:$ZCL_TARGET_REV" \
          --org camunda --repo camunda

          # The following command will print the markdown code to sysout - we are storing this into our variable "changelog"
          changelog=$(./zcl generate \
          --token=${{ secrets.GITHUB_TOKEN }} \
          --label="version:$ZCL_TARGET_REV" \
          --org camunda --repo camunda)

          # With multiline strings the output needs to be set differently.
          #
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#example-of-a-multiline-string
          #
          {
            echo 'CHANGELOG<<EOF'
            echo "$changelog"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

          # To show the changelog also as step summary
          echo "$changelog" >> "$GITHUB_STEP_SUMMARY"
      - name: Download Release Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ inputs.releaseVersion }}
          path: release-artifacts
      - name: Create Artifact Checksums
        id: checksum
        working-directory: ./release-artifacts
        run: |
          for filename in *; do
            checksumFile="${filename}.sha1sum"
            sha1sum "${filename}" > "${checksumFile}"
            sha1sumResult=$?
            if [ ! -f "${checksumFile}" ]; then
              echo "Failed to created checksum of ${filename} at ${checksumFile}; [sha1sum] exited with result ${sha1sumResult}. Check the logs for errors."
              exit 1
            fi
          done
      - name: Determine if Pre-Release
        id: pre-release
        run: |
          shopt -s nocasematch # set matching to case insensitive
          PRE_RELEASE=false
          if [[ "${RELEASE_VERSION}" =~ ^.*-(alpha|rc|SNAPSHOT).*$ ]]; then
            PRE_RELEASE=true
          fi
          shopt -u nocasematch # reset it
          echo "result=${PRE_RELEASE}" >> "$GITHUB_OUTPUT"
      - name: Create Github release
        uses: ncipollo/release-action@v1
        if: ${{ !inputs.dryRun }}
        with:
          name: ${{ env.RELEASE_TAG }}
          artifacts: "release-artifacts/*"
          artifactErrorsFailBuild: true
          draft: ${{ inputs.releaseProcessDryRun }}
          makeLatest: ${{ inputs.isLatest }}
          body: ${{ steps.gen-changelog.outputs.changelog }}
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: ${{ steps.pre-release.outputs.result }}
          tag: ${{ env.RELEASE_TAG }}
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  # Docker image release jobs build and publish multi-platform Docker images for each Camunda component.
  # All Docker jobs follow the same pattern: build locally, verify, then sync to DockerHub.
  # Flags impact:
  # - With dryRun=true: Skips pushing images to DockerHub (only builds and verifies locally)
  # - With releaseProcessDryRun=true: Skips pushing images to DockerHub (only builds and verifies locally)
  # - Uses local registry (localhost:5000) for verification before pushing to remote registry
  zeebe-docker:
    needs: release
    name: Zeebe docker Image Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      # Local registry is used as multi arch images cannot be loaded locally but only pushed to a
      # registry. As we want to verify the images first before pushing them to dockerhub though,
      # a local registry is used and if verification passes images are pushed to the remote registry.
      registry:
        image: registry:3
        ports:
          - 5000:5000
    env:
      PLATFORMS: "linux/amd64,linux/arm64"
      LOCAL_DOCKER_IMAGE: localhost:5000/camunda/zeebe
      DOCKER_IMAGE: camunda/zeebe
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_BRANCH }}
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v3.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/zeebe/ci/zeebe REGISTRY_HUB_DOCKER_COM_USR;
            secret/data/products/zeebe/ci/zeebe REGISTRY_HUB_DOCKER_COM_PSW;
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_USR }}
          password: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_PSW }}
      - name: Download Release Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ inputs.releaseVersion }}
      - name: Build Zeebe Docker Image
        uses: ./.github/actions/build-platform-docker
        id: build-zeebe-docker
        with:
          repository: ${{ env.LOCAL_DOCKER_IMAGE }}
          version: ${{ inputs.releaseVersion }}
          revision: ${{ needs.release.outputs.releaseTagRevision }}
          # pushes to local registry for verification prior pushing to remote
          push: true
          distball: camunda-zeebe-${{ inputs.releaseVersion }}.tar.gz
          platforms: ${{ env.PLATFORMS }}
      - name: Verify Zeebe Docker image
        uses: ./.github/actions/verify-platform-docker
        with:
          imageName: ${{ env.LOCAL_DOCKER_IMAGE }}
          date: ${{ steps.build-zeebe-docker.outputs.date }}
          revision: ${{ needs.release.outputs.releaseTagRevision }}
          version: ${{ inputs.releaseVersion }}
          platforms: ${{ env.PLATFORMS }}
      - name: Sync Docker Image to DockerHub
        id: push-docker
        if: ${{ !inputs.dryRun && !inputs.releaseProcessDryRun }}
        # see https://docs.docker.com/build/ci/github-actions/examples/#copy-images-between-registries
        run: |
          docker buildx imagetools create \
            --tag ${{ env.DOCKER_IMAGE }}:${{ env.RELEASE_VERSION }} \
            ${{ inputs.isLatest && format('--tag {0}:latest', env.DOCKER_IMAGE) || '' }} \
            ${{ steps.build-zeebe-docker.outputs.image }}
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  operate-docker:
    needs: release
    name: Operate Docker Image Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      # Local registry is used as multi arch images cannot be loaded locally but only pushed to a
      # registry. As we want to verify the images first before pushing them to dockerhub though,
      # a local registry is used and if verification passes images are pushed to the remote registry.
      registry:
        image: registry:3
        ports:
          - 5000:5000
    env:
      PLATFORMS: "linux/amd64,linux/arm64"
      LOCAL_DOCKER_IMAGE: localhost:5000/camunda/operate
      DOCKER_IMAGE: camunda/operate
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_BRANCH }}
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v3.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/operate/ci/github-actions REGISTRY_HUB_DOCKER_COM_USR;
            secret/data/products/operate/ci/github-actions REGISTRY_HUB_DOCKER_COM_PSW;
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_USR }}
          password: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_PSW }}
      - name: Download Release Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ inputs.releaseVersion }}
      - name: Build Operate Docker Image
        uses: ./.github/actions/build-platform-docker
        id: build-operate-docker
        with:
          repository: ${{ env.LOCAL_DOCKER_IMAGE }}
          version: ${{ inputs.releaseVersion }}
          revision: ${{ needs.release.outputs.releaseTagRevision }}
          # pushes to local registry for verification prior pushing to remote
          push: true
          distball: camunda-zeebe-${{ inputs.releaseVersion }}.tar.gz
          platforms: ${{ env.PLATFORMS }}
          dockerfile: operate.Dockerfile
      - name: Verify Operate Docker image
        uses: ./.github/actions/verify-platform-docker
        with:
          imageName: ${{ env.LOCAL_DOCKER_IMAGE }}
          date: ${{ steps.build-operate-docker.outputs.date }}
          revision: ${{ needs.release.outputs.releaseTagRevision }}
          version: ${{ inputs.releaseVersion }}
          platforms: ${{ env.PLATFORMS }}
          dockerfile: operate.Dockerfile
          goldenfile: operate-docker-labels.golden.json
      - name: Sync Operate Docker Image to DockerHub
        id: push-docker
        if: ${{ !inputs.dryRun && !inputs.releaseProcessDryRun }}
        # see https://docs.docker.com/build/ci/github-actions/examples/#copy-images-between-registries
        run: |
          docker buildx imagetools create \
            --tag ${{ env.DOCKER_IMAGE }}:${{ env.RELEASE_VERSION }} \
            ${{ inputs.isLatest && format('--tag {0}:latest', env.DOCKER_IMAGE) || '' }} \
            ${{ steps.build-operate-docker.outputs.image }}
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  tasklist-docker:
    needs: release
    name: Tasklist Docker Image Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      # Local registry is used as multi arch images cannot be loaded locally but only pushed to a
      # registry. As we want to verify the images first before pushing them to dockerhub though,
      # a local registry is used and if verification passes images are pushed to the remote registry.
      registry:
        image: registry:3
        ports:
          - 5000:5000
    env:
      PLATFORMS: "linux/amd64,linux/arm64"
      LOCAL_DOCKER_IMAGE: localhost:5000/camunda/tasklist
      DOCKER_IMAGE: camunda/tasklist
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_BRANCH }}
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v3.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/tasklist/ci/tasklist REGISTRY_HUB_DOCKER_COM_USR;
            secret/data/products/tasklist/ci/tasklist REGISTRY_HUB_DOCKER_COM_PSW;
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_USR }}
          password: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_PSW }}
      - name: Download Release Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ inputs.releaseVersion }}
      - name: Build Tasklist Docker Image
        uses: ./.github/actions/build-platform-docker
        id: build-tasklist-docker
        with:
          repository: ${{ env.LOCAL_DOCKER_IMAGE }}
          version: ${{ inputs.releaseVersion }}
          revision: ${{ needs.release.outputs.releaseTagRevision }}
          # pushes to local registry for verification prior pushing to remote
          push: true
          distball: camunda-zeebe-${{ inputs.releaseVersion }}.tar.gz
          platforms: ${{ env.PLATFORMS }}
          dockerfile: tasklist.Dockerfile
      - name: Verify Tasklist Docker image
        uses: ./.github/actions/verify-platform-docker
        with:
          imageName: ${{ env.LOCAL_DOCKER_IMAGE }}
          date: ${{ steps.build-tasklist-docker.outputs.date }}
          revision: ${{ needs.release.outputs.releaseTagRevision }}
          version: ${{ inputs.releaseVersion }}
          platforms: ${{ env.PLATFORMS }}
          dockerfile: tasklist.Dockerfile
          goldenfile: tasklist-docker-labels.golden.json
      - name: Sync Tasklist Docker Image to DockerHub
        id: push-docker
        if: ${{ !inputs.dryRun && !inputs.releaseProcessDryRun }}
        # see https://docs.docker.com/build/ci/github-actions/examples/#copy-images-between-registries
        run: |
          docker buildx imagetools create \
            --tag ${{ env.DOCKER_IMAGE }}:${{ env.RELEASE_VERSION }} \
            ${{ inputs.isLatest && format('--tag {0}:latest', env.DOCKER_IMAGE) || '' }} \
            ${{ steps.build-tasklist-docker.outputs.image }}
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  camunda-docker:
    needs: release
    name: Camunda Docker Image Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      # Local registry is used as multi arch images cannot be loaded locally but only pushed to a
      # registry. As we want to verify the images first before pushing them to dockerhub though,
      # a local registry is used and if verification passes images are pushed to the remote registry.
      registry:
        image: registry:3
        ports:
          - 5000:5000
    env:
      PLATFORMS: "linux/amd64,linux/arm64"
      LOCAL_DOCKER_IMAGE: localhost:5000/camunda/camunda
      DOCKER_IMAGE: camunda/camunda
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_BRANCH }}
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v3.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/camunda/ci/github-actions REGISTRY_HUB_DOCKER_COM_USR;
            secret/data/products/camunda/ci/github-actions REGISTRY_HUB_DOCKER_COM_PSW;
            secret/data/products/camunda/ci/github-actions REGISTRY_MINIMUS_PSW | minimus-token
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_USR }}
          password: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_PSW }}
      - name: Logs on to Minimus
        uses: docker/login-action@v3
        with:
          registry: reg.mini.dev
          username: minimus
          password: ${{ steps.secrets.outputs.minimus-token }}
      - name: Download Release Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ inputs.releaseVersion }}
      - name: Build Camunda Docker Image
        uses: ./.github/actions/build-platform-docker
        id: build-camunda-docker
        with:
          repository: ${{ env.LOCAL_DOCKER_IMAGE }}
          version: ${{ inputs.releaseVersion }}
          revision: ${{ needs.release.outputs.releaseTagRevision }}
          # pushes to local registry for verification prior pushing to remote
          push: true
          distball: camunda-zeebe-${{ inputs.releaseVersion }}.tar.gz
          platforms: ${{ env.PLATFORMS }}
          dockerfile: camunda.Dockerfile
      - name: Verify Camunda Docker image
        uses: ./.github/actions/verify-platform-docker
        with:
          imageName: ${{ env.LOCAL_DOCKER_IMAGE }}
          date: ${{ steps.build-camunda-docker.outputs.date }}
          revision: ${{ needs.release.outputs.releaseTagRevision }}
          version: ${{ inputs.releaseVersion }}
          platforms: ${{ env.PLATFORMS }}
          dockerfile: camunda.Dockerfile
          goldenfile: camunda-docker-labels.golden.json
      - name: Sync Camunda Docker Image to DockerHub
        id: push-docker
        if: ${{ !inputs.dryRun && !inputs.releaseProcessDryRun }}
        # see https://docs.docker.com/build/ci/github-actions/examples/#copy-images-between-registries
        run: |
          docker buildx imagetools create \
            --tag ${{ env.DOCKER_IMAGE }}:${{ env.RELEASE_VERSION }} \
            ${{ inputs.isLatest && format('--tag {0}:latest', env.DOCKER_IMAGE) || '' }} \
            ${{ steps.build-camunda-docker.outputs.image }}
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  # Snyk security monitoring job performs vulnerability scanning on Docker images and source code.
  # Only runs for stable releases (not alpha, rc, SNAPSHOT).
  # Flags impact:
  # - With dryRun=true: Runs security tests instead of monitoring (no data sent to Snyk dashboard)
  # - With releaseProcessDryRun=true: Runs security tests instead of monitoring (E2E testing mode)
  # - When either flag is active: Builds Docker images locally since they won't be pushed to registry
  # Uses concurrency control to prevent multiple Snyk jobs from running simultaneously for the same version
  snyk:
    name: Snyk Monitor
    needs: [ zeebe-docker, release ]
    # skip if the version contains a dash as a quick test for -alpha, -rc, -SNAPSHOT, etc.
    if: ${{ !contains(inputs.releaseVersion, '-') }}
    concurrency:
      group: release-snyk-${{ inputs.releaseVersion }}
      cancel-in-progress: false
    uses: ./.github/workflows/zeebe-snyk.yml
    with:
      # Can't reference env.RELEASE_BRANCH directly due to https://github.com/actions/runner/issues/2372
      ref: ${{ needs.release.outputs.releaseBranch }}
      version: ${{ inputs.releaseVersion }}
      useMinorVersion: true
      # test instead of monitor during dry-runs
      monitor: ${{ !inputs.dryRun && !inputs.releaseProcessDryRun }}
      # the docker image will not be pushed during a dry-run, so we need to build it locally
      build: ${{ inputs.dryRun || inputs.releaseProcessDryRun }}
      dockerImage: ${{ (inputs.dryRun || inputs.releaseProcessDryRun) && '' || format('camunda/zeebe:{0}', inputs.releaseVersion) }}
    secrets: inherit

  # This job waits for the existing FOSSA scan (triggered by check-licenses.yml on tag push)
  # then creates releases and generates attribution/SBOM reports for single-app only
  # Skipped for:
  # - Dry runs (dryRun=true or releaseProcessDryRun=true)
  # - Non-stable versions (containing '-' like SNAPSHOT, alpha, rc)
  fossa-release:
    name: Create FOSSA releases and generate attribution/SBOM reports
    runs-on: ubuntu-latest
    needs: [release, github, zeebe-docker, operate-docker, tasklist-docker, camunda-docker, snyk]
    if: ${{ !inputs.dryRun && !inputs.releaseProcessDryRun && !contains(inputs.releaseVersion, '-') }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_BRANCH }}
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v3.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false
          secrets: |
            secret/data/products/camunda/ci/camunda FOSSA_API_KEY;
      - name: Get FOSSA context
        id: fossa-context
        uses: camunda/infra-global-github-actions/fossa/info@ec4caca36050ad1b7fee536facf95bc02515ddc6
      - name: Wait for FOSSA scan completion
        uses: camunda/infra-global-github-actions/fossa/wait-for-scan@infra-gh-854-publish-sboms
        with:
          fossa-api-key: ${{ steps.secrets.outputs.FOSSA_API_KEY }}
          branch: ${{ steps.fossa-context.outputs.head-ref }}
          project-id: "custom+50756/camunda/camunda@single-app"
          revision-id: ${{ steps.fossa-context.outputs.head-revision }}
      - name: Create FOSSA releases and generate reports
        uses: camunda/infra-global-github-actions/fossa/release@infra-gh-854-publish-sboms
        with:
          fossa-api-key: ${{ steps.secrets.outputs.FOSSA_API_KEY }}
          branch: ${{ steps.info.outputs.head-ref }}
          project-id: "custom+50756/camunda/camunda@single-app"
          attribution-release-group-id: "4904" # https://app.fossa.com/projects/group/4904
          sbom-release-group-id: "4905"        # https://app.fossa.com/projects/group/4905
          release-number: ${{ env.RELEASE_VERSION }}
          revision-id: ${{ steps.fossa-context.outputs.head-revision }}
          attribution-format: "TXT"
          sbom-format: "CYCLONEDX_JSON"
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  # Slack notification jobs send release status updates to the team's Slack channel.
  # Both jobs are conditional and only run for actual releases (not dry runs or E2E testing).
  # Flags impact:
  # - With dryRun=true: Skips sending notifications to reduce noise during manual testing
  # - With releaseProcessDryRun=true: Skips sending notifications to avoid false alerts during E2E testing
  # - Only sends notifications for real releases to keep the team informed of production deployments
  # The success job runs when all release jobs complete successfully, the failure job runs when any job fails
  notify-on-success:
    name: Send Slack notification on success
    runs-on: ubuntu-latest
    needs: [release, github, zeebe-docker, operate-docker, tasklist-docker, camunda-docker, snyk, fossa-release]
    # if it's a dry run => no slack notification (remove noise in slack due to manual testing)
    # else => send slack notification as an actual release succeeded
    if: ${{ always() && (
      needs.release.result == 'success' &&
      needs.github.result == 'success' &&
      needs.zeebe-docker.result == 'success' &&
      needs.operate-docker.result == 'success' &&
      needs.tasklist-docker.result == 'success' &&
      needs.camunda-docker.result == 'success' &&
      (needs.snyk.result == 'success' || needs.snyk.result == 'skipped') &&
      (needs.fossa-release.result == 'success' || needs.fossa-release.result == 'skipped')
      ) && !inputs.dryRun && !inputs.releaseProcessDryRun }}
    timeout-minutes: 5
    permissions: {}  # GITHUB_TOKEN unused in this job
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@4c06c5ccf5c0761b6029f56cfb1dcf5565918a3b # v3.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false # we rely on step outputs, no need for environment variables
          secrets: |
            secret/data/products/camunda/ci/github-actions SLACK_TOPMONOREPORELEASE_WEBHOOK_URL;

      - name: Send success Slack notification
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1
        with:
          webhook: ${{ steps.secrets.outputs.SLACK_TOPMONOREPORELEASE_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          # For posting a rich message using Block Kit
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":success: *Release job for ${{ inputs.releaseVersion }}* succeeded! (excluding Maven Central publishing - this is done separately)\n"
                  }
                }
              ]
            }

  notify-if-failed:
    name: Send Slack notification on failure
    runs-on: ubuntu-latest
    needs: [release, github, zeebe-docker, operate-docker, tasklist-docker, camunda-docker, snyk, fossa-release]
    # if it's a dry run => no slack notification (remove noise in slack due to manual testing)
    # else => send slack notification as an actual release failed
    if: ${{ always() && (
        needs.release.result == 'failure' ||
        needs.github.result == 'failure' ||
        needs.zeebe-docker.result == 'failure' ||
        needs.operate-docker.result == 'failure' ||
        needs.tasklist-docker.result == 'failure' ||
        needs.camunda-docker.result == 'failure' ||
        needs.snyk.result == 'failure' ||
        needs.fossa-release.result == 'failure'
        ) && !inputs.dryRun && !inputs.releaseProcessDryRun }}
    timeout-minutes: 5
    permissions: {}  # GITHUB_TOKEN unused in this job
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@4c06c5ccf5c0761b6029f56cfb1dcf5565918a3b # v3.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false # we rely on step outputs, no need for environment variables
          secrets: |
            secret/data/products/camunda/ci/github-actions SLACK_TOPMONOREPORELEASE_WEBHOOK_URL;

      - name: Send failure Slack notification
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1
        with:
          webhook: ${{ steps.secrets.outputs.SLACK_TOPMONOREPORELEASE_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          # For posting a rich message using Block Kit
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":alarm: *Release job for ${{ inputs.releaseVersion }}* **failed!**\n"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please check this <https://github.com/camunda/camunda/actions/runs/${{ github.run_id }}|GHA workflow run>."
                  }
                }
              ]
            }


