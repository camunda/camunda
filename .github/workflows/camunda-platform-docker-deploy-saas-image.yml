---
name: Deploy Camunda Docker Images to SaaS registry

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy an image for'
        required: true
        type: string
      camunda-image-only:
        description: 'Whether to build the camunda/camunda image only'
        required: false
        default: false
        type: boolean

defaults:
  run:
    # use bash shell by default to ensure pipefail behavior is the default
    # see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
    shell: bash

env:
  DOCKER_PLATFORMS: "linux/amd64"

jobs:
  deploy-camunda-docker-saas:
    name: Deploy Camunda Docker image
    runs-on: gcp-perf-core-8-default
    timeout-minutes: 20
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0
      - name: Authenticate for saas image registry
        id: auth-saas
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/618877442292/locations/global/workloadIdentityPools/github/providers/camunda'
          service_account: 'github-actions-zeebe-io@camunda-saas-registry.iam.gserviceaccount.com'
      - name: Login to SaaS image registry
        uses: docker/login-action@v3
        with:
          registry: europe-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth-saas.outputs.access_token }}
      - name: Setup BuildKit
        uses: docker/setup-buildx-action@v3
      - uses: ./.github/actions/setup-build
        with:
          dockerhub-readonly: true
          vault-address: ${{ secrets.VAULT_ADDR }}
          vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}
      - id: image-tag
        name: Calculate image tag
        shell: bash
        run: |
          # Replace dots and slashes with dashes
          branch=${BRANCH/[\/\.]/-}
          version=$(./mvnw help:evaluate -q -DforceStdout -D"expression=project.version")
          echo "image-tag=$version-$branch" >> $GITHUB_OUTPUT
        env:
          BRANCH: ${{ inputs.branch }}
      - name: Maven Build
        shell: bash
        id: build-camunda
        run: |
          ./mvnw -B -T1C -DskipTests -DskipChecks -Dflatten.skip=true -Dskip.fe.build=false package
          export ARTIFACT=$(./mvnw -pl dist/ help:evaluate -Dexpression=project.build.finalName -q -DforceStdout)
          echo "distball=dist/target/${ARTIFACT}.tar.gz" >> $GITHUB_OUTPUT
          echo "distzip=dist/target/${ARTIFACT}.zip" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/build-platform-docker
        id: build-push-camunda-docker
        name: Build & Push zeebe-io/camunda
        with:
          repository: europe-docker.pkg.dev/camunda-saas-registry/zeebe-io/camunda
          version: ${{ steps.image-tag.outputs.image-tag }}
          distball: ${{ steps.build-camunda.outputs.distball }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          dockerfile: camunda.Dockerfile
          push: true
      - uses: ./.github/actions/build-platform-docker
        id: build-push-zeebe-docker
        name: Build & Push zeebe-io/zeebe
        if: ${{ inputs.camunda-image-only == 'false' }}
        with:
          repository: europe-docker.pkg.dev/camunda-saas-registry/zeebe-io/zeebe
          version: ${{ steps.image-tag.outputs.image-tag }}
          distball: ${{ steps.build-camunda.outputs.distball }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          dockerfile: Dockerfile
          push: true
      - uses: ./.github/actions/build-platform-docker
        id: build-push-operate-docker
        name: Build & Push zeebe-io/operate
        if: ${{ inputs.camunda-image-only == 'false' }}
        with:
          repository: europe-docker.pkg.dev/camunda-saas-registry/zeebe-io/operate
          version: ${{ steps.image-tag.outputs.image-tag }}
          distball: ${{ steps.build-camunda.outputs.distball }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          dockerfile: operate.Dockerfile
          push: true
      - uses: ./.github/actions/build-platform-docker
        id: build-push-tasklist-docker
        name: Build & Push zeebe-io/tasklist
        if: ${{ inputs.camunda-image-only == 'false' }}
        with:
          repository: europe-docker.pkg.dev/camunda-saas-registry/zeebe-io/tasklist
          version: ${{ steps.image-tag.outputs.image-tag }}
          distball: ${{ steps.build-camunda.outputs.distball }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          dockerfile: tasklist.Dockerfile
          push: true
      - uses: ./.github/actions/build-platform-docker
        id: build-push-optimize-docker
        name: Build & Push zeebe-io/optimize
        if: ${{ inputs.camunda-image-only == 'false' }}
        with:
          repository: europe-docker.pkg.dev/camunda-saas-registry/zeebe-io/optimize
          version: ${{ steps.image-tag.outputs.image-tag }}
          distball: ${{ steps.build-camunda.outputs.distball }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          dockerfile: optimize.Dockerfile
          push: true
