[
  {
    "extension": "revapi.filter",
    "id": "filter",
    "configuration": {
      "archives": {
        "justification": "Ignore everything not included in the module itself",
        "include": [
          "io\\.camunda:camunda-client-java:.*"
        ]
      },
      "elements": {
        "exclude": [
          {
            "justification": "The implementation package is not meant to be used directly, and as such does not need to maintain any backwards compatibility guarantees.",
            "matcher": "java-package",
            "match": "/io\\.camunda\\.client\\.impl(\\..*)?/"
          },
          {
            "justification": "The implementation package is not meant to be used directly, and as such does not need to maintain any backwards compatibility guarantees.",
            "matcher": "java-package",
            "match": "/io\\.camunda\\.zeebe\\.client\\.impl(\\..*)?/"
          },
          {
            "justification": "Ignore REST protocol class changes, there were significant ones due to breaking changes to the search API as well as experimental APIs.",
            "matcher": "java-package",
            "match": "/io\\.camunda\\.client\\.protocol\\.rest(\\..*)?/"
          }
        ]
      }
    }
  },
  {
    "extension": "revapi.differences",
    "id": "differences",
    "configuration": {
      "differences": [
        {
          "justification": "Ignore new methods on all types, as these are not meant to be implemented but simply consumed; as such, new methods are perfectly fine to add",
          "code": "java.method.addedToInterface"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "annotationType": "io.camunda.client.api.ExperimentalApi",
          "justification": "The ExperimentalApi annotation is used to mark methods as 'in-development'. It is okay to remove it after a feature is implemented"
        },
        {
          "ignore": true,
          "code": "java.annotation.attributeValueChanged",
          "annotationType": "io.camunda.client.api.ExperimentalApi",
          "justification": "The ExperimentalApi annotation is used to mark methods as 'in-development'. It is okay to change value field"
        },
        {
          "ignore": true,
          "code": "java.field.removed",
          "old": "field io.camunda.client.api.search.response.DecisionDefinitionType.UNSPECIFIED",
          "justification": "Removed impossible state that was never returned by the system - decision definitions are always either DECISION_TABLE or LITERAL_EXPRESSION"
        },
        {
          "ignore": true,
          "code": "java.field.removed",
          "old": "field io.camunda.client.api.search.response.DecisionInstanceState.UNKNOWN",
          "justification": "Removed impossible state - decision instances can only be EVALUATED or FAILED, never UNKNOWN"
        },
        {
          "ignore": true,
          "code": "java.field.removed",
          "old": "field io.camunda.client.api.search.response.DecisionInstanceState.UNSPECIFIED",
          "justification": "Removed impossible state - decision instances can only be EVALUATED or FAILED, never UNSPECIFIED"
        },
        {
          "ignore": true,
          "code": "java.field.removed",
          "old": "field io.camunda.client.protocol.rest.DecisionDefinitionTypeEnum.UNSPECIFIED",
          "justification": "Removed impossible state from REST protocol enum - aligned with API response enum cleanup"
        },
        {
          "ignore": true,
          "code": "java.field.removed",
          "old": "field io.camunda.client.protocol.rest.DecisionInstanceStateEnum.UNKNOWN",
          "justification": "Removed impossible state from REST protocol enum - aligned with API response enum cleanup"
        },
        {
          "ignore": true,
          "code": "java.field.removed",
          "old": "field io.camunda.client.protocol.rest.DecisionInstanceStateEnum.UNSPECIFIED",
          "justification": "Removed impossible state from REST protocol enum - aligned with API response enum cleanup"
        }
      ]
    }
  }
]
