/*
 * Orchestration Cluster REST API
 * API for communicating with a Camunda 8 cluster.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.camunda.client.protocol.rest;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.camunda.client.protocol.rest.BrokerInfo;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The response of a topology request.
 */
@JsonPropertyOrder({
  TopologyResponse.JSON_PROPERTY_BROKERS,
  TopologyResponse.JSON_PROPERTY_CLUSTER_SIZE,
  TopologyResponse.JSON_PROPERTY_PARTITIONS_COUNT,
  TopologyResponse.JSON_PROPERTY_REPLICATION_FACTOR,
  TopologyResponse.JSON_PROPERTY_GATEWAY_VERSION,
  TopologyResponse.JSON_PROPERTY_LAST_COMPLETED_CHANGE_ID
})
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-24T12:02:12.602366536Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class TopologyResponse {
  public static final String JSON_PROPERTY_BROKERS = "brokers";
  @javax.annotation.Nullable
  private List<BrokerInfo> brokers;

  public static final String JSON_PROPERTY_CLUSTER_SIZE = "clusterSize";
  @javax.annotation.Nullable
  private Integer clusterSize;

  public static final String JSON_PROPERTY_PARTITIONS_COUNT = "partitionsCount";
  @javax.annotation.Nullable
  private Integer partitionsCount;

  public static final String JSON_PROPERTY_REPLICATION_FACTOR = "replicationFactor";
  @javax.annotation.Nullable
  private Integer replicationFactor;

  public static final String JSON_PROPERTY_GATEWAY_VERSION = "gatewayVersion";
  @javax.annotation.Nullable
  private String gatewayVersion;

  public static final String JSON_PROPERTY_LAST_COMPLETED_CHANGE_ID = "lastCompletedChangeId";
  @javax.annotation.Nullable
  private String lastCompletedChangeId;

  public TopologyResponse() {
  }

  public TopologyResponse brokers(@javax.annotation.Nullable List<BrokerInfo> brokers) {
    
    this.brokers = brokers;
    return this;
  }

  public TopologyResponse addBrokersItem(BrokerInfo brokersItem) {
    if (this.brokers == null) {
      this.brokers = new ArrayList<>();
    }
    this.brokers.add(brokersItem);
    return this;
  }

  /**
   * A list of brokers that are part of this cluster.
   * @return brokers
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BROKERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<BrokerInfo> getBrokers() {
    return brokers;
  }


  @JsonProperty(JSON_PROPERTY_BROKERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBrokers(@javax.annotation.Nullable List<BrokerInfo> brokers) {
    this.brokers = brokers;
  }

  public TopologyResponse clusterSize(@javax.annotation.Nullable Integer clusterSize) {
    
    this.clusterSize = clusterSize;
    return this;
  }

  /**
   * The number of brokers in the cluster.
   * @return clusterSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLUSTER_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getClusterSize() {
    return clusterSize;
  }


  @JsonProperty(JSON_PROPERTY_CLUSTER_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClusterSize(@javax.annotation.Nullable Integer clusterSize) {
    this.clusterSize = clusterSize;
  }

  public TopologyResponse partitionsCount(@javax.annotation.Nullable Integer partitionsCount) {
    
    this.partitionsCount = partitionsCount;
    return this;
  }

  /**
   * The number of partitions are spread across the cluster.
   * @return partitionsCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARTITIONS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPartitionsCount() {
    return partitionsCount;
  }


  @JsonProperty(JSON_PROPERTY_PARTITIONS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPartitionsCount(@javax.annotation.Nullable Integer partitionsCount) {
    this.partitionsCount = partitionsCount;
  }

  public TopologyResponse replicationFactor(@javax.annotation.Nullable Integer replicationFactor) {
    
    this.replicationFactor = replicationFactor;
    return this;
  }

  /**
   * The configured replication factor for this cluster.
   * @return replicationFactor
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPLICATION_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getReplicationFactor() {
    return replicationFactor;
  }


  @JsonProperty(JSON_PROPERTY_REPLICATION_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReplicationFactor(@javax.annotation.Nullable Integer replicationFactor) {
    this.replicationFactor = replicationFactor;
  }

  public TopologyResponse gatewayVersion(@javax.annotation.Nullable String gatewayVersion) {
    
    this.gatewayVersion = gatewayVersion;
    return this;
  }

  /**
   * The version of the Zeebe Gateway.
   * @return gatewayVersion
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GATEWAY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGatewayVersion() {
    return gatewayVersion;
  }


  @JsonProperty(JSON_PROPERTY_GATEWAY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGatewayVersion(@javax.annotation.Nullable String gatewayVersion) {
    this.gatewayVersion = gatewayVersion;
  }

  public TopologyResponse lastCompletedChangeId(@javax.annotation.Nullable String lastCompletedChangeId) {
    
    this.lastCompletedChangeId = lastCompletedChangeId;
    return this;
  }

  /**
   * ID of the last completed change
   * @return lastCompletedChangeId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_COMPLETED_CHANGE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLastCompletedChangeId() {
    return lastCompletedChangeId;
  }


  @JsonProperty(JSON_PROPERTY_LAST_COMPLETED_CHANGE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastCompletedChangeId(@javax.annotation.Nullable String lastCompletedChangeId) {
    this.lastCompletedChangeId = lastCompletedChangeId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopologyResponse topologyResponse = (TopologyResponse) o;
    return Objects.equals(this.brokers, topologyResponse.brokers) &&
        Objects.equals(this.clusterSize, topologyResponse.clusterSize) &&
        Objects.equals(this.partitionsCount, topologyResponse.partitionsCount) &&
        Objects.equals(this.replicationFactor, topologyResponse.replicationFactor) &&
        Objects.equals(this.gatewayVersion, topologyResponse.gatewayVersion) &&
        Objects.equals(this.lastCompletedChangeId, topologyResponse.lastCompletedChangeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brokers, clusterSize, partitionsCount, replicationFactor, gatewayVersion, lastCompletedChangeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopologyResponse {\n");
    sb.append("    brokers: ").append(toIndentedString(brokers)).append("\n");
    sb.append("    clusterSize: ").append(toIndentedString(clusterSize)).append("\n");
    sb.append("    partitionsCount: ").append(toIndentedString(partitionsCount)).append("\n");
    sb.append("    replicationFactor: ").append(toIndentedString(replicationFactor)).append("\n");
    sb.append("    gatewayVersion: ").append(toIndentedString(gatewayVersion)).append("\n");
    sb.append("    lastCompletedChangeId: ").append(toIndentedString(lastCompletedChangeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `brokers` to the URL query string
    if (getBrokers() != null) {
      for (int i = 0; i < getBrokers().size(); i++) {
        if (getBrokers().get(i) != null) {
          joiner.add(getBrokers().get(i).toUrlQueryString(String.format("%sbrokers%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `clusterSize` to the URL query string
    if (getClusterSize() != null) {
      try {
        joiner.add(String.format("%sclusterSize%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClusterSize()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `partitionsCount` to the URL query string
    if (getPartitionsCount() != null) {
      try {
        joiner.add(String.format("%spartitionsCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPartitionsCount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `replicationFactor` to the URL query string
    if (getReplicationFactor() != null) {
      try {
        joiner.add(String.format("%sreplicationFactor%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReplicationFactor()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `gatewayVersion` to the URL query string
    if (getGatewayVersion() != null) {
      try {
        joiner.add(String.format("%sgatewayVersion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGatewayVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `lastCompletedChangeId` to the URL query string
    if (getLastCompletedChangeId() != null) {
      try {
        joiner.add(String.format("%slastCompletedChangeId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLastCompletedChangeId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

