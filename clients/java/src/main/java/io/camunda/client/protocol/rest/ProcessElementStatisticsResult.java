/*
 * Orchestration Cluster REST API
 * API for communicating with a Camunda 8 cluster.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.camunda.client.protocol.rest;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Process element statistics response.
 */
@JsonPropertyOrder({
  ProcessElementStatisticsResult.JSON_PROPERTY_ELEMENT_ID,
  ProcessElementStatisticsResult.JSON_PROPERTY_ACTIVE,
  ProcessElementStatisticsResult.JSON_PROPERTY_CANCELED,
  ProcessElementStatisticsResult.JSON_PROPERTY_INCIDENTS,
  ProcessElementStatisticsResult.JSON_PROPERTY_COMPLETED
})
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-24T12:02:12.602366536Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class ProcessElementStatisticsResult {
  public static final String JSON_PROPERTY_ELEMENT_ID = "elementId";
  @javax.annotation.Nullable
  private String elementId;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  @javax.annotation.Nullable
  private Long active;

  public static final String JSON_PROPERTY_CANCELED = "canceled";
  @javax.annotation.Nullable
  private Long canceled;

  public static final String JSON_PROPERTY_INCIDENTS = "incidents";
  @javax.annotation.Nullable
  private Long incidents;

  public static final String JSON_PROPERTY_COMPLETED = "completed";
  @javax.annotation.Nullable
  private Long completed;

  public ProcessElementStatisticsResult() {
  }

  public ProcessElementStatisticsResult elementId(@javax.annotation.Nullable String elementId) {
    
    this.elementId = elementId;
    return this;
  }

  /**
   * The element ID for which the results are aggregated.
   * @return elementId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ELEMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getElementId() {
    return elementId;
  }


  @JsonProperty(JSON_PROPERTY_ELEMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setElementId(@javax.annotation.Nullable String elementId) {
    this.elementId = elementId;
  }

  public ProcessElementStatisticsResult active(@javax.annotation.Nullable Long active) {
    
    this.active = active;
    return this;
  }

  /**
   * The total number of active instances of the element.
   * @return active
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(@javax.annotation.Nullable Long active) {
    this.active = active;
  }

  public ProcessElementStatisticsResult canceled(@javax.annotation.Nullable Long canceled) {
    
    this.canceled = canceled;
    return this;
  }

  /**
   * The total number of canceled instances of the element.
   * @return canceled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CANCELED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getCanceled() {
    return canceled;
  }


  @JsonProperty(JSON_PROPERTY_CANCELED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanceled(@javax.annotation.Nullable Long canceled) {
    this.canceled = canceled;
  }

  public ProcessElementStatisticsResult incidents(@javax.annotation.Nullable Long incidents) {
    
    this.incidents = incidents;
    return this;
  }

  /**
   * The total number of incidents for the element.
   * @return incidents
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCIDENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getIncidents() {
    return incidents;
  }


  @JsonProperty(JSON_PROPERTY_INCIDENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncidents(@javax.annotation.Nullable Long incidents) {
    this.incidents = incidents;
  }

  public ProcessElementStatisticsResult completed(@javax.annotation.Nullable Long completed) {
    
    this.completed = completed;
    return this;
  }

  /**
   * The total number of completed instances of the element.
   * @return completed
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPLETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getCompleted() {
    return completed;
  }


  @JsonProperty(JSON_PROPERTY_COMPLETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompleted(@javax.annotation.Nullable Long completed) {
    this.completed = completed;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessElementStatisticsResult processElementStatisticsResult = (ProcessElementStatisticsResult) o;
    return Objects.equals(this.elementId, processElementStatisticsResult.elementId) &&
        Objects.equals(this.active, processElementStatisticsResult.active) &&
        Objects.equals(this.canceled, processElementStatisticsResult.canceled) &&
        Objects.equals(this.incidents, processElementStatisticsResult.incidents) &&
        Objects.equals(this.completed, processElementStatisticsResult.completed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(elementId, active, canceled, incidents, completed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessElementStatisticsResult {\n");
    sb.append("    elementId: ").append(toIndentedString(elementId)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    canceled: ").append(toIndentedString(canceled)).append("\n");
    sb.append("    incidents: ").append(toIndentedString(incidents)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `elementId` to the URL query string
    if (getElementId() != null) {
      try {
        joiner.add(String.format("%selementId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getElementId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `active` to the URL query string
    if (getActive() != null) {
      try {
        joiner.add(String.format("%sactive%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getActive()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `canceled` to the URL query string
    if (getCanceled() != null) {
      try {
        joiner.add(String.format("%scanceled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCanceled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `incidents` to the URL query string
    if (getIncidents() != null) {
      try {
        joiner.add(String.format("%sincidents%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIncidents()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `completed` to the URL query string
    if (getCompleted() != null) {
      try {
        joiner.add(String.format("%scompleted%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCompleted()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

