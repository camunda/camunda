/*
 * Orchestration Cluster REST API
 * API for communicating with a Camunda 8 cluster.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.camunda.client.protocol.rest;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.camunda.client.protocol.rest.JobFilter;
import io.camunda.client.protocol.rest.JobSearchQuerySortRequest;
import io.camunda.client.protocol.rest.SearchQueryPageRequest;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Job search request.
 */
@JsonPropertyOrder({
  JobSearchQuery.JSON_PROPERTY_SORT,
  JobSearchQuery.JSON_PROPERTY_FILTER,
  JobSearchQuery.JSON_PROPERTY_PAGE
})
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-24T12:02:12.602366536Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class JobSearchQuery {
  public static final String JSON_PROPERTY_SORT = "sort";
  @javax.annotation.Nullable
  private List<JobSearchQuerySortRequest> sort = new ArrayList<>();

  public static final String JSON_PROPERTY_FILTER = "filter";
  @javax.annotation.Nullable
  private JobFilter filter;

  public static final String JSON_PROPERTY_PAGE = "page";
  @javax.annotation.Nullable
  private SearchQueryPageRequest page;

  public JobSearchQuery() {
  }

  public JobSearchQuery sort(@javax.annotation.Nullable List<JobSearchQuerySortRequest> sort) {
    
    this.sort = sort;
    return this;
  }

  public JobSearchQuery addSortItem(JobSearchQuerySortRequest sortItem) {
    if (this.sort == null) {
      this.sort = new ArrayList<>();
    }
    this.sort.add(sortItem);
    return this;
  }

  /**
   * Sort field criteria.
   * @return sort
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<JobSearchQuerySortRequest> getSort() {
    return sort;
  }


  @JsonProperty(JSON_PROPERTY_SORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSort(@javax.annotation.Nullable List<JobSearchQuerySortRequest> sort) {
    this.sort = sort;
  }

  public JobSearchQuery filter(@javax.annotation.Nullable JobFilter filter) {
    
    this.filter = filter;
    return this;
  }

  /**
   * The job search filters.
   * @return filter
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JobFilter getFilter() {
    return filter;
  }


  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilter(@javax.annotation.Nullable JobFilter filter) {
    this.filter = filter;
  }

  public JobSearchQuery page(@javax.annotation.Nullable SearchQueryPageRequest page) {
    
    this.page = page;
    return this;
  }

  /**
   * Pagination criteria.
   * @return page
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SearchQueryPageRequest getPage() {
    return page;
  }


  @JsonProperty(JSON_PROPERTY_PAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPage(@javax.annotation.Nullable SearchQueryPageRequest page) {
    this.page = page;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobSearchQuery jobSearchQuery = (JobSearchQuery) o;
    return Objects.equals(this.sort, jobSearchQuery.sort) &&
        Objects.equals(this.filter, jobSearchQuery.filter) &&
        Objects.equals(this.page, jobSearchQuery.page);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sort, filter, page);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobSearchQuery {\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `page` to the URL query string
    if (getPage() != null) {
      joiner.add(getPage().toUrlQueryString(prefix + "page" + suffix));
    }

    return joiner.toString();
  }

}

