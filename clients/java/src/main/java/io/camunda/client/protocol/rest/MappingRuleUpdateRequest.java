/*
 * Orchestration Cluster REST API
 * API for communicating with a Camunda 8 cluster.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.camunda.client.protocol.rest;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * MappingRuleUpdateRequest
 */
@JsonPropertyOrder({
  MappingRuleUpdateRequest.JSON_PROPERTY_CLAIM_NAME,
  MappingRuleUpdateRequest.JSON_PROPERTY_CLAIM_VALUE,
  MappingRuleUpdateRequest.JSON_PROPERTY_NAME
})
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-24T12:02:12.602366536Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class MappingRuleUpdateRequest {
  public static final String JSON_PROPERTY_CLAIM_NAME = "claimName";
  @javax.annotation.Nonnull
  private String claimName;

  public static final String JSON_PROPERTY_CLAIM_VALUE = "claimValue";
  @javax.annotation.Nonnull
  private String claimValue;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nonnull
  private String name;

  public MappingRuleUpdateRequest() {
  }

  public MappingRuleUpdateRequest claimName(@javax.annotation.Nonnull String claimName) {
    
    this.claimName = claimName;
    return this;
  }

  /**
   * The name of the claim to map.
   * @return claimName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLAIM_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getClaimName() {
    return claimName;
  }


  @JsonProperty(JSON_PROPERTY_CLAIM_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClaimName(@javax.annotation.Nonnull String claimName) {
    this.claimName = claimName;
  }

  public MappingRuleUpdateRequest claimValue(@javax.annotation.Nonnull String claimValue) {
    
    this.claimValue = claimValue;
    return this;
  }

  /**
   * The value of the claim to map.
   * @return claimValue
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLAIM_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getClaimValue() {
    return claimValue;
  }


  @JsonProperty(JSON_PROPERTY_CLAIM_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClaimValue(@javax.annotation.Nonnull String claimValue) {
    this.claimValue = claimValue;
  }

  public MappingRuleUpdateRequest name(@javax.annotation.Nonnull String name) {
    
    this.name = name;
    return this;
  }

  /**
   * The name of the mapping.
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappingRuleUpdateRequest mappingRuleUpdateRequest = (MappingRuleUpdateRequest) o;
    return Objects.equals(this.claimName, mappingRuleUpdateRequest.claimName) &&
        Objects.equals(this.claimValue, mappingRuleUpdateRequest.claimValue) &&
        Objects.equals(this.name, mappingRuleUpdateRequest.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(claimName, claimValue, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappingRuleUpdateRequest {\n");
    sb.append("    claimName: ").append(toIndentedString(claimName)).append("\n");
    sb.append("    claimValue: ").append(toIndentedString(claimValue)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `claimName` to the URL query string
    if (getClaimName() != null) {
      try {
        joiner.add(String.format("%sclaimName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClaimName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `claimValue` to the URL query string
    if (getClaimValue() != null) {
      try {
        joiner.add(String.format("%sclaimValue%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClaimValue()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

