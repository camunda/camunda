/*
 * Orchestration Cluster REST API
 * API for communicating with a Camunda 8 cluster.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.camunda.client.protocol.rest;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.camunda.client.protocol.rest.CamundaUserResultC8LinksInner;
import io.camunda.client.protocol.rest.CamundaUserResultTenantsInner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * CamundaUserResult
 */
@JsonPropertyOrder({
  CamundaUserResult.JSON_PROPERTY_USER_ID,
  CamundaUserResult.JSON_PROPERTY_DISPLAY_NAME,
  CamundaUserResult.JSON_PROPERTY_AUTHORIZED_APPLICATIONS,
  CamundaUserResult.JSON_PROPERTY_TENANTS,
  CamundaUserResult.JSON_PROPERTY_GROUPS,
  CamundaUserResult.JSON_PROPERTY_ROLES,
  CamundaUserResult.JSON_PROPERTY_SALES_PLAN_TYPE,
  CamundaUserResult.JSON_PROPERTY_C8_LINKS,
  CamundaUserResult.JSON_PROPERTY_CAN_LOGOUT,
  CamundaUserResult.JSON_PROPERTY_API_USER,
  CamundaUserResult.JSON_PROPERTY_USER_KEY
})
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-24T12:02:12.602366536Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class CamundaUserResult {
  public static final String JSON_PROPERTY_USER_ID = "userId";
  @javax.annotation.Nullable
  private String userId;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  @javax.annotation.Nullable
  private String displayName;

  public static final String JSON_PROPERTY_AUTHORIZED_APPLICATIONS = "authorizedApplications";
  @javax.annotation.Nullable
  private List<String> authorizedApplications = new ArrayList<>();

  public static final String JSON_PROPERTY_TENANTS = "tenants";
  @javax.annotation.Nullable
  private List<CamundaUserResultTenantsInner> tenants = new ArrayList<>();

  public static final String JSON_PROPERTY_GROUPS = "groups";
  @javax.annotation.Nullable
  private List<String> groups = new ArrayList<>();

  public static final String JSON_PROPERTY_ROLES = "roles";
  @javax.annotation.Nullable
  private List<String> roles = new ArrayList<>();

  public static final String JSON_PROPERTY_SALES_PLAN_TYPE = "salesPlanType";
  @javax.annotation.Nullable
  private String salesPlanType;

  public static final String JSON_PROPERTY_C8_LINKS = "c8Links";
  @javax.annotation.Nullable
  private List<CamundaUserResultC8LinksInner> c8Links = new ArrayList<>();

  public static final String JSON_PROPERTY_CAN_LOGOUT = "canLogout";
  @javax.annotation.Nullable
  private Boolean canLogout;

  public static final String JSON_PROPERTY_API_USER = "apiUser";
  @javax.annotation.Nullable
  private Boolean apiUser;

  public static final String JSON_PROPERTY_USER_KEY = "userKey";
  @javax.annotation.Nullable
  private String userKey;

  public CamundaUserResult() {
  }

  public CamundaUserResult userId(@javax.annotation.Nullable String userId) {
    
    this.userId = userId;
    return this;
  }

  /**
   * The ID of the user.
   * @return userId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
  }

  public CamundaUserResult displayName(@javax.annotation.Nullable String displayName) {
    
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the user.
   * @return displayName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }

  public CamundaUserResult authorizedApplications(@javax.annotation.Nullable List<String> authorizedApplications) {
    
    this.authorizedApplications = authorizedApplications;
    return this;
  }

  public CamundaUserResult addAuthorizedApplicationsItem(String authorizedApplicationsItem) {
    if (this.authorizedApplications == null) {
      this.authorizedApplications = new ArrayList<>();
    }
    this.authorizedApplications.add(authorizedApplicationsItem);
    return this;
  }

  /**
   * The applications the user is authorized to use.
   * @return authorizedApplications
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHORIZED_APPLICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAuthorizedApplications() {
    return authorizedApplications;
  }


  @JsonProperty(JSON_PROPERTY_AUTHORIZED_APPLICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthorizedApplications(@javax.annotation.Nullable List<String> authorizedApplications) {
    this.authorizedApplications = authorizedApplications;
  }

  public CamundaUserResult tenants(@javax.annotation.Nullable List<CamundaUserResultTenantsInner> tenants) {
    
    this.tenants = tenants;
    return this;
  }

  public CamundaUserResult addTenantsItem(CamundaUserResultTenantsInner tenantsItem) {
    if (this.tenants == null) {
      this.tenants = new ArrayList<>();
    }
    this.tenants.add(tenantsItem);
    return this;
  }

  /**
   * The tenants the user is a member of.
   * @return tenants
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TENANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CamundaUserResultTenantsInner> getTenants() {
    return tenants;
  }


  @JsonProperty(JSON_PROPERTY_TENANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTenants(@javax.annotation.Nullable List<CamundaUserResultTenantsInner> tenants) {
    this.tenants = tenants;
  }

  public CamundaUserResult groups(@javax.annotation.Nullable List<String> groups) {
    
    this.groups = groups;
    return this;
  }

  public CamundaUserResult addGroupsItem(String groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * The groups assigned to the user.
   * @return groups
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getGroups() {
    return groups;
  }


  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroups(@javax.annotation.Nullable List<String> groups) {
    this.groups = groups;
  }

  public CamundaUserResult roles(@javax.annotation.Nullable List<String> roles) {
    
    this.roles = roles;
    return this;
  }

  public CamundaUserResult addRolesItem(String rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * The roles assigned to the user.
   * @return roles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getRoles() {
    return roles;
  }


  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoles(@javax.annotation.Nullable List<String> roles) {
    this.roles = roles;
  }

  public CamundaUserResult salesPlanType(@javax.annotation.Nullable String salesPlanType) {
    
    this.salesPlanType = salesPlanType;
    return this;
  }

  /**
   * The plan of the user.
   * @return salesPlanType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SALES_PLAN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSalesPlanType() {
    return salesPlanType;
  }


  @JsonProperty(JSON_PROPERTY_SALES_PLAN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSalesPlanType(@javax.annotation.Nullable String salesPlanType) {
    this.salesPlanType = salesPlanType;
  }

  public CamundaUserResult c8Links(@javax.annotation.Nullable List<CamundaUserResultC8LinksInner> c8Links) {
    
    this.c8Links = c8Links;
    return this;
  }

  public CamundaUserResult addC8LinksItem(CamundaUserResultC8LinksInner c8LinksItem) {
    if (this.c8Links == null) {
      this.c8Links = new ArrayList<>();
    }
    this.c8Links.add(c8LinksItem);
    return this;
  }

  /**
   * The links to the components in the C8 stack.
   * @return c8Links
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_C8_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CamundaUserResultC8LinksInner> getC8Links() {
    return c8Links;
  }


  @JsonProperty(JSON_PROPERTY_C8_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setC8Links(@javax.annotation.Nullable List<CamundaUserResultC8LinksInner> c8Links) {
    this.c8Links = c8Links;
  }

  public CamundaUserResult canLogout(@javax.annotation.Nullable Boolean canLogout) {
    
    this.canLogout = canLogout;
    return this;
  }

  /**
   * Flag for understanding if the user is able to perform logout.
   * @return canLogout
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_LOGOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanLogout() {
    return canLogout;
  }


  @JsonProperty(JSON_PROPERTY_CAN_LOGOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanLogout(@javax.annotation.Nullable Boolean canLogout) {
    this.canLogout = canLogout;
  }

  public CamundaUserResult apiUser(@javax.annotation.Nullable Boolean apiUser) {
    
    this.apiUser = apiUser;
    return this;
  }

  /**
   * Flag for understanding if the user is an API user.
   * @return apiUser
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_API_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getApiUser() {
    return apiUser;
  }


  @JsonProperty(JSON_PROPERTY_API_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApiUser(@javax.annotation.Nullable Boolean apiUser) {
    this.apiUser = apiUser;
  }

  public CamundaUserResult userKey(@javax.annotation.Nullable String userKey) {
    
    this.userKey = userKey;
    return this;
  }

  /**
   * The system generated key of the user.
   * @return userKey
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserKey() {
    return userKey;
  }


  @JsonProperty(JSON_PROPERTY_USER_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserKey(@javax.annotation.Nullable String userKey) {
    this.userKey = userKey;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CamundaUserResult camundaUserResult = (CamundaUserResult) o;
    return Objects.equals(this.userId, camundaUserResult.userId) &&
        Objects.equals(this.displayName, camundaUserResult.displayName) &&
        Objects.equals(this.authorizedApplications, camundaUserResult.authorizedApplications) &&
        Objects.equals(this.tenants, camundaUserResult.tenants) &&
        Objects.equals(this.groups, camundaUserResult.groups) &&
        Objects.equals(this.roles, camundaUserResult.roles) &&
        Objects.equals(this.salesPlanType, camundaUserResult.salesPlanType) &&
        Objects.equals(this.c8Links, camundaUserResult.c8Links) &&
        Objects.equals(this.canLogout, camundaUserResult.canLogout) &&
        Objects.equals(this.apiUser, camundaUserResult.apiUser) &&
        Objects.equals(this.userKey, camundaUserResult.userKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, displayName, authorizedApplications, tenants, groups, roles, salesPlanType, c8Links, canLogout, apiUser, userKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CamundaUserResult {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    authorizedApplications: ").append(toIndentedString(authorizedApplications)).append("\n");
    sb.append("    tenants: ").append(toIndentedString(tenants)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    salesPlanType: ").append(toIndentedString(salesPlanType)).append("\n");
    sb.append("    c8Links: ").append(toIndentedString(c8Links)).append("\n");
    sb.append("    canLogout: ").append(toIndentedString(canLogout)).append("\n");
    sb.append("    apiUser: ").append(toIndentedString(apiUser)).append("\n");
    sb.append("    userKey: ").append(toIndentedString(userKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `userId` to the URL query string
    if (getUserId() != null) {
      try {
        joiner.add(String.format("%suserId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `displayName` to the URL query string
    if (getDisplayName() != null) {
      try {
        joiner.add(String.format("%sdisplayName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDisplayName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `authorizedApplications` to the URL query string
    if (getAuthorizedApplications() != null) {
      for (int i = 0; i < getAuthorizedApplications().size(); i++) {
        try {
          joiner.add(String.format("%sauthorizedApplications%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getAuthorizedApplications().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `tenants` to the URL query string
    if (getTenants() != null) {
      for (int i = 0; i < getTenants().size(); i++) {
        if (getTenants().get(i) != null) {
          joiner.add(getTenants().get(i).toUrlQueryString(String.format("%stenants%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `groups` to the URL query string
    if (getGroups() != null) {
      for (int i = 0; i < getGroups().size(); i++) {
        try {
          joiner.add(String.format("%sgroups%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getGroups().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `roles` to the URL query string
    if (getRoles() != null) {
      for (int i = 0; i < getRoles().size(); i++) {
        try {
          joiner.add(String.format("%sroles%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getRoles().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `salesPlanType` to the URL query string
    if (getSalesPlanType() != null) {
      try {
        joiner.add(String.format("%ssalesPlanType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSalesPlanType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `c8Links` to the URL query string
    if (getC8Links() != null) {
      for (int i = 0; i < getC8Links().size(); i++) {
        if (getC8Links().get(i) != null) {
          joiner.add(getC8Links().get(i).toUrlQueryString(String.format("%sc8Links%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `canLogout` to the URL query string
    if (getCanLogout() != null) {
      try {
        joiner.add(String.format("%scanLogout%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCanLogout()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `apiUser` to the URL query string
    if (getApiUser() != null) {
      try {
        joiner.add(String.format("%sapiUser%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getApiUser()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `userKey` to the URL query string
    if (getUserKey() != null) {
      try {
        joiner.add(String.format("%suserKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

