/*
 * Orchestration Cluster REST API
 * API for communicating with a Camunda 8 cluster.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.camunda.client.protocol.rest;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.camunda.client.protocol.rest.ProcessInstanceFilter;
import io.camunda.client.protocol.rest.ProcessInstanceModificationMoveBatchOperationInstruction;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The process instance filter to define on which process instances tokens should be moved, as well as mapping instructions which active element instances should be terminated and which new element instances should be activated 
 */
@JsonPropertyOrder({
  ProcessInstanceModificationBatchOperationRequest.JSON_PROPERTY_FILTER,
  ProcessInstanceModificationBatchOperationRequest.JSON_PROPERTY_MOVE_INSTRUCTIONS
})
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-24T12:02:12.602366536Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class ProcessInstanceModificationBatchOperationRequest {
  public static final String JSON_PROPERTY_FILTER = "filter";
  @javax.annotation.Nonnull
  private ProcessInstanceFilter filter;

  public static final String JSON_PROPERTY_MOVE_INSTRUCTIONS = "moveInstructions";
  @javax.annotation.Nonnull
  private List<ProcessInstanceModificationMoveBatchOperationInstruction> moveInstructions = new ArrayList<>();

  public ProcessInstanceModificationBatchOperationRequest() {
  }

  public ProcessInstanceModificationBatchOperationRequest filter(@javax.annotation.Nonnull ProcessInstanceFilter filter) {
    
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ProcessInstanceFilter getFilter() {
    return filter;
  }


  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFilter(@javax.annotation.Nonnull ProcessInstanceFilter filter) {
    this.filter = filter;
  }

  public ProcessInstanceModificationBatchOperationRequest moveInstructions(@javax.annotation.Nonnull List<ProcessInstanceModificationMoveBatchOperationInstruction> moveInstructions) {
    
    this.moveInstructions = moveInstructions;
    return this;
  }

  public ProcessInstanceModificationBatchOperationRequest addMoveInstructionsItem(ProcessInstanceModificationMoveBatchOperationInstruction moveInstructionsItem) {
    if (this.moveInstructions == null) {
      this.moveInstructions = new ArrayList<>();
    }
    this.moveInstructions.add(moveInstructionsItem);
    return this;
  }

  /**
   * Instructions describing which elements should be activated in which scopes and which variables should be created.
   * @return moveInstructions
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MOVE_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ProcessInstanceModificationMoveBatchOperationInstruction> getMoveInstructions() {
    return moveInstructions;
  }


  @JsonProperty(JSON_PROPERTY_MOVE_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMoveInstructions(@javax.annotation.Nonnull List<ProcessInstanceModificationMoveBatchOperationInstruction> moveInstructions) {
    this.moveInstructions = moveInstructions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessInstanceModificationBatchOperationRequest processInstanceModificationBatchOperationRequest = (ProcessInstanceModificationBatchOperationRequest) o;
    return Objects.equals(this.filter, processInstanceModificationBatchOperationRequest.filter) &&
        Objects.equals(this.moveInstructions, processInstanceModificationBatchOperationRequest.moveInstructions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, moveInstructions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessInstanceModificationBatchOperationRequest {\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    moveInstructions: ").append(toIndentedString(moveInstructions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `filter` to the URL query string
    if (getFilter() != null) {
      joiner.add(getFilter().toUrlQueryString(prefix + "filter" + suffix));
    }

    // add `moveInstructions` to the URL query string
    if (getMoveInstructions() != null) {
      for (int i = 0; i < getMoveInstructions().size(); i++) {
        if (getMoveInstructions().get(i) != null) {
          joiner.add(getMoveInstructions().get(i).toUrlQueryString(String.format("%smoveInstructions%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

