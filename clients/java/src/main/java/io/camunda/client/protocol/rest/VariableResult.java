/*
 * Orchestration Cluster REST API
 * API for communicating with a Camunda 8 cluster.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.camunda.client.protocol.rest;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Variable search response item.
 */
@JsonPropertyOrder({
  VariableResult.JSON_PROPERTY_VALUE,
  VariableResult.JSON_PROPERTY_NAME,
  VariableResult.JSON_PROPERTY_TENANT_ID,
  VariableResult.JSON_PROPERTY_VARIABLE_KEY,
  VariableResult.JSON_PROPERTY_SCOPE_KEY,
  VariableResult.JSON_PROPERTY_PROCESS_INSTANCE_KEY
})
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-24T12:02:12.602366536Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class VariableResult {
  public static final String JSON_PROPERTY_VALUE = "value";
  @javax.annotation.Nullable
  private String value;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nullable
  private String name;

  public static final String JSON_PROPERTY_TENANT_ID = "tenantId";
  @javax.annotation.Nullable
  private String tenantId;

  public static final String JSON_PROPERTY_VARIABLE_KEY = "variableKey";
  @javax.annotation.Nullable
  private String variableKey;

  public static final String JSON_PROPERTY_SCOPE_KEY = "scopeKey";
  @javax.annotation.Nullable
  private String scopeKey;

  public static final String JSON_PROPERTY_PROCESS_INSTANCE_KEY = "processInstanceKey";
  @javax.annotation.Nullable
  private String processInstanceKey;

  public VariableResult() {
  }

  public VariableResult value(@javax.annotation.Nullable String value) {
    
    this.value = value;
    return this;
  }

  /**
   * Full value of this variable.
   * @return value
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValue(@javax.annotation.Nullable String value) {
    this.value = value;
  }

  public VariableResult name(@javax.annotation.Nullable String name) {
    
    this.name = name;
    return this;
  }

  /**
   * Name of this variable.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }

  public VariableResult tenantId(@javax.annotation.Nullable String tenantId) {
    
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Tenant ID of this variable.
   * @return tenantId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTenantId() {
    return tenantId;
  }


  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTenantId(@javax.annotation.Nullable String tenantId) {
    this.tenantId = tenantId;
  }

  public VariableResult variableKey(@javax.annotation.Nullable String variableKey) {
    
    this.variableKey = variableKey;
    return this;
  }

  /**
   * The key for this variable.
   * @return variableKey
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VARIABLE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVariableKey() {
    return variableKey;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariableKey(@javax.annotation.Nullable String variableKey) {
    this.variableKey = variableKey;
  }

  public VariableResult scopeKey(@javax.annotation.Nullable String scopeKey) {
    
    this.scopeKey = scopeKey;
    return this;
  }

  /**
   * The key of the scope of this variable.
   * @return scopeKey
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCOPE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScopeKey() {
    return scopeKey;
  }


  @JsonProperty(JSON_PROPERTY_SCOPE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScopeKey(@javax.annotation.Nullable String scopeKey) {
    this.scopeKey = scopeKey;
  }

  public VariableResult processInstanceKey(@javax.annotation.Nullable String processInstanceKey) {
    
    this.processInstanceKey = processInstanceKey;
    return this;
  }

  /**
   * The key of the process instance of this variable.
   * @return processInstanceKey
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessInstanceKey() {
    return processInstanceKey;
  }


  @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessInstanceKey(@javax.annotation.Nullable String processInstanceKey) {
    this.processInstanceKey = processInstanceKey;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VariableResult variableResult = (VariableResult) o;
    return Objects.equals(this.value, variableResult.value) &&
        Objects.equals(this.name, variableResult.name) &&
        Objects.equals(this.tenantId, variableResult.tenantId) &&
        Objects.equals(this.variableKey, variableResult.variableKey) &&
        Objects.equals(this.scopeKey, variableResult.scopeKey) &&
        Objects.equals(this.processInstanceKey, variableResult.processInstanceKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, name, tenantId, variableKey, scopeKey, processInstanceKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VariableResult {\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    variableKey: ").append(toIndentedString(variableKey)).append("\n");
    sb.append("    scopeKey: ").append(toIndentedString(scopeKey)).append("\n");
    sb.append("    processInstanceKey: ").append(toIndentedString(processInstanceKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tenantId` to the URL query string
    if (getTenantId() != null) {
      try {
        joiner.add(String.format("%stenantId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTenantId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `variableKey` to the URL query string
    if (getVariableKey() != null) {
      try {
        joiner.add(String.format("%svariableKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVariableKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `scopeKey` to the URL query string
    if (getScopeKey() != null) {
      try {
        joiner.add(String.format("%sscopeKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getScopeKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `processInstanceKey` to the URL query string
    if (getProcessInstanceKey() != null) {
      try {
        joiner.add(String.format("%sprocessInstanceKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProcessInstanceKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

