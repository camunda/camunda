/*
 * Orchestration Cluster REST API
 * API for communicating with a Camunda 8 cluster.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.camunda.client.protocol.rest;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * SetVariableRequest
 */
@JsonPropertyOrder({
  SetVariableRequest.JSON_PROPERTY_VARIABLES,
  SetVariableRequest.JSON_PROPERTY_LOCAL,
  SetVariableRequest.JSON_PROPERTY_OPERATION_REFERENCE
})
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-24T12:02:12.602366536Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class SetVariableRequest {
  public static final String JSON_PROPERTY_VARIABLES = "variables";
  @javax.annotation.Nonnull
  private Map<String, Object> variables = new HashMap<>();

  public static final String JSON_PROPERTY_LOCAL = "local";
  @javax.annotation.Nullable
  private Boolean local = false;

  public static final String JSON_PROPERTY_OPERATION_REFERENCE = "operationReference";
  @javax.annotation.Nullable
  private Long operationReference;

  public SetVariableRequest() {
  }

  public SetVariableRequest variables(@javax.annotation.Nonnull Map<String, Object> variables) {
    
    this.variables = variables;
    return this;
  }

  public SetVariableRequest putVariablesItem(String key, Object variablesItem) {
    this.variables.put(key, variablesItem);
    return this;
  }

  /**
   * JSON object representing the variables to set in the element’s scope.
   * @return variables
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VARIABLES)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)

  public Map<String, Object> getVariables() {
    return variables;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLES)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)
  public void setVariables(@javax.annotation.Nonnull Map<String, Object> variables) {
    this.variables = variables;
  }

  public SetVariableRequest local(@javax.annotation.Nullable Boolean local) {
    
    this.local = local;
    return this;
  }

  /**
   * If set to true, the variables are merged strictly into the local scope (as specified by the &#x60;elementInstanceKey&#x60;). Otherwise, the variables are propagated to upper scopes and set at the outermost one.  Let’s consider the following example:  There are two scopes &#39;1&#39; and &#39;2&#39;. Scope &#39;1&#39; is the parent scope of &#39;2&#39;. The effective variables of the scopes are: 1 &#x3D;&gt; { \&quot;foo\&quot; : 2 } 2 &#x3D;&gt; { \&quot;bar\&quot; : 1 }  An update request with elementInstanceKey as &#39;2&#39;, variables { \&quot;foo\&quot; : 5 }, and local set to true leaves scope &#39;1&#39; unchanged and adjusts scope &#39;2&#39; to { \&quot;bar\&quot; : 1, \&quot;foo\&quot; 5 }.  By default, with local set to false, scope &#39;1&#39; will be { \&quot;foo\&quot;: 5 } and scope &#39;2&#39; will be { \&quot;bar\&quot; : 1 }. 
   * @return local
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLocal() {
    return local;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocal(@javax.annotation.Nullable Boolean local) {
    this.local = local;
  }

  public SetVariableRequest operationReference(@javax.annotation.Nullable Long operationReference) {
    
    this.operationReference = operationReference;
    return this;
  }

  /**
   * A reference key chosen by the user that will be part of all records resulting from this operation. Must be &gt; 0 if provided. 
   * minimum: 1
   * @return operationReference
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPERATION_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getOperationReference() {
    return operationReference;
  }


  @JsonProperty(JSON_PROPERTY_OPERATION_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperationReference(@javax.annotation.Nullable Long operationReference) {
    this.operationReference = operationReference;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetVariableRequest setVariableRequest = (SetVariableRequest) o;
    return Objects.equals(this.variables, setVariableRequest.variables) &&
        Objects.equals(this.local, setVariableRequest.local) &&
        Objects.equals(this.operationReference, setVariableRequest.operationReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(variables, local, operationReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetVariableRequest {\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    operationReference: ").append(toIndentedString(operationReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `variables` to the URL query string
    if (getVariables() != null) {
      for (String _key : getVariables().keySet()) {
        try {
          joiner.add(String.format("%svariables%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getVariables().get(_key), URLEncoder.encode(String.valueOf(getVariables().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `local` to the URL query string
    if (getLocal() != null) {
      try {
        joiner.add(String.format("%slocal%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLocal()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `operationReference` to the URL query string
    if (getOperationReference() != null) {
      try {
        joiner.add(String.format("%soperationReference%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOperationReference()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

