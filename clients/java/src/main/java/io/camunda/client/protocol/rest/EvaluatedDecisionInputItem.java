/*
 * Orchestration Cluster REST API
 * API for communicating with a Camunda 8 cluster.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.camunda.client.protocol.rest;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * A decision input that was evaluated within this decision evaluation.
 */
@JsonPropertyOrder({
  EvaluatedDecisionInputItem.JSON_PROPERTY_INPUT_ID,
  EvaluatedDecisionInputItem.JSON_PROPERTY_INPUT_NAME,
  EvaluatedDecisionInputItem.JSON_PROPERTY_INPUT_VALUE
})
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-24T12:02:12.602366536Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class EvaluatedDecisionInputItem {
  public static final String JSON_PROPERTY_INPUT_ID = "inputId";
  @javax.annotation.Nullable
  private String inputId;

  public static final String JSON_PROPERTY_INPUT_NAME = "inputName";
  @javax.annotation.Nullable
  private String inputName;

  public static final String JSON_PROPERTY_INPUT_VALUE = "inputValue";
  @javax.annotation.Nullable
  private String inputValue;

  public EvaluatedDecisionInputItem() {
  }

  public EvaluatedDecisionInputItem inputId(@javax.annotation.Nullable String inputId) {
    
    this.inputId = inputId;
    return this;
  }

  /**
   * The ID of the evaluated decision input.
   * @return inputId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInputId() {
    return inputId;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputId(@javax.annotation.Nullable String inputId) {
    this.inputId = inputId;
  }

  public EvaluatedDecisionInputItem inputName(@javax.annotation.Nullable String inputName) {
    
    this.inputName = inputName;
    return this;
  }

  /**
   * The name of the evaluated decision input.
   * @return inputName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInputName() {
    return inputName;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputName(@javax.annotation.Nullable String inputName) {
    this.inputName = inputName;
  }

  public EvaluatedDecisionInputItem inputValue(@javax.annotation.Nullable String inputValue) {
    
    this.inputValue = inputValue;
    return this;
  }

  /**
   * The value of the evaluated decision input.
   * @return inputValue
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInputValue() {
    return inputValue;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputValue(@javax.annotation.Nullable String inputValue) {
    this.inputValue = inputValue;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluatedDecisionInputItem evaluatedDecisionInputItem = (EvaluatedDecisionInputItem) o;
    return Objects.equals(this.inputId, evaluatedDecisionInputItem.inputId) &&
        Objects.equals(this.inputName, evaluatedDecisionInputItem.inputName) &&
        Objects.equals(this.inputValue, evaluatedDecisionInputItem.inputValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputId, inputName, inputValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluatedDecisionInputItem {\n");
    sb.append("    inputId: ").append(toIndentedString(inputId)).append("\n");
    sb.append("    inputName: ").append(toIndentedString(inputName)).append("\n");
    sb.append("    inputValue: ").append(toIndentedString(inputValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `inputId` to the URL query string
    if (getInputId() != null) {
      try {
        joiner.add(String.format("%sinputId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInputId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `inputName` to the URL query string
    if (getInputName() != null) {
      try {
        joiner.add(String.format("%sinputName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInputName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `inputValue` to the URL query string
    if (getInputValue() != null) {
      try {
        joiner.add(String.format("%sinputValue%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInputValue()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

