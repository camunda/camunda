/*
 * Orchestration Cluster REST API
 * API for communicating with a Camunda 8 cluster.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.camunda.client.protocol.rest;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The response of a license request.
 */
@JsonPropertyOrder({
  LicenseResponse.JSON_PROPERTY_VALID_LICENSE,
  LicenseResponse.JSON_PROPERTY_LICENSE_TYPE,
  LicenseResponse.JSON_PROPERTY_IS_COMMERCIAL,
  LicenseResponse.JSON_PROPERTY_EXPIRES_AT
})
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-24T12:02:12.602366536Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class LicenseResponse {
  public static final String JSON_PROPERTY_VALID_LICENSE = "validLicense";
  @javax.annotation.Nullable
  private Boolean validLicense;

  public static final String JSON_PROPERTY_LICENSE_TYPE = "licenseType";
  @javax.annotation.Nullable
  private String licenseType;

  public static final String JSON_PROPERTY_IS_COMMERCIAL = "isCommercial";
  @javax.annotation.Nullable
  private Boolean isCommercial;

  public static final String JSON_PROPERTY_EXPIRES_AT = "expiresAt";
  @javax.annotation.Nullable
  private OffsetDateTime expiresAt;

  public LicenseResponse() {
  }

  public LicenseResponse validLicense(@javax.annotation.Nullable Boolean validLicense) {
    
    this.validLicense = validLicense;
    return this;
  }

  /**
   * True if the Camunda license is valid, false if otherwise
   * @return validLicense
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALID_LICENSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getValidLicense() {
    return validLicense;
  }


  @JsonProperty(JSON_PROPERTY_VALID_LICENSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValidLicense(@javax.annotation.Nullable Boolean validLicense) {
    this.validLicense = validLicense;
  }

  public LicenseResponse licenseType(@javax.annotation.Nullable String licenseType) {
    
    this.licenseType = licenseType;
    return this;
  }

  /**
   * Will return the license type property of the Camunda license
   * @return licenseType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LICENSE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLicenseType() {
    return licenseType;
  }


  @JsonProperty(JSON_PROPERTY_LICENSE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLicenseType(@javax.annotation.Nullable String licenseType) {
    this.licenseType = licenseType;
  }

  public LicenseResponse isCommercial(@javax.annotation.Nullable Boolean isCommercial) {
    
    this.isCommercial = isCommercial;
    return this;
  }

  /**
   * Will be false when a license contains a non-commerical&#x3D;true property
   * @return isCommercial
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_COMMERCIAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsCommercial() {
    return isCommercial;
  }


  @JsonProperty(JSON_PROPERTY_IS_COMMERCIAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsCommercial(@javax.annotation.Nullable Boolean isCommercial) {
    this.isCommercial = isCommercial;
  }

  public LicenseResponse expiresAt(@javax.annotation.Nullable OffsetDateTime expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * The date when the Camunda license expires
   * @return expiresAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpiresAt(@javax.annotation.Nullable OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseResponse licenseResponse = (LicenseResponse) o;
    return Objects.equals(this.validLicense, licenseResponse.validLicense) &&
        Objects.equals(this.licenseType, licenseResponse.licenseType) &&
        Objects.equals(this.isCommercial, licenseResponse.isCommercial) &&
        Objects.equals(this.expiresAt, licenseResponse.expiresAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(validLicense, licenseType, isCommercial, expiresAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseResponse {\n");
    sb.append("    validLicense: ").append(toIndentedString(validLicense)).append("\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    isCommercial: ").append(toIndentedString(isCommercial)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `validLicense` to the URL query string
    if (getValidLicense() != null) {
      try {
        joiner.add(String.format("%svalidLicense%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getValidLicense()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `licenseType` to the URL query string
    if (getLicenseType() != null) {
      try {
        joiner.add(String.format("%slicenseType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLicenseType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isCommercial` to the URL query string
    if (getIsCommercial() != null) {
      try {
        joiner.add(String.format("%sisCommercial%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsCommercial()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `expiresAt` to the URL query string
    if (getExpiresAt() != null) {
      try {
        joiner.add(String.format("%sexpiresAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpiresAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

