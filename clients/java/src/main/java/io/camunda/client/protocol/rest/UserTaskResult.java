/*
 * Orchestration Cluster REST API
 * API for communicating with a Camunda 8 cluster.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.camunda.client.protocol.rest;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.camunda.client.protocol.rest.UserTaskStateEnum;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * UserTaskResult
 */
@JsonPropertyOrder({
  UserTaskResult.JSON_PROPERTY_NAME,
  UserTaskResult.JSON_PROPERTY_STATE,
  UserTaskResult.JSON_PROPERTY_ASSIGNEE,
  UserTaskResult.JSON_PROPERTY_ELEMENT_ID,
  UserTaskResult.JSON_PROPERTY_CANDIDATE_GROUPS,
  UserTaskResult.JSON_PROPERTY_CANDIDATE_USERS,
  UserTaskResult.JSON_PROPERTY_PROCESS_DEFINITION_ID,
  UserTaskResult.JSON_PROPERTY_CREATION_DATE,
  UserTaskResult.JSON_PROPERTY_COMPLETION_DATE,
  UserTaskResult.JSON_PROPERTY_FOLLOW_UP_DATE,
  UserTaskResult.JSON_PROPERTY_DUE_DATE,
  UserTaskResult.JSON_PROPERTY_TENANT_ID,
  UserTaskResult.JSON_PROPERTY_EXTERNAL_FORM_REFERENCE,
  UserTaskResult.JSON_PROPERTY_PROCESS_DEFINITION_VERSION,
  UserTaskResult.JSON_PROPERTY_CUSTOM_HEADERS,
  UserTaskResult.JSON_PROPERTY_PRIORITY,
  UserTaskResult.JSON_PROPERTY_USER_TASK_KEY,
  UserTaskResult.JSON_PROPERTY_ELEMENT_INSTANCE_KEY,
  UserTaskResult.JSON_PROPERTY_PROCESS_DEFINITION_KEY,
  UserTaskResult.JSON_PROPERTY_PROCESS_INSTANCE_KEY,
  UserTaskResult.JSON_PROPERTY_FORM_KEY
})
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-24T12:02:12.602366536Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class UserTaskResult {
  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nullable
  private String name;

  public static final String JSON_PROPERTY_STATE = "state";
  @javax.annotation.Nullable
  private UserTaskStateEnum state;

  public static final String JSON_PROPERTY_ASSIGNEE = "assignee";
  @javax.annotation.Nullable
  private String assignee;

  public static final String JSON_PROPERTY_ELEMENT_ID = "elementId";
  @javax.annotation.Nullable
  private String elementId;

  public static final String JSON_PROPERTY_CANDIDATE_GROUPS = "candidateGroups";
  @javax.annotation.Nullable
  private List<String> candidateGroups = new ArrayList<>();

  public static final String JSON_PROPERTY_CANDIDATE_USERS = "candidateUsers";
  @javax.annotation.Nullable
  private List<String> candidateUsers = new ArrayList<>();

  public static final String JSON_PROPERTY_PROCESS_DEFINITION_ID = "processDefinitionId";
  @javax.annotation.Nullable
  private String processDefinitionId;

  public static final String JSON_PROPERTY_CREATION_DATE = "creationDate";
  @javax.annotation.Nullable
  private OffsetDateTime creationDate;

  public static final String JSON_PROPERTY_COMPLETION_DATE = "completionDate";
  @javax.annotation.Nullable
  private OffsetDateTime completionDate;

  public static final String JSON_PROPERTY_FOLLOW_UP_DATE = "followUpDate";
  @javax.annotation.Nullable
  private OffsetDateTime followUpDate;

  public static final String JSON_PROPERTY_DUE_DATE = "dueDate";
  @javax.annotation.Nullable
  private OffsetDateTime dueDate;

  public static final String JSON_PROPERTY_TENANT_ID = "tenantId";
  @javax.annotation.Nullable
  private String tenantId;

  public static final String JSON_PROPERTY_EXTERNAL_FORM_REFERENCE = "externalFormReference";
  @javax.annotation.Nullable
  private String externalFormReference;

  public static final String JSON_PROPERTY_PROCESS_DEFINITION_VERSION = "processDefinitionVersion";
  @javax.annotation.Nullable
  private Integer processDefinitionVersion;

  public static final String JSON_PROPERTY_CUSTOM_HEADERS = "customHeaders";
  @javax.annotation.Nullable
  private Map<String, String> customHeaders = new HashMap<>();

  public static final String JSON_PROPERTY_PRIORITY = "priority";
  @javax.annotation.Nullable
  private Integer priority = 50;

  public static final String JSON_PROPERTY_USER_TASK_KEY = "userTaskKey";
  @javax.annotation.Nullable
  private String userTaskKey;

  public static final String JSON_PROPERTY_ELEMENT_INSTANCE_KEY = "elementInstanceKey";
  @javax.annotation.Nullable
  private String elementInstanceKey;

  public static final String JSON_PROPERTY_PROCESS_DEFINITION_KEY = "processDefinitionKey";
  @javax.annotation.Nullable
  private String processDefinitionKey;

  public static final String JSON_PROPERTY_PROCESS_INSTANCE_KEY = "processInstanceKey";
  @javax.annotation.Nullable
  private String processInstanceKey;

  public static final String JSON_PROPERTY_FORM_KEY = "formKey";
  @javax.annotation.Nullable
  private String formKey;

  public UserTaskResult() {
  }

  public UserTaskResult name(@javax.annotation.Nullable String name) {
    
    this.name = name;
    return this;
  }

  /**
   * The name for this user task.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }

  public UserTaskResult state(@javax.annotation.Nullable UserTaskStateEnum state) {
    
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UserTaskStateEnum getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(@javax.annotation.Nullable UserTaskStateEnum state) {
    this.state = state;
  }

  public UserTaskResult assignee(@javax.annotation.Nullable String assignee) {
    
    this.assignee = assignee;
    return this;
  }

  /**
   * The assignee of the user task.
   * @return assignee
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASSIGNEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAssignee() {
    return assignee;
  }


  @JsonProperty(JSON_PROPERTY_ASSIGNEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAssignee(@javax.annotation.Nullable String assignee) {
    this.assignee = assignee;
  }

  public UserTaskResult elementId(@javax.annotation.Nullable String elementId) {
    
    this.elementId = elementId;
    return this;
  }

  /**
   * The element ID of the user task.
   * @return elementId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ELEMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getElementId() {
    return elementId;
  }


  @JsonProperty(JSON_PROPERTY_ELEMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setElementId(@javax.annotation.Nullable String elementId) {
    this.elementId = elementId;
  }

  public UserTaskResult candidateGroups(@javax.annotation.Nullable List<String> candidateGroups) {
    
    this.candidateGroups = candidateGroups;
    return this;
  }

  public UserTaskResult addCandidateGroupsItem(String candidateGroupsItem) {
    if (this.candidateGroups == null) {
      this.candidateGroups = new ArrayList<>();
    }
    this.candidateGroups.add(candidateGroupsItem);
    return this;
  }

  /**
   * The candidate groups for this user task.
   * @return candidateGroups
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CANDIDATE_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCandidateGroups() {
    return candidateGroups;
  }


  @JsonProperty(JSON_PROPERTY_CANDIDATE_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCandidateGroups(@javax.annotation.Nullable List<String> candidateGroups) {
    this.candidateGroups = candidateGroups;
  }

  public UserTaskResult candidateUsers(@javax.annotation.Nullable List<String> candidateUsers) {
    
    this.candidateUsers = candidateUsers;
    return this;
  }

  public UserTaskResult addCandidateUsersItem(String candidateUsersItem) {
    if (this.candidateUsers == null) {
      this.candidateUsers = new ArrayList<>();
    }
    this.candidateUsers.add(candidateUsersItem);
    return this;
  }

  /**
   * The candidate users for this user task.
   * @return candidateUsers
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CANDIDATE_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCandidateUsers() {
    return candidateUsers;
  }


  @JsonProperty(JSON_PROPERTY_CANDIDATE_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCandidateUsers(@javax.annotation.Nullable List<String> candidateUsers) {
    this.candidateUsers = candidateUsers;
  }

  public UserTaskResult processDefinitionId(@javax.annotation.Nullable String processDefinitionId) {
    
    this.processDefinitionId = processDefinitionId;
    return this;
  }

  /**
   * The ID of the process definition.
   * @return processDefinitionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessDefinitionId() {
    return processDefinitionId;
  }


  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessDefinitionId(@javax.annotation.Nullable String processDefinitionId) {
    this.processDefinitionId = processDefinitionId;
  }

  public UserTaskResult creationDate(@javax.annotation.Nullable OffsetDateTime creationDate) {
    
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The creation date of a user task.
   * @return creationDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreationDate(@javax.annotation.Nullable OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }

  public UserTaskResult completionDate(@javax.annotation.Nullable OffsetDateTime completionDate) {
    
    this.completionDate = completionDate;
    return this;
  }

  /**
   * The completion date of a user task.
   * @return completionDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPLETION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCompletionDate() {
    return completionDate;
  }


  @JsonProperty(JSON_PROPERTY_COMPLETION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompletionDate(@javax.annotation.Nullable OffsetDateTime completionDate) {
    this.completionDate = completionDate;
  }

  public UserTaskResult followUpDate(@javax.annotation.Nullable OffsetDateTime followUpDate) {
    
    this.followUpDate = followUpDate;
    return this;
  }

  /**
   * The follow date of a user task.
   * @return followUpDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FOLLOW_UP_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getFollowUpDate() {
    return followUpDate;
  }


  @JsonProperty(JSON_PROPERTY_FOLLOW_UP_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFollowUpDate(@javax.annotation.Nullable OffsetDateTime followUpDate) {
    this.followUpDate = followUpDate;
  }

  public UserTaskResult dueDate(@javax.annotation.Nullable OffsetDateTime dueDate) {
    
    this.dueDate = dueDate;
    return this;
  }

  /**
   * The due date of a user task.
   * @return dueDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getDueDate() {
    return dueDate;
  }


  @JsonProperty(JSON_PROPERTY_DUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDueDate(@javax.annotation.Nullable OffsetDateTime dueDate) {
    this.dueDate = dueDate;
  }

  public UserTaskResult tenantId(@javax.annotation.Nullable String tenantId) {
    
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Tenant ID of this user task.
   * @return tenantId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTenantId() {
    return tenantId;
  }


  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTenantId(@javax.annotation.Nullable String tenantId) {
    this.tenantId = tenantId;
  }

  public UserTaskResult externalFormReference(@javax.annotation.Nullable String externalFormReference) {
    
    this.externalFormReference = externalFormReference;
    return this;
  }

  /**
   * The external form reference.
   * @return externalFormReference
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTERNAL_FORM_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExternalFormReference() {
    return externalFormReference;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_FORM_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExternalFormReference(@javax.annotation.Nullable String externalFormReference) {
    this.externalFormReference = externalFormReference;
  }

  public UserTaskResult processDefinitionVersion(@javax.annotation.Nullable Integer processDefinitionVersion) {
    
    this.processDefinitionVersion = processDefinitionVersion;
    return this;
  }

  /**
   * The version of the process definition.
   * @return processDefinitionVersion
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getProcessDefinitionVersion() {
    return processDefinitionVersion;
  }


  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessDefinitionVersion(@javax.annotation.Nullable Integer processDefinitionVersion) {
    this.processDefinitionVersion = processDefinitionVersion;
  }

  public UserTaskResult customHeaders(@javax.annotation.Nullable Map<String, String> customHeaders) {
    
    this.customHeaders = customHeaders;
    return this;
  }

  public UserTaskResult putCustomHeadersItem(String key, String customHeadersItem) {
    if (this.customHeaders == null) {
      this.customHeaders = new HashMap<>();
    }
    this.customHeaders.put(key, customHeadersItem);
    return this;
  }

  /**
   * Custom headers for the user task.
   * @return customHeaders
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOM_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getCustomHeaders() {
    return customHeaders;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomHeaders(@javax.annotation.Nullable Map<String, String> customHeaders) {
    this.customHeaders = customHeaders;
  }

  public UserTaskResult priority(@javax.annotation.Nullable Integer priority) {
    
    this.priority = priority;
    return this;
  }

  /**
   * The priority of a user task. The higher the value the higher the priority.
   * minimum: 0
   * maximum: 100
   * @return priority
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRIORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPriority() {
    return priority;
  }


  @JsonProperty(JSON_PROPERTY_PRIORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPriority(@javax.annotation.Nullable Integer priority) {
    this.priority = priority;
  }

  public UserTaskResult userTaskKey(@javax.annotation.Nullable String userTaskKey) {
    
    this.userTaskKey = userTaskKey;
    return this;
  }

  /**
   * The key of the user task.
   * @return userTaskKey
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_TASK_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserTaskKey() {
    return userTaskKey;
  }


  @JsonProperty(JSON_PROPERTY_USER_TASK_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserTaskKey(@javax.annotation.Nullable String userTaskKey) {
    this.userTaskKey = userTaskKey;
  }

  public UserTaskResult elementInstanceKey(@javax.annotation.Nullable String elementInstanceKey) {
    
    this.elementInstanceKey = elementInstanceKey;
    return this;
  }

  /**
   * The key of the element instance.
   * @return elementInstanceKey
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ELEMENT_INSTANCE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getElementInstanceKey() {
    return elementInstanceKey;
  }


  @JsonProperty(JSON_PROPERTY_ELEMENT_INSTANCE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setElementInstanceKey(@javax.annotation.Nullable String elementInstanceKey) {
    this.elementInstanceKey = elementInstanceKey;
  }

  public UserTaskResult processDefinitionKey(@javax.annotation.Nullable String processDefinitionKey) {
    
    this.processDefinitionKey = processDefinitionKey;
    return this;
  }

  /**
   * The key of the process definition.
   * @return processDefinitionKey
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessDefinitionKey() {
    return processDefinitionKey;
  }


  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessDefinitionKey(@javax.annotation.Nullable String processDefinitionKey) {
    this.processDefinitionKey = processDefinitionKey;
  }

  public UserTaskResult processInstanceKey(@javax.annotation.Nullable String processInstanceKey) {
    
    this.processInstanceKey = processInstanceKey;
    return this;
  }

  /**
   * The key of the process instance.
   * @return processInstanceKey
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessInstanceKey() {
    return processInstanceKey;
  }


  @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessInstanceKey(@javax.annotation.Nullable String processInstanceKey) {
    this.processInstanceKey = processInstanceKey;
  }

  public UserTaskResult formKey(@javax.annotation.Nullable String formKey) {
    
    this.formKey = formKey;
    return this;
  }

  /**
   * The key of the form.
   * @return formKey
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORM_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFormKey() {
    return formKey;
  }


  @JsonProperty(JSON_PROPERTY_FORM_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormKey(@javax.annotation.Nullable String formKey) {
    this.formKey = formKey;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserTaskResult userTaskResult = (UserTaskResult) o;
    return Objects.equals(this.name, userTaskResult.name) &&
        Objects.equals(this.state, userTaskResult.state) &&
        Objects.equals(this.assignee, userTaskResult.assignee) &&
        Objects.equals(this.elementId, userTaskResult.elementId) &&
        Objects.equals(this.candidateGroups, userTaskResult.candidateGroups) &&
        Objects.equals(this.candidateUsers, userTaskResult.candidateUsers) &&
        Objects.equals(this.processDefinitionId, userTaskResult.processDefinitionId) &&
        Objects.equals(this.creationDate, userTaskResult.creationDate) &&
        Objects.equals(this.completionDate, userTaskResult.completionDate) &&
        Objects.equals(this.followUpDate, userTaskResult.followUpDate) &&
        Objects.equals(this.dueDate, userTaskResult.dueDate) &&
        Objects.equals(this.tenantId, userTaskResult.tenantId) &&
        Objects.equals(this.externalFormReference, userTaskResult.externalFormReference) &&
        Objects.equals(this.processDefinitionVersion, userTaskResult.processDefinitionVersion) &&
        Objects.equals(this.customHeaders, userTaskResult.customHeaders) &&
        Objects.equals(this.priority, userTaskResult.priority) &&
        Objects.equals(this.userTaskKey, userTaskResult.userTaskKey) &&
        Objects.equals(this.elementInstanceKey, userTaskResult.elementInstanceKey) &&
        Objects.equals(this.processDefinitionKey, userTaskResult.processDefinitionKey) &&
        Objects.equals(this.processInstanceKey, userTaskResult.processInstanceKey) &&
        Objects.equals(this.formKey, userTaskResult.formKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, state, assignee, elementId, candidateGroups, candidateUsers, processDefinitionId, creationDate, completionDate, followUpDate, dueDate, tenantId, externalFormReference, processDefinitionVersion, customHeaders, priority, userTaskKey, elementInstanceKey, processDefinitionKey, processInstanceKey, formKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserTaskResult {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    elementId: ").append(toIndentedString(elementId)).append("\n");
    sb.append("    candidateGroups: ").append(toIndentedString(candidateGroups)).append("\n");
    sb.append("    candidateUsers: ").append(toIndentedString(candidateUsers)).append("\n");
    sb.append("    processDefinitionId: ").append(toIndentedString(processDefinitionId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("    followUpDate: ").append(toIndentedString(followUpDate)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    externalFormReference: ").append(toIndentedString(externalFormReference)).append("\n");
    sb.append("    processDefinitionVersion: ").append(toIndentedString(processDefinitionVersion)).append("\n");
    sb.append("    customHeaders: ").append(toIndentedString(customHeaders)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    userTaskKey: ").append(toIndentedString(userTaskKey)).append("\n");
    sb.append("    elementInstanceKey: ").append(toIndentedString(elementInstanceKey)).append("\n");
    sb.append("    processDefinitionKey: ").append(toIndentedString(processDefinitionKey)).append("\n");
    sb.append("    processInstanceKey: ").append(toIndentedString(processInstanceKey)).append("\n");
    sb.append("    formKey: ").append(toIndentedString(formKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `state` to the URL query string
    if (getState() != null) {
      try {
        joiner.add(String.format("%sstate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getState()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `assignee` to the URL query string
    if (getAssignee() != null) {
      try {
        joiner.add(String.format("%sassignee%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAssignee()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `elementId` to the URL query string
    if (getElementId() != null) {
      try {
        joiner.add(String.format("%selementId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getElementId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `candidateGroups` to the URL query string
    if (getCandidateGroups() != null) {
      for (int i = 0; i < getCandidateGroups().size(); i++) {
        try {
          joiner.add(String.format("%scandidateGroups%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getCandidateGroups().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `candidateUsers` to the URL query string
    if (getCandidateUsers() != null) {
      for (int i = 0; i < getCandidateUsers().size(); i++) {
        try {
          joiner.add(String.format("%scandidateUsers%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getCandidateUsers().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `processDefinitionId` to the URL query string
    if (getProcessDefinitionId() != null) {
      try {
        joiner.add(String.format("%sprocessDefinitionId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProcessDefinitionId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `creationDate` to the URL query string
    if (getCreationDate() != null) {
      try {
        joiner.add(String.format("%screationDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreationDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `completionDate` to the URL query string
    if (getCompletionDate() != null) {
      try {
        joiner.add(String.format("%scompletionDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCompletionDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `followUpDate` to the URL query string
    if (getFollowUpDate() != null) {
      try {
        joiner.add(String.format("%sfollowUpDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFollowUpDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `dueDate` to the URL query string
    if (getDueDate() != null) {
      try {
        joiner.add(String.format("%sdueDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDueDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tenantId` to the URL query string
    if (getTenantId() != null) {
      try {
        joiner.add(String.format("%stenantId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTenantId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `externalFormReference` to the URL query string
    if (getExternalFormReference() != null) {
      try {
        joiner.add(String.format("%sexternalFormReference%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExternalFormReference()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `processDefinitionVersion` to the URL query string
    if (getProcessDefinitionVersion() != null) {
      try {
        joiner.add(String.format("%sprocessDefinitionVersion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProcessDefinitionVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `customHeaders` to the URL query string
    if (getCustomHeaders() != null) {
      for (String _key : getCustomHeaders().keySet()) {
        try {
          joiner.add(String.format("%scustomHeaders%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getCustomHeaders().get(_key), URLEncoder.encode(String.valueOf(getCustomHeaders().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `priority` to the URL query string
    if (getPriority() != null) {
      try {
        joiner.add(String.format("%spriority%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPriority()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `userTaskKey` to the URL query string
    if (getUserTaskKey() != null) {
      try {
        joiner.add(String.format("%suserTaskKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserTaskKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `elementInstanceKey` to the URL query string
    if (getElementInstanceKey() != null) {
      try {
        joiner.add(String.format("%selementInstanceKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getElementInstanceKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `processDefinitionKey` to the URL query string
    if (getProcessDefinitionKey() != null) {
      try {
        joiner.add(String.format("%sprocessDefinitionKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProcessDefinitionKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `processInstanceKey` to the URL query string
    if (getProcessInstanceKey() != null) {
      try {
        joiner.add(String.format("%sprocessInstanceKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProcessInstanceKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `formKey` to the URL query string
    if (getFormKey() != null) {
      try {
        joiner.add(String.format("%sformKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFormKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

