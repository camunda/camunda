/*
 * Orchestration Cluster REST API
 * API for communicating with a Camunda 8 cluster.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.camunda.client.protocol.rest;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.camunda.client.protocol.rest.ProcessInstanceStateEnum;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Advanced ProcessInstanceStateEnum filter.
 */
@JsonPropertyOrder({
  AdvancedProcessInstanceStateFilter.JSON_PROPERTY_$_EQ,
  AdvancedProcessInstanceStateFilter.JSON_PROPERTY_$_NEQ,
  AdvancedProcessInstanceStateFilter.JSON_PROPERTY_$_EXISTS,
  AdvancedProcessInstanceStateFilter.JSON_PROPERTY_$_IN,
  AdvancedProcessInstanceStateFilter.JSON_PROPERTY_$_LIKE
})
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-24T12:02:12.602366536Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class AdvancedProcessInstanceStateFilter {
  public static final String JSON_PROPERTY_$_EQ = "$eq";
  @javax.annotation.Nullable
  private ProcessInstanceStateEnum $eq;

  public static final String JSON_PROPERTY_$_NEQ = "$neq";
  @javax.annotation.Nullable
  private ProcessInstanceStateEnum $neq;

  public static final String JSON_PROPERTY_$_EXISTS = "$exists";
  @javax.annotation.Nullable
  private Boolean $exists;

  public static final String JSON_PROPERTY_$_IN = "$in";
  @javax.annotation.Nullable
  private List<ProcessInstanceStateEnum> $in = new ArrayList<>();

  public static final String JSON_PROPERTY_$_LIKE = "$like";
  @javax.annotation.Nullable
  private String $like;

  public AdvancedProcessInstanceStateFilter() {
  }

  public AdvancedProcessInstanceStateFilter $eq(@javax.annotation.Nullable ProcessInstanceStateEnum $eq) {
    
    this.$eq = $eq;
    return this;
  }

  /**
   * Checks for equality with the provided value.
   * @return $eq
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_$_EQ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ProcessInstanceStateEnum get$Eq() {
    return $eq;
  }


  @JsonProperty(JSON_PROPERTY_$_EQ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void set$Eq(@javax.annotation.Nullable ProcessInstanceStateEnum $eq) {
    this.$eq = $eq;
  }

  public AdvancedProcessInstanceStateFilter $neq(@javax.annotation.Nullable ProcessInstanceStateEnum $neq) {
    
    this.$neq = $neq;
    return this;
  }

  /**
   * Checks for inequality with the provided value.
   * @return $neq
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_$_NEQ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ProcessInstanceStateEnum get$Neq() {
    return $neq;
  }


  @JsonProperty(JSON_PROPERTY_$_NEQ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void set$Neq(@javax.annotation.Nullable ProcessInstanceStateEnum $neq) {
    this.$neq = $neq;
  }

  public AdvancedProcessInstanceStateFilter $exists(@javax.annotation.Nullable Boolean $exists) {
    
    this.$exists = $exists;
    return this;
  }

  /**
   * Checks if the current property exists.
   * @return $exists
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_$_EXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean get$Exists() {
    return $exists;
  }


  @JsonProperty(JSON_PROPERTY_$_EXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void set$Exists(@javax.annotation.Nullable Boolean $exists) {
    this.$exists = $exists;
  }

  public AdvancedProcessInstanceStateFilter $in(@javax.annotation.Nullable List<ProcessInstanceStateEnum> $in) {
    
    this.$in = $in;
    return this;
  }

  public AdvancedProcessInstanceStateFilter add$InItem(ProcessInstanceStateEnum $inItem) {
    if (this.$in == null) {
      this.$in = new ArrayList<>();
    }
    this.$in.add($inItem);
    return this;
  }

  /**
   * Checks if the property matches any of the provided values.
   * @return $in
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_$_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ProcessInstanceStateEnum> get$In() {
    return $in;
  }


  @JsonProperty(JSON_PROPERTY_$_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void set$In(@javax.annotation.Nullable List<ProcessInstanceStateEnum> $in) {
    this.$in = $in;
  }

  public AdvancedProcessInstanceStateFilter $like(@javax.annotation.Nullable String $like) {
    
    this.$like = $like;
    return this;
  }

  /**
   * Checks if the property matches the provided like value.  Supported wildcard characters are:  * &#x60;*&#x60;: matches zero, one, or multiple characters. * &#x60;?&#x60;: matches one, single character.  Wildcard characters can be escaped with backslash, for instance: &#x60;\\*&#x60;. 
   * @return $like
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_$_LIKE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String get$Like() {
    return $like;
  }


  @JsonProperty(JSON_PROPERTY_$_LIKE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void set$Like(@javax.annotation.Nullable String $like) {
    this.$like = $like;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvancedProcessInstanceStateFilter advancedProcessInstanceStateFilter = (AdvancedProcessInstanceStateFilter) o;
    return Objects.equals(this.$eq, advancedProcessInstanceStateFilter.$eq) &&
        Objects.equals(this.$neq, advancedProcessInstanceStateFilter.$neq) &&
        Objects.equals(this.$exists, advancedProcessInstanceStateFilter.$exists) &&
        Objects.equals(this.$in, advancedProcessInstanceStateFilter.$in) &&
        Objects.equals(this.$like, advancedProcessInstanceStateFilter.$like);
  }

  @Override
  public int hashCode() {
    return Objects.hash($eq, $neq, $exists, $in, $like);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvancedProcessInstanceStateFilter {\n");
    sb.append("    $eq: ").append(toIndentedString($eq)).append("\n");
    sb.append("    $neq: ").append(toIndentedString($neq)).append("\n");
    sb.append("    $exists: ").append(toIndentedString($exists)).append("\n");
    sb.append("    $in: ").append(toIndentedString($in)).append("\n");
    sb.append("    $like: ").append(toIndentedString($like)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `$eq` to the URL query string
    if (get$Eq() != null) {
      try {
        joiner.add(String.format("%s$eq%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(get$Eq()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `$neq` to the URL query string
    if (get$Neq() != null) {
      try {
        joiner.add(String.format("%s$neq%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(get$Neq()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `$exists` to the URL query string
    if (get$Exists() != null) {
      try {
        joiner.add(String.format("%s$exists%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(get$Exists()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `$in` to the URL query string
    if (get$In() != null) {
      for (int i = 0; i < get$In().size(); i++) {
        if (get$In().get(i) != null) {
          try {
            joiner.add(String.format("%s$in%s%s=%s", prefix, suffix,
                "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                URLEncoder.encode(String.valueOf(get$In().get(i)), "UTF-8").replaceAll("\\+", "%20")));
          } catch (UnsupportedEncodingException e) {
            // Should never happen, UTF-8 is always supported
            throw new RuntimeException(e);
          }
        }
      }
    }

    // add `$like` to the URL query string
    if (get$Like() != null) {
      try {
        joiner.add(String.format("%s$like%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(get$Like()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

