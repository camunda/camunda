/*
 * Orchestration Cluster REST API
 * API for communicating with a Camunda 8 cluster.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.camunda.client.protocol.rest;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.camunda.client.protocol.rest.AdvancedDateTimeFilter;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Date-time property with full advanced search capabilities.
 */
@JsonPropertyOrder({
  DateTimeFilterProperty.JSON_PROPERTY_$_EQ,
  DateTimeFilterProperty.JSON_PROPERTY_$_NEQ,
  DateTimeFilterProperty.JSON_PROPERTY_$_EXISTS,
  DateTimeFilterProperty.JSON_PROPERTY_$_GT,
  DateTimeFilterProperty.JSON_PROPERTY_$_GTE,
  DateTimeFilterProperty.JSON_PROPERTY_$_LT,
  DateTimeFilterProperty.JSON_PROPERTY_$_LTE,
  DateTimeFilterProperty.JSON_PROPERTY_$_IN
})
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-24T12:02:12.602366536Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class DateTimeFilterProperty {
  public static final String JSON_PROPERTY_$_EQ = "$eq";
  @javax.annotation.Nullable
  private OffsetDateTime $eq;

  public static final String JSON_PROPERTY_$_NEQ = "$neq";
  @javax.annotation.Nullable
  private OffsetDateTime $neq;

  public static final String JSON_PROPERTY_$_EXISTS = "$exists";
  @javax.annotation.Nullable
  private Boolean $exists;

  public static final String JSON_PROPERTY_$_GT = "$gt";
  @javax.annotation.Nullable
  private OffsetDateTime $gt;

  public static final String JSON_PROPERTY_$_GTE = "$gte";
  @javax.annotation.Nullable
  private OffsetDateTime $gte;

  public static final String JSON_PROPERTY_$_LT = "$lt";
  @javax.annotation.Nullable
  private OffsetDateTime $lt;

  public static final String JSON_PROPERTY_$_LTE = "$lte";
  @javax.annotation.Nullable
  private OffsetDateTime $lte;

  public static final String JSON_PROPERTY_$_IN = "$in";
  @javax.annotation.Nullable
  private List<OffsetDateTime> $in = new ArrayList<>();

  public DateTimeFilterProperty() {
  }

  public DateTimeFilterProperty $eq(@javax.annotation.Nullable OffsetDateTime $eq) {
    
    this.$eq = $eq;
    return this;
  }

  /**
   * Checks for equality with the provided value.
   * @return $eq
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_$_EQ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime get$Eq() {
    return $eq;
  }


  @JsonProperty(JSON_PROPERTY_$_EQ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void set$Eq(@javax.annotation.Nullable OffsetDateTime $eq) {
    this.$eq = $eq;
  }

  public DateTimeFilterProperty $neq(@javax.annotation.Nullable OffsetDateTime $neq) {
    
    this.$neq = $neq;
    return this;
  }

  /**
   * Checks for inequality with the provided value.
   * @return $neq
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_$_NEQ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime get$Neq() {
    return $neq;
  }


  @JsonProperty(JSON_PROPERTY_$_NEQ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void set$Neq(@javax.annotation.Nullable OffsetDateTime $neq) {
    this.$neq = $neq;
  }

  public DateTimeFilterProperty $exists(@javax.annotation.Nullable Boolean $exists) {
    
    this.$exists = $exists;
    return this;
  }

  /**
   * Checks if the current property exists.
   * @return $exists
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_$_EXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean get$Exists() {
    return $exists;
  }


  @JsonProperty(JSON_PROPERTY_$_EXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void set$Exists(@javax.annotation.Nullable Boolean $exists) {
    this.$exists = $exists;
  }

  public DateTimeFilterProperty $gt(@javax.annotation.Nullable OffsetDateTime $gt) {
    
    this.$gt = $gt;
    return this;
  }

  /**
   * Greater than comparison with the provided value.
   * @return $gt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_$_GT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime get$Gt() {
    return $gt;
  }


  @JsonProperty(JSON_PROPERTY_$_GT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void set$Gt(@javax.annotation.Nullable OffsetDateTime $gt) {
    this.$gt = $gt;
  }

  public DateTimeFilterProperty $gte(@javax.annotation.Nullable OffsetDateTime $gte) {
    
    this.$gte = $gte;
    return this;
  }

  /**
   * Greater than or equal comparison with the provided value.
   * @return $gte
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_$_GTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime get$Gte() {
    return $gte;
  }


  @JsonProperty(JSON_PROPERTY_$_GTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void set$Gte(@javax.annotation.Nullable OffsetDateTime $gte) {
    this.$gte = $gte;
  }

  public DateTimeFilterProperty $lt(@javax.annotation.Nullable OffsetDateTime $lt) {
    
    this.$lt = $lt;
    return this;
  }

  /**
   * Lower than comparison with the provided value.
   * @return $lt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_$_LT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime get$Lt() {
    return $lt;
  }


  @JsonProperty(JSON_PROPERTY_$_LT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void set$Lt(@javax.annotation.Nullable OffsetDateTime $lt) {
    this.$lt = $lt;
  }

  public DateTimeFilterProperty $lte(@javax.annotation.Nullable OffsetDateTime $lte) {
    
    this.$lte = $lte;
    return this;
  }

  /**
   * Lower than or equal comparison with the provided value.
   * @return $lte
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_$_LTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime get$Lte() {
    return $lte;
  }


  @JsonProperty(JSON_PROPERTY_$_LTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void set$Lte(@javax.annotation.Nullable OffsetDateTime $lte) {
    this.$lte = $lte;
  }

  public DateTimeFilterProperty $in(@javax.annotation.Nullable List<OffsetDateTime> $in) {
    
    this.$in = $in;
    return this;
  }

  public DateTimeFilterProperty add$InItem(OffsetDateTime $inItem) {
    if (this.$in == null) {
      this.$in = new ArrayList<>();
    }
    this.$in.add($inItem);
    return this;
  }

  /**
   * Checks if the property matches any of the provided values.
   * @return $in
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_$_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<OffsetDateTime> get$In() {
    return $in;
  }


  @JsonProperty(JSON_PROPERTY_$_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void set$In(@javax.annotation.Nullable List<OffsetDateTime> $in) {
    this.$in = $in;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DateTimeFilterProperty dateTimeFilterProperty = (DateTimeFilterProperty) o;
    return Objects.equals(this.$eq, dateTimeFilterProperty.$eq) &&
        Objects.equals(this.$neq, dateTimeFilterProperty.$neq) &&
        Objects.equals(this.$exists, dateTimeFilterProperty.$exists) &&
        Objects.equals(this.$gt, dateTimeFilterProperty.$gt) &&
        Objects.equals(this.$gte, dateTimeFilterProperty.$gte) &&
        Objects.equals(this.$lt, dateTimeFilterProperty.$lt) &&
        Objects.equals(this.$lte, dateTimeFilterProperty.$lte) &&
        Objects.equals(this.$in, dateTimeFilterProperty.$in);
  }

  @Override
  public int hashCode() {
    return Objects.hash($eq, $neq, $exists, $gt, $gte, $lt, $lte, $in);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DateTimeFilterProperty {\n");
    sb.append("    $eq: ").append(toIndentedString($eq)).append("\n");
    sb.append("    $neq: ").append(toIndentedString($neq)).append("\n");
    sb.append("    $exists: ").append(toIndentedString($exists)).append("\n");
    sb.append("    $gt: ").append(toIndentedString($gt)).append("\n");
    sb.append("    $gte: ").append(toIndentedString($gte)).append("\n");
    sb.append("    $lt: ").append(toIndentedString($lt)).append("\n");
    sb.append("    $lte: ").append(toIndentedString($lte)).append("\n");
    sb.append("    $in: ").append(toIndentedString($in)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `$eq` to the URL query string
    if (get$Eq() != null) {
      try {
        joiner.add(String.format("%s$eq%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(get$Eq()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `$neq` to the URL query string
    if (get$Neq() != null) {
      try {
        joiner.add(String.format("%s$neq%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(get$Neq()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `$exists` to the URL query string
    if (get$Exists() != null) {
      try {
        joiner.add(String.format("%s$exists%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(get$Exists()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `$gt` to the URL query string
    if (get$Gt() != null) {
      try {
        joiner.add(String.format("%s$gt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(get$Gt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `$gte` to the URL query string
    if (get$Gte() != null) {
      try {
        joiner.add(String.format("%s$gte%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(get$Gte()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `$lt` to the URL query string
    if (get$Lt() != null) {
      try {
        joiner.add(String.format("%s$lt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(get$Lt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `$lte` to the URL query string
    if (get$Lte() != null) {
      try {
        joiner.add(String.format("%s$lte%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(get$Lte()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `$in` to the URL query string
    if (get$In() != null) {
      for (int i = 0; i < get$In().size(); i++) {
        if (get$In().get(i) != null) {
          try {
            joiner.add(String.format("%s$in%s%s=%s", prefix, suffix,
                "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                URLEncoder.encode(String.valueOf(get$In().get(i)), "UTF-8").replaceAll("\\+", "%20")));
          } catch (UnsupportedEncodingException e) {
            // Should never happen, UTF-8 is always supported
            throw new RuntimeException(e);
          }
        }
      }
    }

    return joiner.toString();
  }

}

